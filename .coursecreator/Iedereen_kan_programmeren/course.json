{
  "summary" : "Lesstof voor iedereen kan programmeren.",
  "title" : "Iedereen-kan-programmeren",
  "programming_language" : "Python",
  "language" : "en",
  "course_type" : "PyCharm",
  "items" : [
    {
      "title" : "Week 2 - Variabele en operatoren",
      "items" : [
        {
          "title" : "Variabele",
          "task_list" : [
            {
              "name" : "Het aanmaken van variabelen",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [
                    {
                      "offset" : 90,
                      "length" : 9,
                      "possible_answer" : "x",
                      "placeholder_text" : "1. Vul in"
                    },
                    {
                      "offset" : 193,
                      "length" : 9,
                      "possible_answer" : "235",
                      "placeholder_text" : "2. Vul in"
                    },
                    {
                      "offset" : 298,
                      "length" : 9,
                      "possible_answer" : "integer",
                      "placeholder_text" : "3. Vul in"
                    },
                    {
                      "offset" : 345,
                      "length" : 9,
                      "possible_answer" : "stappenteller",
                      "placeholder_text" : "4. Vul in"
                    },
                    {
                      "offset" : 374,
                      "length" : 9,
                      "possible_answer" : "0",
                      "placeholder_text" : "5. Vul in"
                    },
                    {
                      "offset" : 481,
                      "length" : 9,
                      "possible_answer" : "45",
                      "placeholder_text" : "6. Vul in"
                    },
                    {
                      "offset" : 508,
                      "length" : 9,
                      "possible_answer" : "integer",
                      "placeholder_text" : "7. Vul in"
                    },
                    {
                      "offset" : 553,
                      "length" : 9,
                      "possible_answer" : "aantalHoeken",
                      "placeholder_text" : "8. Vul in"
                    },
                    {
                      "offset" : 582,
                      "length" : 9,
                      "possible_answer" : "4",
                      "placeholder_text" : "9. Vul in"
                    },
                    {
                      "offset" : 609,
                      "length" : 10,
                      "possible_answer" : "integer",
                      "placeholder_text" : "10. Vul in"
                    },
                    {
                      "offset" : 622,
                      "length" : 28,
                      "possible_answer" : "varA = -342",
                      "placeholder_text" : "11. Maak de juiste variabele"
                    },
                    {
                      "offset" : 723,
                      "length" : 28,
                      "possible_answer" : "varB = 244",
                      "placeholder_text" : "12. Maak de juiste variabele"
                    },
                    {
                      "offset" : 823,
                      "length" : 28,
                      "possible_answer" : "varC = 8942",
                      "placeholder_text" : "13. Maak de juiste variabele"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "## Opdracht 1: Vul de verschillende velden in met de juiste data.\n\nx = 5\n#Variabele naam: 1. Vul in\n#Variabele waarde: 5\n#Variabele type: integer\n\ny = 235\n#Variabele naam: y\n#Variabele waarde: 2. Vul in\n#Variabele type: integer\n\nz = -721\n#Variabele naam: z\n#Variabele waarde: -721\n#Variabele type: 3. Vul in\n\n\nstappenteller = 0\n#Variabele naam: 4. Vul in\n#Variabele waarde: 5. Vul in\n#Variabele type: integer\n\ntijdelijkGetal = 45\n#Variabele naam: tijdelijkGetal\n#Variabele waarde: 6. Vul in\n#Variabele type: 7. Vul in\n\naantalHoeken = 4\n#Variabele naam: 8. Vul in\n#Variabele waarde: 9. Vul in\n#Variabele type: 10. Vul in\n\n\n11. Maak de juiste variabele\n#Variabele naam: varA\n#Variabele waarde: -342\n#Variabele type: integer\n\n12. Maak de juiste variabele\n#Variabele naam: varB\n#Variabele waarde: 244\n#Variabele type: integer\n\n13. Maak de juiste variabele\n#Variabele naam: varC\n#Variabele waarde: 8942\n#Variabele type: integer\n\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "from UserInputHelper import *\nfrom test_helper import run_common_tests, failed, passed\nimport unittest\n\nhelper = Helper()\n\n\nclass varAanmaken(unittest.TestCase):\n    def testAnswer1(self):\n        self.assertEqual(helper.answers[0], \"x\")\n\n    def testAnswer2(self):\n        self.assertEqual(helper.answers[1], \"235\")\n\n    def testAnswer3(self):\n        self.assertRegex(helper.answers[2], \"integer|Integer|int\")\n\n    def testAnswer4(self):\n        self.assertEqual(helper.answers[3], \"stappenteller\")\n\n    def testAnswer5(self):\n        self.assertEqual(helper.answers[4], \"0\")\n\n    def testAnswer6(self):\n        self.assertEqual(helper.answers[5], \"45\")\n\n    def testAnswer7(self):\n        self.assertRegex(helper.answers[6], \"integer|Integer|int\")\n\n    def testAnswer8(self):\n        self.assertEqual(helper.answers[7], \"aantalHoeken\")\n\n    def testAnswer9(self):\n        self.assertEqual(helper.answers[8], \"4\")\n\n    def testAnswer10(self):\n        self.assertRegex(helper.answers[9], \"integer|Integer|int\")\n\n    def testAnswer11(self):\n        self.assertRegex(helper.answers[10], helper.re.expressionToRegex(\"varA = -342\"))\n\n    def testAnswer12(self):\n        self.assertRegex(helper.answers[11], helper.re.expressionToRegex(\"varB = 244\"))\n\n    def testAnswer13(self):\n        self.assertRegex(helper.answers[12], helper.re.expressionToRegex(\"varC = 8942\"))\n\n\n\n\n# def test_answer_placeholders():\n#     helper = Helper()\n#     for answerNumber in range(len(helper.answers)):\n#         outcome = False\n#         backupText = \"\"\n#         if(answerNumber == 0):\n#             outcome = helper.CheckInput(answerNumber, \"x\")\n#         elif(answerNumber == 1):\n#             outcome = helper.CheckInput(answerNumber, \"235\")\n#         elif(answerNumber == 2):\n#             outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n#         elif(answerNumber == 3):\n#             outcome = helper.CheckInput(answerNumber, \"stappenteller\")\n#         elif(answerNumber == 4):\n#             outcome = helper.CheckInput(answerNumber, \"0\")\n#         elif(answerNumber == 5):\n#             outcome = helper.CheckInput(answerNumber, \"45\")\n#         elif(answerNumber == 6):\n#             outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n#         elif(answerNumber == 7):\n#             outcome = helper.CheckInput(answerNumber, \"aantalHoeken\")\n#         elif(answerNumber == 8):\n#             outcome = helper.CheckInput(answerNumber, \"4\")\n#         elif(answerNumber == 9):\n#             outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n#         elif(answerNumber == 10):\n#             outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varA = -342\"))\n#         elif(answerNumber == 11):\n#             outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varB = 244\"))\n#         elif(answerNumber == 12):\n#             outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varC = 8942\"))\n#         CheckOutcome(outcome, answerNumber, backupText)\n#\n# def CheckOutcome(outcome, answerNumber, backupText):\n#     if(outcome):\n#         passed(\"Answer #\" + str(answerNumber) + \" is correct!\")\n#     else:\n#         failed(\"There is an error in answer #\"+ str(answerNumber)+\" \" + backupText)\n\nif __name__ == '__main__':\n    suite = unittest.TestLoader().loadTestsFromTestCase(testCaseClass=varAanmaken)\n    res = unittest.TextTestRunner().run(suite)\n    if res.wasSuccessful():\n        passed(\"Congratulations\")\n    else:\n        for el in res.failures:\n            failed(f\"There is an error in \" + str(el[0])[4:12])\n    # test_answer_placeholders()\n"
                }
              },
              "description_text" : "<html>\nWrite your task text here.\n<div class=\"hint\">\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\n</div>\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "Verschillende typen variabelen",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [
                    {
                      "offset" : 99,
                      "length" : 9,
                      "possible_answer" : "varA",
                      "placeholder_text" : "1. Vul in"
                    },
                    {
                      "offset" : 128,
                      "length" : 9,
                      "possible_answer" : "\"string\"",
                      "placeholder_text" : "2. Vul in"
                    },
                    {
                      "offset" : 226,
                      "length" : 9,
                      "possible_answer" : "\"stringString\"",
                      "placeholder_text" : "3. Vul in"
                    },
                    {
                      "offset" : 253,
                      "length" : 9,
                      "possible_answer" : "string",
                      "placeholder_text" : "4. Vul in"
                    },
                    {
                      "offset" : 290,
                      "length" : 9,
                      "possible_answer" : "varC",
                      "placeholder_text" : "5. Vul in"
                    },
                    {
                      "offset" : 319,
                      "length" : 9,
                      "possible_answer" : "0",
                      "placeholder_text" : "6. Vul in"
                    },
                    {
                      "offset" : 346,
                      "length" : 9,
                      "possible_answer" : "integer",
                      "placeholder_text" : "7. Vul in"
                    },
                    {
                      "offset" : 383,
                      "length" : 9,
                      "possible_answer" : "varD",
                      "placeholder_text" : "8. Vul in"
                    },
                    {
                      "offset" : 412,
                      "length" : 9,
                      "possible_answer" : "1",
                      "placeholder_text" : "9. Vul in"
                    },
                    {
                      "offset" : 439,
                      "length" : 10,
                      "possible_answer" : "integer",
                      "placeholder_text" : "10. Vul in"
                    },
                    {
                      "offset" : 451,
                      "length" : 28,
                      "possible_answer" : "varE = 145.1",
                      "placeholder_text" : "11. Maak de juiste variabele"
                    },
                    {
                      "offset" : 607,
                      "length" : 10,
                      "possible_answer" : "23.5345",
                      "placeholder_text" : "12. Vul in"
                    },
                    {
                      "offset" : 635,
                      "length" : 10,
                      "possible_answer" : "float",
                      "placeholder_text" : "13. Vul in"
                    },
                    {
                      "offset" : 647,
                      "length" : 32,
                      "possible_answer" : "varG = True",
                      "placeholder_text" : "14. Maak de juiste variabele aan"
                    },
                    {
                      "offset" : 782,
                      "length" : 10,
                      "possible_answer" : "varH",
                      "placeholder_text" : "15. Vul in"
                    },
                    {
                      "offset" : 812,
                      "length" : 10,
                      "possible_answer" : "False",
                      "placeholder_text" : "16. Vul in"
                    },
                    {
                      "offset" : 840,
                      "length" : 10,
                      "possible_answer" : "boolean",
                      "placeholder_text" : "17. Vul in"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "## Opdracht 1: Vul de verschillende velden in met de juiste data.\nvarA = \"string\"\n#Variabele naam: 1. Vul in\n#Variabele waarde: 2. Vul in\n#Variabele type: string\n\nvarB = \"stringString\"\n#Variabele naam: varB\n#Variabele waarde: 3. Vul in\n#Variabele type: 4. Vul in\n\nvarC = 0\n#Variabele naam: 5. Vul in\n#Variabele waarde: 6. Vul in\n#Variabele type: 7. Vul in\n\nvarD = 1\n#Variabele naam: 8. Vul in\n#Variabele waarde: 9. Vul in\n#Variabele type: 10. Vul in\n\n11. Maak de juiste variabele\n#Variabele naam: varE\n#Variabele waarde: 145.1\n#Variabele type: float\n\nvarF = 23.5345\n#Variabele naam: varF\n#Variabele waarde: 12. Vul in\n#Variabele type: 13. Vul in\n\n14. Maak de juiste variabele aan\n#Variabele naam: varG\n#Variabele waarde: True\n#Variabele type: boolean\n\nvarH = False\n#Variabele naam: 15. Vul in\n#Variabele waarde: 16. Vul in\n#Variabele type: 17. Vul in\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "from UserInputHelper import *\nfrom test_helper import run_common_tests, failed, passed\nimport unittest\n\nhelper = Helper()\n\n\nclass varAanmaken(unittest.TestCase):\n    def testAnswer1(self):\n        self.assertEqual(helper.answers[0], \"varA\")\n\n    def testAnswer2(self):\n        self.assertEqual(helper.answers[1], \"\\\"string\\\"\")\n\n    def testAnswer3(self):\n        self.assertEqual(helper.answers[2], \"\\\"stringString\\\"\")\n\n    def testAnswer4(self):\n        self.assertRegex(helper.answers[3], \"string|string\")\n\n    def testAnswer5(self):\n        self.assertEqual(helper.answers[4], \"varC\")\n\n    def testAnswer6(self):\n        self.assertEqual(helper.answers[5], \"0\")\n\n    def testAnswer7(self):\n        self.assertRegex(helper.answers[6], \"integer|Integer|int\")\n\n    def testAnswer8(self):\n        self.assertEqual(helper.answers[7], \"varD\")\n\n    def testAnswer9(self):\n        self.assertEqual(helper.answers[8], \"1\")\n\n    def testAnswer10(self):\n        self.assertRegex(helper.answers[9], \"integer|Integer|int\")\n\n    def testAnswer11(self):\n        self.assertRegex(helper.answers[10], helper.re.expressionToRegex(\"varE = 145.1\"))\n\n    def testAnswer12(self):\n        self.assertEqual(helper.answers[11], \"23.5345\")\n\n    def testAnswer13(self):\n        self.assertRegex(helper.answers[12], \"float|Float\")\n\n    def testAnswer14(self):\n        self.assertRegex(helper.answers[13], helper.re.expressionToRegex(\"varG = True\"))\n\n    def testAnswer15(self):\n        self.assertEqual(helper.answers[14], \"varH\")\n\n    def testAnswer16(self):\n        self.assertEqual(helper.answers[15], \"False\")\n\n    def testAnswer17(self):\n        self.assertRegex(helper.answers[16], \"boolean|Boolean\")\n\nif __name__ == '__main__':\n    suite = unittest.TestLoader().loadTestsFromTestCase(testCaseClass=varAanmaken)\n    res = unittest.TextTestRunner().run(suite)\n    if res.wasSuccessful():\n        passed(\"Congratulations\")\n    else:\n        for el in res.failures:\n            failed(f\"There is an error in \" + str(el[0])[4:12])\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "Het aanroepen en overschrijven van variabelen",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [
                    {
                      "offset" : 143,
                      "length" : 40,
                      "possible_answer" : "x = \"World\"",
                      "placeholder_text" : "1. Overschrijf x. Nieuwe waarde: \"World\""
                    },
                    {
                      "offset" : 286,
                      "length" : 34,
                      "possible_answer" : "y = y + 1",
                      "placeholder_text" : "2. Overschrijf y. Verhoog y met 1."
                    },
                    {
                      "offset" : 430,
                      "length" : 36,
                      "possible_answer" : "z = True",
                      "placeholder_text" : "3. Overschijf z. Nieuwe waarde: True"
                    },
                    {
                      "offset" : 538,
                      "length" : 13,
                      "possible_answer" : "x = 0",
                      "placeholder_text" : "4. Zet x op 0"
                    },
                    {
                      "offset" : 552,
                      "length" : 13,
                      "possible_answer" : "y = 0",
                      "placeholder_text" : "5. Zet y op 0"
                    },
                    {
                      "offset" : 566,
                      "length" : 13,
                      "possible_answer" : "z = 0",
                      "placeholder_text" : "6. Zet z op 0"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "x = \"Hello\"\ny = 43\nz = False\n\n\n## Opdracht 1: Print variabele x, overschrijf deze met een nieuwe string en print variabele x opnieuw.\nprint(x)\n1. Overschrijf x. Nieuwe waarde: \"World\"\nprint(x)\n\n## Opdracht 2: Print variabele y, verhoog deze met 1 en print variabele y opnieuw.\nprint(y)\n2. Overschrijf y. Verhoog y met 1.\nprint(y)\n\n## Opdracht 3: Print variabele z, overschrijf deze met True en print variabele z opnieuw.\nprint(z)\n3. Overschijf z. Nieuwe waarde: True\nprint(z)\n\n## Opdracht 4: Overschrijf alle variabele (x, y en z) met 0.\n4. Zet x op 0\n5. Zet y op 0\n6. Zet z op 0\n\nprint(x)\nprint(y)\nprint(z)\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import unittest\n\nfrom test_helper import run_common_tests, failed, passed\nfrom regex_helper import *\nfrom UserInputHelper import *\n\nhelper = Helper()\n\n\nclass varAanmaken(unittest.TestCase):\n    def testAnswer1(self):\n        self.assertRegex(helper.answers[0], helper.re.expressionToRegex(\"x = \\\"World\\\"\"))\n\n    def testAnswer2(self):\n        self.assertRegex(helper.answers[1], helper.re.expressionToRegex(\"y = y + 1\"))\n\n    def testAnswer3(self):\n        self.assertRegex(helper.answers[2], helper.re.expressionToRegex(\"z = True\"))\n\n    def testAnswer4(self):\n        self.assertRegex(helper.answers[3], helper.re.expressionToRegex(\"x = 0\"))\n\n    def testAnswer5(self):\n        self.assertRegex(helper.answers[4], helper.re.expressionToRegex(\"y = 0\"))\n\n    def testAnswer6(self):\n        self.assertRegex(helper.answers[5], helper.re.expressionToRegex(\"z = 0\"))\n\nif __name__ == '__main__':\n    suite = unittest.TestLoader().loadTestsFromTestCase(testCaseClass=varAanmaken)\n    res = unittest.TextTestRunner().run(suite)\n    if res.wasSuccessful():\n        passed(\"Congratulations\")\n    else:\n        for el in res.failures:\n            failed(f\"There is an error in \" + str(el[0])[4:12])\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        },
        {
          "title" : "Operators",
          "task_list" : [
            {
              "name" : "Wiskundige operatoren",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [
                    {
                      "offset" : 103,
                      "length" : 9,
                      "possible_answer" : "sumA",
                      "placeholder_text" : "1. Vul in"
                    },
                    {
                      "offset" : 168,
                      "length" : 9,
                      "possible_answer" : "9",
                      "placeholder_text" : "2. Vul in"
                    },
                    {
                      "offset" : 195,
                      "length" : 9,
                      "possible_answer" : "integer",
                      "placeholder_text" : "3. Vul in"
                    },
                    {
                      "offset" : 220,
                      "length" : 9,
                      "possible_answer" : "varC",
                      "placeholder_text" : "4. Vul in"
                    },
                    {
                      "offset" : 247,
                      "length" : 9,
                      "possible_answer" : "sumB",
                      "placeholder_text" : "5. Vul in"
                    },
                    {
                      "offset" : 296,
                      "length" : 9,
                      "possible_answer" : "integer",
                      "placeholder_text" : "6. Vul in"
                    },
                    {
                      "offset" : 321,
                      "length" : 9,
                      "possible_answer" : "varA",
                      "placeholder_text" : "7. Vul in"
                    },
                    {
                      "offset" : 348,
                      "length" : 9,
                      "possible_answer" : "subA",
                      "placeholder_text" : "8. Vul in"
                    },
                    {
                      "offset" : 396,
                      "length" : 9,
                      "possible_answer" : "integer",
                      "placeholder_text" : "9. Vul in"
                    },
                    {
                      "offset" : 414,
                      "length" : 10,
                      "possible_answer" : "sumB - varB",
                      "placeholder_text" : "10. Vul in"
                    },
                    {
                      "offset" : 442,
                      "length" : 10,
                      "possible_answer" : "subB",
                      "placeholder_text" : "11. Vul in"
                    },
                    {
                      "offset" : 492,
                      "length" : 10,
                      "possible_answer" : "integer",
                      "placeholder_text" : "13. Vul in"
                    },
                    {
                      "offset" : 519,
                      "length" : 10,
                      "possible_answer" : "varB",
                      "placeholder_text" : "13. Vul in"
                    },
                    {
                      "offset" : 547,
                      "length" : 10,
                      "possible_answer" : "multA",
                      "placeholder_text" : "14. Vul in"
                    },
                    {
                      "offset" : 620,
                      "length" : 10,
                      "possible_answer" : "varD",
                      "placeholder_text" : "15. Vul in"
                    },
                    {
                      "offset" : 739,
                      "length" : 10,
                      "possible_answer" : "powA",
                      "placeholder_text" : "16. Vul in"
                    },
                    {
                      "offset" : 769,
                      "length" : 10,
                      "possible_answer" : "6",
                      "placeholder_text" : "17. Vul in"
                    },
                    {
                      "offset" : 813,
                      "length" : 10,
                      "possible_answer" : "varC ** varD",
                      "placeholder_text" : "18. Vul in"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "varA = 6\nvarB = 1\nvarC = 6\nvarD = 8\n\n## Opdracht 1: Vul de verschillende velden in met de juiste data.\n1. Vul in = varB + varD\n#Variabele naam: sumA\n#Variabele waarde: 2. Vul in\n#Variabele type: 3. Vul in\n\nsumB = varA + 4. Vul in\n#Variabele naam: 5. Vul in\n#Variabele waarde: 12\n#Variabele type: 6. Vul in\n\nsubA = sumA - 7. Vul in\n#Variabele naam: 8. Vul in\n#Variabele waarde: 3\n#Variabele type: 9. Vul in\n\nsubB = 10. Vul in\n#Variabele naam: 11. Vul in\n#Variabele waarde: 11\n#Variabele type: 13. Vul in\n\nmultA = varA * 13. Vul in\n#Variabele naam: 14. Vul in\n#Variabele waarde: 6\n#Variabele type: integer\n\nmultB = varC * 15. Vul in\n#Variabele naam: multB\n#Variabele waarde: 48\n#Variabele type: integer\n\npowA = varA ** varB\n#Variabele naam: 16. Vul in\n#Variabele waarde: 17. Vul in\n#Variabele type: integer\n\npowB = 18. Vul in\n#Variabele naam: powB\n#Variabele waarde: 1679616‬\n#Variabele type: integer\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import unittest\n\nfrom test_helper import run_common_tests, failed, passed\nfrom regex_helper import *\nfrom UserInputHelper import *\n\nhelper = Helper()\n\n\nclass varAanmaken(unittest.TestCase):\n    def testAnswer1(self):\n        self.assertEqual(helper.answers[0], \"sumA\")\n\n    def testAnswer2(self):\n        self.assertEqual(helper.answers[1], \"9\")\n\n    def testAnswer3(self):\n        self.assertRegex(helper.answers[2], \"integer|Integer\")\n\n    def testAnswer4(self):\n        self.assertEqual(helper.answers[3], \"varA|varC\")\n\n    def testAnswer5(self):\n        self.assertEqual(helper.answers[4], \"sumB\")\n\n    def testAnswer6(self):\n        self.assertRegex(helper.answers[2], \"integer|Integer\")\n\n    def testAnswer7(self):\n        self.assertEqual(helper.answers[6], \"varA|varC\")\n\n    def testAnswer8(self):\n        self.assertEqual(helper.answers[7], \"subA\")\n\n    def testAnswer9(self):\n        self.assertRegex(helper.answers[8], \"integer|Integer\")\n\n    def testAnswer10(self):\n        self.assertRegex(helper.answers[9], helper.re.expressionToRegex(\"sumB - varB\"))\n\n    def testAnswer11(self):\n        self.assertEqual(helper.answers[10], \"subB\")\n\n    def testAnswer12(self):\n        self.assertRegex(helper.answers[11], \"integer|Integer\")\n\n    def testAnswer13(self):\n        self.assertEqual(helper.answers[12], \"varB\")\n\n    def testAnswer14(self):\n        self.assertEqual(helper.answers[13], \"multA\")\n\n    def testAnswer15(self):\n        self.assertEqual(helper.answers[14], \"varD\")\n\n    def testAnswer16(self):\n        self.assertEqual(helper.answers[15], \"powA\")\n\n    def testAnswer17(self):\n        self.assertEqual(helper.answers[16], \"6\")\n\n    def testAnswer18(self):\n        self.assertRegex(helper.answers[17], helper.re.expressionToRegex(\"varC **  varD\") +\n                         \"|\" + helper.re.expressionToRegex(\"varA ** varD\"))\n\n\n\nif __name__ == '__main__':\n    suite = unittest.TestLoader().loadTestsFromTestCase(testCaseClass=varAanmaken)\n    res = unittest.TextTestRunner().run(suite)\n    if res.wasSuccessful():\n        passed(\"Congratulations\")\n    else:\n        for el in res.failures:\n            failed(f\"There is an error in \" + str(el[0])[4:12])\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "Logische operatoren",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [
                    {
                      "offset" : 86,
                      "length" : 9,
                      "possible_answer" : "equA",
                      "placeholder_text" : "1. Vul in"
                    },
                    {
                      "offset" : 138,
                      "length" : 9,
                      "possible_answer" : "boolean",
                      "placeholder_text" : "2. Vul in"
                    },
                    {
                      "offset" : 186,
                      "length" : 9,
                      "possible_answer" : "equB",
                      "placeholder_text" : "3. Vul in"
                    },
                    {
                      "offset" : 215,
                      "length" : 9,
                      "possible_answer" : "True",
                      "placeholder_text" : "4. Vul in"
                    },
                    {
                      "offset" : 259,
                      "length" : 9,
                      "possible_answer" : "uneqA",
                      "placeholder_text" : "5. Vul in"
                    },
                    {
                      "offset" : 326,
                      "length" : 9,
                      "possible_answer" : "True",
                      "placeholder_text" : "6. Vul in"
                    },
                    {
                      "offset" : 378,
                      "length" : 9,
                      "possible_answer" : "varD",
                      "placeholder_text" : "7. Vul in"
                    },
                    {
                      "offset" : 453,
                      "length" : 9,
                      "possible_answer" : "boolean",
                      "placeholder_text" : "8. Vul in"
                    },
                    {
                      "offset" : 472,
                      "length" : 9,
                      "possible_answer" : "largerA",
                      "placeholder_text" : "9. Vul in"
                    },
                    {
                      "offset" : 540,
                      "length" : 10,
                      "possible_answer" : "False",
                      "placeholder_text" : "10. Vul in"
                    },
                    {
                      "offset" : 577,
                      "length" : 10,
                      "possible_answer" : "largerB",
                      "placeholder_text" : "11. Vul in"
                    },
                    {
                      "offset" : 597,
                      "length" : 10,
                      "possible_answer" : "varA",
                      "placeholder_text" : "12. Vul in"
                    },
                    {
                      "offset" : 764,
                      "length" : 10,
                      "possible_answer" : "True",
                      "placeholder_text" : "13. Vul in"
                    },
                    {
                      "offset" : 874,
                      "length" : 10,
                      "possible_answer" : "True",
                      "placeholder_text" : "14. Vul in"
                    },
                    {
                      "offset" : 987,
                      "length" : 10,
                      "possible_answer" : "True",
                      "placeholder_text" : "15. Vul in"
                    },
                    {
                      "offset" : 1092,
                      "length" : 10,
                      "possible_answer" : "False",
                      "placeholder_text" : "16. Vul in"
                    },
                    {
                      "offset" : 1137,
                      "length" : 10,
                      "possible_answer" : "smallerequA",
                      "placeholder_text" : "17. Vul in"
                    },
                    {
                      "offset" : 1211,
                      "length" : 10,
                      "possible_answer" : "True",
                      "placeholder_text" : "18. Vul in"
                    },
                    {
                      "offset" : 1323,
                      "length" : 10,
                      "possible_answer" : "False",
                      "placeholder_text" : "19. Vul in"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "varA = 4\nvarB = 9\nvarC = 4.2\nvarD = 4.2\n\n#Task 1\nequA = varA == varB\n#Variabele naam: 1. Vul in\n#Variabele waarde: False\n#Variabele type: 2. Vul in\n\nequB = varC == varD\n#Variabele naam: 3. Vul in\n#Variabele waarde: 4. Vul in\n#Variabele type: boolean\n\n#Task 2\n5. Vul in = varA != varB\n#Variabele naam: uneqA\n#Variabele waarde: 6. Vul in\n#Variabele type: boolean\n\nuneqB = varC != 7. Vul in\n#Variabele naam: uneqB\n#Variabele waarde: False\n#Variabele type: 8. Vul in\n\n#Task 3\n9. Vul in = varA > varC\n#Variabele naam: largerA\n#Variabele waarde: 10. Vul in\n#Variabele type: boolean\n\n11. Vul in = varC > 12. Vul in\n#Variabele naam: largerB\n#Variabele waarde: True\n#Variabele type: boolean\n\n#Task 4\nlargerequA = varD >= varC\n#Variabele naam: largerequA\n#Variabele waarde: 13. Vul in\n#Variabele type: boolean\n\nlargerequB = varB >= varD\n#Variabele naam: largerequB\n#Variabele waarde: 14. Vul in\n#Variabele type: boolean\n\n#Task 5\nsmallerA = varA < varC\n#Variabele naam: smallerA\n#Variabele waarde: 15. Vul in\n#Variabele type: boolean\n\nsmallerB = varB < varD\n#Variabele naam: smallerC\n#Variabele waarde: 16. Vul in\n#Variabele type: boolean\n\n#Task 6\n17. Vul in = varA <= varC\n#Variabele naam: smallerequA\n#Variabele waarde: 18. Vul in\n#Variabele type: boolean\n\nsmallerequB = varB <= varD\n#Variabele naam: smallerequB\n#Variabele waarde: 19. Vul in\n#Variabele type: boolean\n\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import unittest\n\nfrom test_helper import run_common_tests, failed, passed\nfrom regex_helper import *\nfrom UserInputHelper import *\n\nhelper = Helper()\n\n\nclass varAanmaken(unittest.TestCase):\n    def testAnswer1(self):\n        self.assertEqual(helper.answers[0], \"equA\")\n\n    def testAnswer2(self):\n        self.assertRegex(helper.answers[1], \"boolean|Boolean\")\n\n    def testAnswer3(self):\n        self.assertEqual(helper.answers[2], \"equB\")\n\n    def testAnswer4(self):\n        self.assertEqual(helper.answers[3], \"True\")\n\n    def testAnswer5(self):\n        self.assertEqual(helper.answers[4], \"uneqA\")\n\n    def testAnswer6(self):\n        self.assertEqual(helper.answers[5], \"True\")\n\n    def testAnswer7(self):\n        self.assertEqual(helper.answers[6], \"varD\")\n\n    def testAnswer8(self):\n        self.assertRegex(helper.answers[7], \"boolean|Boolean\")\n\n    def testAnswer9(self):\n        self.assertEqual(helper.answers[8], \"largerA\")\n\n    def testAnswer10(self):\n        self.assertEqual(helper.answers[9], \"False\")\n\n    def testAnswer11(self):\n        self.assertEqual(helper.answers[10], \"largerB\")\n\n    def testAnswer12(self):\n        self.assertEqual(helper.answers[11], \"varA\")\n\n    def testAnswer13(self):\n        self.assertEqual(helper.answers[12], \"True\")\n\n    def testAnswer14(self):\n        self.assertEqual(helper.answers[13], \"True\")\n\n    def testAnswer15(self):\n        self.assertEqual(helper.answers[14], \"True\")\n\n    def testAnswer16(self):\n        self.assertEqual(helper.answers[15], \"False\")\n\n    def testAnswer17(self):\n        self.assertEqual(helper.answers[16], \"smallerequA\")\n\n    def testAnswer18(self):\n        self.assertEqual(helper.answers[17], \"True\")\n\n    def testAnswer19(self):\n        self.assertEqual(helper.answers[18], \"False\")\n\n\n\nif __name__ == '__main__':\n    suite = unittest.TestLoader().loadTestsFromTestCase(testCaseClass=varAanmaken)\n    res = unittest.TextTestRunner().run(suite)\n    if res.wasSuccessful():\n        passed(\"Congratulations\")\n    else:\n        for el in res.failures:\n            failed(f\"There is an error in \" + str(el[0])[4:12])\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "Booleaanse operatoren",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [
                    {
                      "offset" : 64,
                      "length" : 9,
                      "possible_answer" : "andA",
                      "placeholder_text" : "1. Vul in"
                    },
                    {
                      "offset" : 93,
                      "length" : 9,
                      "possible_answer" : "True",
                      "placeholder_text" : "2. Vul in"
                    },
                    {
                      "offset" : 191,
                      "length" : 9,
                      "possible_answer" : "False",
                      "placeholder_text" : "3. Vul in"
                    },
                    {
                      "offset" : 218,
                      "length" : 9,
                      "possible_answer" : "boolean",
                      "placeholder_text" : "4. Vul in"
                    },
                    {
                      "offset" : 236,
                      "length" : 9,
                      "possible_answer" : "varB",
                      "placeholder_text" : "5. Vul in"
                    },
                    {
                      "offset" : 272,
                      "length" : 9,
                      "possible_answer" : "andC",
                      "placeholder_text" : "6. Vul in"
                    },
                    {
                      "offset" : 395,
                      "length" : 9,
                      "possible_answer" : "False",
                      "placeholder_text" : "7. Vul in"
                    },
                    {
                      "offset" : 467,
                      "length" : 9,
                      "possible_answer" : "orA",
                      "placeholder_text" : "8. Vul in"
                    },
                    {
                      "offset" : 496,
                      "length" : 9,
                      "possible_answer" : "True",
                      "placeholder_text" : "9. Vul in"
                    },
                    {
                      "offset" : 591,
                      "length" : 10,
                      "possible_answer" : "True",
                      "placeholder_text" : "10. Vul in"
                    },
                    {
                      "offset" : 687,
                      "length" : 10,
                      "possible_answer" : "True",
                      "placeholder_text" : "11. Vul in"
                    },
                    {
                      "offset" : 738,
                      "length" : 10,
                      "possible_answer" : "varB",
                      "placeholder_text" : "12. Vul in"
                    },
                    {
                      "offset" : 812,
                      "length" : 10,
                      "possible_answer" : "boolean",
                      "placeholder_text" : "13. Vul in"
                    },
                    {
                      "offset" : 824,
                      "length" : 10,
                      "possible_answer" : "notA",
                      "placeholder_text" : "14. Vul in"
                    },
                    {
                      "offset" : 887,
                      "length" : 10,
                      "possible_answer" : "False",
                      "placeholder_text" : "15. Vul in"
                    },
                    {
                      "offset" : 924,
                      "length" : 10,
                      "possible_answer" : "notB",
                      "placeholder_text" : "16. Vul in"
                    },
                    {
                      "offset" : 987,
                      "length" : 10,
                      "possible_answer" : "True",
                      "placeholder_text" : "17. Vul in"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "varA = True\nvarB = False\n\nandA = varA and varA\n#Variabele naam: 1. Vul in\n#Variabele waarde: 2. Vul in\n#Variabele type: boolean\n\nandB = varA and varB\n#Variabele naam: andB\n#Variabele waarde: 3. Vul in\n#Variabele type: 4. Vul in\n\nandC = 5. Vul in and varA\n#Variabele naam: 6. Vul in\n#Variabele waarde: False\n#Variabele type: boolean\n\nandD = varB and varB\n#Variabele naam: andD\n#Variabele waarde: 7. Vul in\n#Variabele type: boolean\n\norA = varA or varA\n#Variabele naam: 8. Vul in\n#Variabele waarde: 9. Vul in\n#Variabele type: boolean\n\norB = varA or varB\n#Variabele naam: orB\n#Variabele waarde: 10. Vul in\n#Variabele type: boolean\n\norC = varB or varA\n#Variabele naam: orC\n#Variabele waarde: 11. Vul in\n#Variabele type: boolean\n\norD = varB or 12. Vul in\n#Variabele naam: orD\n#Variabele waarde: False\n#Variabele type: 13. Vul in\n\n14. Vul in = not varA\n#Variabele naam: notA\n#Variabele waarde: 15. Vul in\n#Variabele type: boolean\n\n16. Vul in = not varB\n#Variabele naam: notB\n#Variabele waarde: 17. Vul in\n#Variabele type: boolean\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import unittest\n\nfrom test_helper import run_common_tests, failed, passed\nfrom regex_helper import *\nfrom UserInputHelper import *\n\nhelper = Helper()\n\n\nclass varAanmaken(unittest.TestCase):\n    def testAnswer1(self):\n        self.assertEqual(helper.answers[0], \"andA\")\n\n    def testAnswer2(self):\n        self.assertEqual(helper.answers[1], \"True\")\n\n    def testAnswer3(self):\n        self.assertEqual(helper.answers[2], \"False\")\n\n    def testAnswer4(self):\n        self.assertRegex(helper.answers[3], \"boolean|Boolean\")\n\n    def testAnswer5(self):\n        self.assertEqual(helper.answers[4], \"varB\")\n\n    def testAnswer6(self):\n        self.assertEqual(helper.answers[5], \"andC\")\n\n    def testAnswer7(self):\n        self.assertEqual(helper.answers[6], \"False\")\n\n    def testAnswer8(self):\n        self.assertEqual(helper.answers[7], \"orA\")\n\n    def testAnswer9(self):\n        self.assertEqual(helper.answers[8], \"True\")\n\n    def testAnswer10(self):\n        self.assertEqual(helper.answers[9], \"True\")\n\n    def testAnswer11(self):\n        self.assertEqual(helper.answers[10], \"True\")\n\n    def testAnswer12(self):\n        self.assertEqual(helper.answers[11], \"varB\")\n\n    def testAnswer13(self):\n        self.assertRegex(helper.answers[12], \"boolean|Boolean\")\n\n    def testAnswer14(self):\n        self.assertEqual(helper.answers[13], \"notA\")\n\n    def testAnswer15(self):\n        self.assertEqual(helper.answers[14], \"False\")\n\n    def testAnswer16(self):\n        self.assertEqual(helper.answers[15], \"notB\")\n\n    def testAnswer17(self):\n        self.assertEqual(helper.answers[16], \"True\")\n\nif __name__ == '__main__':\n    suite = unittest.TestLoader().loadTestsFromTestCase(testCaseClass=varAanmaken)\n    res = unittest.TextTestRunner().run(suite)\n    if res.wasSuccessful():\n        passed(\"Congratulations\")\n    else:\n        for el in res.failures:\n            failed(f\"There is an error in \" + str(el[0])[4:12])\n\n\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "Expressies",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [
                    {
                      "offset" : 53,
                      "length" : 9,
                      "possible_answer" : "40",
                      "placeholder_text" : "1. Vul in"
                    },
                    {
                      "offset" : 88,
                      "length" : 9,
                      "possible_answer" : "2.5",
                      "placeholder_text" : "2. Vul in"
                    },
                    {
                      "offset" : 127,
                      "length" : 9,
                      "possible_answer" : "Float",
                      "placeholder_text" : "3. Vul in"
                    },
                    {
                      "offset" : 152,
                      "length" : 27,
                      "possible_answer" : "x * 5 + y / 2",
                      "placeholder_text" : "4. Maak de juiste expressie"
                    },
                    {
                      "offset" : 321,
                      "length" : 27,
                      "possible_answer" : "expressionB >= expressionA",
                      "placeholder_text" : "5. Maak de juiste expressie"
                    },
                    {
                      "offset" : 455,
                      "length" : 27,
                      "possible_answer" : "expressionC or expressionA > 40",
                      "placeholder_text" : "6. Maak de juiste expressie"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "x = 4\ny = 6\n\nexpressionA = 8 * 5 + 5 / 2\n#Stap 1:    1. Vul in + 5 / 2\n#Stap 2:    40 + 2. Vul in\n#Stap 3:    42.5\n#Type  :    3. Vul in\n\nexpressionB = 4. Maak de juiste expressie\n#Stap 1:    4 * 5 + y / 2\n#Stap 2:    20 + y / 2\n#Stap 3:    20 + 6 / 2\n#Stap 4:    20 + 3\n#Stap 5:    23\n#Type  :    Integer\n\nexpressionC = 5. Maak de juiste expressie\n#Stap 1:    23 >= expressionA\n#Stap 2:    23 >= 42.5\n#Stap 3:    False\n#Type  :    Boolean\n\nexpressionD = 6. Maak de juiste expressie\n#Stap 1:    False or expressionA > 40\n#Stap 2:    False or 42.5 > 40\n#Stap 3:    False or True\n#Stap 4:    True\n#Type  :    Boolean\n\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import unittest\n\nfrom test_helper import run_common_tests, failed, passed\nfrom regex_helper import *\nfrom UserInputHelper import *\n\nhelper = Helper()\n\n\nclass varAanmaken(unittest.TestCase):\n    def testAnswer1(self):\n        self.assertEqual(helper.answers[0], \"40\")\n\n    def testAnswer2(self):\n        self.assertEqual(helper.answers[1], \"2.5\")\n\n    def testAnswer3(self):\n        self.assertRegex(helper.answers[2], \"Float|float\")\n\n    def testAnswer4(self):\n        self.assertRegex(helper.answers[3], helper.re.expressionToRegex(\"x * 5 + y / 2\"))\n\n    def testAnswer5(self):\n        self.assertRegex(helper.answers[4], helper.re.expressionToRegex(\"expressionB >= expressionA\"))\n\n    def testAnswer6(self):\n        self.assertRegex(helper.answers[5], helper.re.expressionToRegex(\"expressionC or expressionA > 40\"))\n\nif __name__ == '__main__':\n    suite = unittest.TestLoader().loadTestsFromTestCase(testCaseClass=varAanmaken)\n    res = unittest.TextTestRunner().run(suite)\n    if res.wasSuccessful():\n        passed(\"Congratulations\")\n    else:\n        for el in res.failures:\n            failed(f\"There is an error in \" + str(el[0])[4:12])\n\n\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        }
      ],
      "type" : "section"
    },
    {
      "title" : "Week 3 - Branching",
      "items" : [
        {
          "title" : "If",
          "task_list" : [
            {
              "name" : "Programma 1",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [
                    {
                      "offset" : 17,
                      "length" : 9,
                      "possible_answer" : "if",
                      "placeholder_text" : "1. Vul in"
                    },
                    {
                      "offset" : 40,
                      "length" : 18,
                      "possible_answer" : "Ja",
                      "placeholder_text" : "2. Vul in (Ja/Nee)"
                    },
                    {
                      "offset" : 83,
                      "length" : 35,
                      "possible_answer" : "x",
                      "placeholder_text" : "3. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 130,
                      "length" : 9,
                      "possible_answer" : "x == 5",
                      "placeholder_text" : "4. Vul in"
                    },
                    {
                      "offset" : 160,
                      "length" : 9,
                      "possible_answer" : "True",
                      "placeholder_text" : "5. Vul in"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "x = 5\n\n#Keyword: 1. Vul in\n#Uitgevoerd: 2. Vul in (Ja/Nee)\n#Conditie variabele(n): 3. Vul in (Gescheiden door komma's)\n#Conditie: 4. Vul in\n#Conditie uitkomst: 5. Vul in\nif(x == 5):\n    print(\"Stap 1.\")\nprint(\"Stap 2.\")\nprint(\"Einde programma.\")\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import unittest\n\nfrom test_helper import run_common_tests, failed, passed\nfrom regex_helper import *\nfrom UserInputHelper import *\n\nhelper = Helper()\n\n\nclass varAanmaken(unittest.TestCase):\n    def testAnswer1(self):\n        self.assertRegex(helper.answers[0], \"if\")\n\n    def testAnswer2(self):\n        self.assertRegex(helper.answers[1], \"Ja|ja\")\n\n    def testAnswer3(self):\n        self.assertEqual(helper.answers[2], \"x\")\n\n    def testAnswer4(self):\n        self.assertRegex(helper.answers[3], helper.re.expressionToRegex(\"x == 5\"))\n\n    def testAnswer5(self):\n        self.assertEqual(helper.answers[4], \"True\")\n\nif __name__ == '__main__':\n    suite = unittest.TestLoader().loadTestsFromTestCase(testCaseClass=varAanmaken)\n    res = unittest.TextTestRunner().run(suite)\n    if res.wasSuccessful():\n        passed(\"Congratulations\")\n    else:\n        for el in res.failures:\n            failed(f\"There is an error in \" + str(el[0])[4:12])\n\n\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "Programma 2",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [
                    {
                      "offset" : 22,
                      "length" : 9,
                      "possible_answer" : "if",
                      "placeholder_text" : "1. Vul in"
                    },
                    {
                      "offset" : 45,
                      "length" : 18,
                      "possible_answer" : "Ja",
                      "placeholder_text" : "2. Vul in (Ja/Nee)"
                    },
                    {
                      "offset" : 88,
                      "length" : 35,
                      "possible_answer" : "x , y",
                      "placeholder_text" : "3. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 135,
                      "length" : 9,
                      "possible_answer" : "x * y > 14",
                      "placeholder_text" : "4. Vul in"
                    },
                    {
                      "offset" : 165,
                      "length" : 9,
                      "possible_answer" : "False",
                      "placeholder_text" : "5. Vul in"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "x = 5\ny = 2\n#Keyword: 1. Vul in\n#Uitgevoerd: 2. Vul in (Ja/Nee)\n#Conditie variabele(n): 3. Vul in (Gescheiden door komma's)\n#Conditie: 4. Vul in\n#Conditie uitkomst: 5. Vul in\nif(x * y > 14):\n    print(\"Stap 1.\")\nprint(\"Stap 2.\")\nprint(\"Einde programma.\")\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import unittest\n\nfrom test_helper import run_common_tests, failed, passed\nfrom regex_helper import *\nfrom UserInputHelper import *\n\nhelper = Helper()\n\n\nclass varAanmaken(unittest.TestCase):\n    def testAnswer1(self):\n        self.assertEqual(helper.answers[0], \"if\")\n\n    def testAnswer2(self):\n        self.assertRegex(helper.answers[1], \"Ja|ja\")\n\n    def testAnswer3(self):\n        self.assertRegex(helper.answers[2], helper.re.argsRegex(\"x\", \"y\"))\n\n    def testAnswer4(self):\n        self.assertRegex(helper.answers[3], helper.re.expressionToRegex(\"x * y > 14\"))\n\n    def testAnswer5(self):\n        self.assertEqual(helper.answers[4], \"False\")\n\nif __name__ == '__main__':\n    suite = unittest.TestLoader().loadTestsFromTestCase(testCaseClass=varAanmaken)\n    res = unittest.TextTestRunner().run(suite)\n    if res.wasSuccessful():\n        passed(\"Congratulations\")\n    else:\n        for el in res.failures:\n            failed(f\"There is an error in \" + str(el[0])[4:12])\n\n\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "Programma 3",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [
                    {
                      "offset" : 23,
                      "length" : 9,
                      "possible_answer" : "if",
                      "placeholder_text" : "1. Vul in"
                    },
                    {
                      "offset" : 46,
                      "length" : 18,
                      "possible_answer" : "Ja",
                      "placeholder_text" : "2. Vul in (Ja/Nee)"
                    },
                    {
                      "offset" : 89,
                      "length" : 35,
                      "possible_answer" : "x",
                      "placeholder_text" : "3. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 136,
                      "length" : 9,
                      "possible_answer" : "x > 0",
                      "placeholder_text" : "4. Vul in"
                    },
                    {
                      "offset" : 166,
                      "length" : 9,
                      "possible_answer" : "True",
                      "placeholder_text" : "5. Vul in"
                    },
                    {
                      "offset" : 222,
                      "length" : 9,
                      "possible_answer" : "if",
                      "placeholder_text" : "6. Vul in"
                    },
                    {
                      "offset" : 249,
                      "length" : 18,
                      "possible_answer" : "Ja",
                      "placeholder_text" : "7. Vul in (Ja/Nee)"
                    },
                    {
                      "offset" : 296,
                      "length" : 35,
                      "possible_answer" : "x, y",
                      "placeholder_text" : "8. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 347,
                      "length" : 9,
                      "possible_answer" : "y / x >= 4",
                      "placeholder_text" : "9. Vul in"
                    },
                    {
                      "offset" : 381,
                      "length" : 10,
                      "possible_answer" : "True",
                      "placeholder_text" : "10. Vul in"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "x = 5\ny = 21\n#Keyword: 1. Vul in\n#Uitgevoerd: 2. Vul in (Ja/Nee)\n#Conditie variabele(n): 3. Vul in (Gescheiden door komma's)\n#Conditie: 4. Vul in\n#Conditie uitkomst: 5. Vul in\nif(x > 0):\n    print(\"Stap 1.\")\n    #Keyword: 6. Vul in\n    #Uitgevoerd: 7. Vul in (Ja/Nee)\n    #Conditie variabele(n): 8. Vul in (Gescheiden door komma's)\n    #Conditie: 9. Vul in\n    #Conditie uitkomst: 10. Vul in\n    if(y / x >= 4):\n        print(\"Stap 2.\")\nprint(\"Stap 4.\")\nprint(\"Einde programma.\")\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import unittest\n\nfrom test_helper import run_common_tests, failed, passed\nfrom regex_helper import *\nfrom UserInputHelper import *\n\nhelper = Helper()\n\n\nclass varAanmaken(unittest.TestCase):\n    def testAnswer1(self):\n        self.assertEqual(helper.answers[0], \"if\")\n\n    def testAnswer2(self):\n        self.assertRegex(helper.answers[1], \"Ja|ja\")\n\n    def testAnswer3(self):\n        self.assertEqual(helper.answers[2], \"x\")\n\n    def testAnswer4(self):\n        self.assertRegex(helper.answers[3], helper.re.expressionToRegex(\"x > 0\"))\n\n    def testAnswer5(self):\n        self.assertEqual(helper.answers[4], \"True\")\n\n    def testAnswer6(self):\n        self.assertEqual(helper.answers[5], \"if\")\n\n    def testAnswer7(self):\n        self.assertRegex(helper.answers[6], \"Ja|ja\")\n\n    def testAnswer8(self):\n        self.assertRegex(helper.answers[7], helper.re.argsRegex(\"x\", \"y\"))\n\n    def testAnswer9(self):\n        self.assertRegex(helper.answers[8], helper.re.expressionToRegex(\"y / x >= 4\"))\n\n    def testAnswer10(self):\n        self.assertEqual(helper.answers[9], \"True\")\n\nif __name__ == '__main__':\n    suite = unittest.TestLoader().loadTestsFromTestCase(testCaseClass=varAanmaken)\n    res = unittest.TextTestRunner().run(suite)\n    if res.wasSuccessful():\n        passed(\"Congratulations\")\n    else:\n        for el in res.failures:\n            failed(f\"There is an error in \" + str(el[0])[4:12])\n\n\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "Programma 4",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [
                    {
                      "offset" : 23,
                      "length" : 9,
                      "possible_answer" : "if",
                      "placeholder_text" : "1. Vul in"
                    },
                    {
                      "offset" : 46,
                      "length" : 18,
                      "possible_answer" : "Ja",
                      "placeholder_text" : "2. Vul in (Ja/Nee)"
                    },
                    {
                      "offset" : 89,
                      "length" : 35,
                      "possible_answer" : "x",
                      "placeholder_text" : "3. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 136,
                      "length" : 9,
                      "possible_answer" : "x < 0",
                      "placeholder_text" : "4. Vul in"
                    },
                    {
                      "offset" : 166,
                      "length" : 9,
                      "possible_answer" : "False",
                      "placeholder_text" : "5. Vul in"
                    },
                    {
                      "offset" : 222,
                      "length" : 9,
                      "possible_answer" : "if",
                      "placeholder_text" : "6. Vul in"
                    },
                    {
                      "offset" : 249,
                      "length" : 18,
                      "possible_answer" : "Nee",
                      "placeholder_text" : "7. Vul in (Ja/Nee)"
                    },
                    {
                      "offset" : 296,
                      "length" : 35,
                      "possible_answer" : "x, y",
                      "placeholder_text" : "8. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 347,
                      "length" : 9,
                      "possible_answer" : "y ** x <= 4000000",
                      "placeholder_text" : "9. Vul in"
                    },
                    {
                      "offset" : 381,
                      "length" : 9,
                      "possible_answer" : "True",
                      "placeholder_text" : "8. Vul in"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "x = 5\ny = 21\n#Keyword: 1. Vul in\n#Uitgevoerd: 2. Vul in (Ja/Nee)\n#Conditie variabele(n): 3. Vul in (Gescheiden door komma's)\n#Conditie: 4. Vul in\n#Conditie uitkomst: 5. Vul in\nif(x < 0):\n    print(\"Stap 1.\")\n    #Keyword: 6. Vul in\n    #Uitgevoerd: 7. Vul in (Ja/Nee)\n    #Conditie variabele(n): 8. Vul in (Gescheiden door komma's)\n    #Conditie: 9. Vul in\n    #Conditie uitkomst: 8. Vul in\n    if(y ** x >= 4000000):\n        print(\"Stap 2.\")\nprint(\"Stap 3.\")\nprint(\"Einde programma.\")\n\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import unittest\n\nfrom test_helper import run_common_tests, failed, passed\nfrom regex_helper import *\nfrom UserInputHelper import *\n\nhelper = Helper()\n\n\nclass varAanmaken(unittest.TestCase):\n    def testAnswer1(self):\n        self.assertEqual(helper.answers[0], \"if\")\n\n    def testAnswer2(self):\n        self.assertRegex(helper.answers[1], \"Ja|ja\")\n\n    def testAnswer3(self):\n        self.assertEqual(helper.answers[2], \"x\")\n\n    def testAnswer4(self):\n        self.assertRegex(helper.answers[3], helper.re.expressionToRegex(\"x < 0\"))\n\n    def testAnswer5(self):\n        self.assertEqual(helper.answers[4], \"False\")\n\n    def testAnswer6(self):\n        self.assertEqual(helper.answers[5], \"if\")\n\n    def testAnswer7(self):\n        self.assertRegex(helper.answers[6], \"Nee|nee\")\n\n    def testAnswer8(self):\n        self.assertRegex(helper.answers[7], helper.re.argsRegex(\"x\", \"y\"))\n\n    def testAnswer9(self):\n        self.assertRegex(helper.answers[8], helper.re.expressionToRegex(\"y ** x >= 4000000\"))\n\n    def testAnswer10(self):\n        self.assertEqual(helper.answers[9], \"True\")\n\nif __name__ == '__main__':\n    suite = unittest.TestLoader().loadTestsFromTestCase(testCaseClass=varAanmaken)\n    res = unittest.TextTestRunner().run(suite)\n    if res.wasSuccessful():\n        passed(\"Congratulations\")\n    else:\n        for el in res.failures:\n            failed(f\"There is an error in \" + str(el[0])[4:12])\n\n\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        },
        {
          "title" : "If",
          "task_list" : [
            {
              "name" : "Programma 1",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [
                    {
                      "offset" : 17,
                      "length" : 9,
                      "possible_answer" : "if",
                      "placeholder_text" : "1. Vul in"
                    },
                    {
                      "offset" : 40,
                      "length" : 18,
                      "possible_answer" : "Ja",
                      "placeholder_text" : "2. Vul in (Ja/Nee)"
                    },
                    {
                      "offset" : 83,
                      "length" : 35,
                      "possible_answer" : "x",
                      "placeholder_text" : "3. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 130,
                      "length" : 9,
                      "possible_answer" : "x == 5",
                      "placeholder_text" : "4. Vul in"
                    },
                    {
                      "offset" : 160,
                      "length" : 9,
                      "possible_answer" : "True",
                      "placeholder_text" : "5. Vul in"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "x = 5\n\n#Keyword: 1. Vul in\n#Uitgevoerd: 2. Vul in (Ja/Nee)\n#Conditie variabele(n): 3. Vul in (Gescheiden door komma's)\n#Conditie: 4. Vul in\n#Conditie uitkomst: 5. Vul in\nif(x == 5):\n    print(\"Stap 1.\")\nprint(\"Stap 2.\")\nprint(\"Einde programma.\")\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import unittest\n\nfrom test_helper import run_common_tests, failed, passed\nfrom regex_helper import *\nfrom UserInputHelper import *\n\nhelper = Helper()\n\n\nclass varAanmaken(unittest.TestCase):\n    def testAnswer1(self):\n        self.assertRegex(helper.answers[0], \"if\")\n\n    def testAnswer2(self):\n        self.assertRegex(helper.answers[1], \"Ja|ja\")\n\n    def testAnswer3(self):\n        self.assertEqual(helper.answers[2], \"x\")\n\n    def testAnswer4(self):\n        self.assertRegex(helper.answers[3], helper.re.expressionToRegex(\"x == 5\"))\n\n    def testAnswer5(self):\n        self.assertEqual(helper.answers[4], \"True\")\n\nif __name__ == '__main__':\n    suite = unittest.TestLoader().loadTestsFromTestCase(testCaseClass=varAanmaken)\n    res = unittest.TextTestRunner().run(suite)\n    if res.wasSuccessful():\n        passed(\"Congratulations\")\n    else:\n        for el in res.failures:\n            failed(f\"There is an error in \" + str(el[0])[4:12])\n\n\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "Programma 2",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [
                    {
                      "offset" : 22,
                      "length" : 9,
                      "possible_answer" : "if",
                      "placeholder_text" : "1. Vul in"
                    },
                    {
                      "offset" : 45,
                      "length" : 18,
                      "possible_answer" : "Ja",
                      "placeholder_text" : "2. Vul in (Ja/Nee)"
                    },
                    {
                      "offset" : 88,
                      "length" : 35,
                      "possible_answer" : "x , y",
                      "placeholder_text" : "3. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 135,
                      "length" : 9,
                      "possible_answer" : "x * y > 14",
                      "placeholder_text" : "4. Vul in"
                    },
                    {
                      "offset" : 165,
                      "length" : 9,
                      "possible_answer" : "False",
                      "placeholder_text" : "5. Vul in"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "x = 5\ny = 2\n#Keyword: 1. Vul in\n#Uitgevoerd: 2. Vul in (Ja/Nee)\n#Conditie variabele(n): 3. Vul in (Gescheiden door komma's)\n#Conditie: 4. Vul in\n#Conditie uitkomst: 5. Vul in\nif(x * y > 14):\n    print(\"Stap 1.\")\nprint(\"Stap 2.\")\nprint(\"Einde programma.\")\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import unittest\n\nfrom test_helper import run_common_tests, failed, passed\nfrom regex_helper import *\nfrom UserInputHelper import *\n\nhelper = Helper()\n\n\nclass varAanmaken(unittest.TestCase):\n    def testAnswer1(self):\n        self.assertEqual(helper.answers[0], \"if\")\n\n    def testAnswer2(self):\n        self.assertRegex(helper.answers[1], \"Ja|ja\")\n\n    def testAnswer3(self):\n        self.assertRegex(helper.answers[2], helper.re.argsRegex(\"x\", \"y\"))\n\n    def testAnswer4(self):\n        self.assertRegex(helper.answers[3], helper.re.expressionToRegex(\"x * y > 14\"))\n\n    def testAnswer5(self):\n        self.assertEqual(helper.answers[4], \"False\")\n\nif __name__ == '__main__':\n    suite = unittest.TestLoader().loadTestsFromTestCase(testCaseClass=varAanmaken)\n    res = unittest.TextTestRunner().run(suite)\n    if res.wasSuccessful():\n        passed(\"Congratulations\")\n    else:\n        for el in res.failures:\n            failed(f\"There is an error in \" + str(el[0])[4:12])\n\n\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "Programma 3",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [
                    {
                      "offset" : 23,
                      "length" : 9,
                      "possible_answer" : "if",
                      "placeholder_text" : "1. Vul in"
                    },
                    {
                      "offset" : 46,
                      "length" : 18,
                      "possible_answer" : "Ja",
                      "placeholder_text" : "2. Vul in (Ja/Nee)"
                    },
                    {
                      "offset" : 89,
                      "length" : 35,
                      "possible_answer" : "x",
                      "placeholder_text" : "3. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 136,
                      "length" : 9,
                      "possible_answer" : "x > 0",
                      "placeholder_text" : "4. Vul in"
                    },
                    {
                      "offset" : 166,
                      "length" : 9,
                      "possible_answer" : "True",
                      "placeholder_text" : "5. Vul in"
                    },
                    {
                      "offset" : 222,
                      "length" : 9,
                      "possible_answer" : "if",
                      "placeholder_text" : "6. Vul in"
                    },
                    {
                      "offset" : 249,
                      "length" : 18,
                      "possible_answer" : "Ja",
                      "placeholder_text" : "7. Vul in (Ja/Nee)"
                    },
                    {
                      "offset" : 296,
                      "length" : 35,
                      "possible_answer" : "x, y",
                      "placeholder_text" : "8. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 347,
                      "length" : 9,
                      "possible_answer" : "y / x >= 4",
                      "placeholder_text" : "9. Vul in"
                    },
                    {
                      "offset" : 381,
                      "length" : 10,
                      "possible_answer" : "True",
                      "placeholder_text" : "10. Vul in"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "x = 5\ny = 21\n#Keyword: 1. Vul in\n#Uitgevoerd: 2. Vul in (Ja/Nee)\n#Conditie variabele(n): 3. Vul in (Gescheiden door komma's)\n#Conditie: 4. Vul in\n#Conditie uitkomst: 5. Vul in\nif(x > 0):\n    print(\"Stap 1.\")\n    #Keyword: 6. Vul in\n    #Uitgevoerd: 7. Vul in (Ja/Nee)\n    #Conditie variabele(n): 8. Vul in (Gescheiden door komma's)\n    #Conditie: 9. Vul in\n    #Conditie uitkomst: 10. Vul in\n    if(y / x >= 4):\n        print(\"Stap 2.\")\nprint(\"Stap 4.\")\nprint(\"Einde programma.\")\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import unittest\n\nfrom test_helper import run_common_tests, failed, passed\nfrom regex_helper import *\nfrom UserInputHelper import *\n\nhelper = Helper()\n\n\nclass varAanmaken(unittest.TestCase):\n    def testAnswer1(self):\n        self.assertEqual(helper.answers[0], \"if\")\n\n    def testAnswer2(self):\n        self.assertRegex(helper.answers[1], \"Ja|ja\")\n\n    def testAnswer3(self):\n        self.assertEqual(helper.answers[2], \"x\")\n\n    def testAnswer4(self):\n        self.assertRegex(helper.answers[3], helper.re.expressionToRegex(\"x > 0\"))\n\n    def testAnswer5(self):\n        self.assertEqual(helper.answers[4], \"True\")\n\n    def testAnswer6(self):\n        self.assertEqual(helper.answers[5], \"if\")\n\n    def testAnswer7(self):\n        self.assertRegex(helper.answers[6], \"Ja|ja\")\n\n    def testAnswer8(self):\n        self.assertRegex(helper.answers[7], helper.re.argsRegex(\"x\", \"y\"))\n\n    def testAnswer9(self):\n        self.assertRegex(helper.answers[8], helper.re.expressionToRegex(\"y / x >= 4\"))\n\n    def testAnswer10(self):\n        self.assertEqual(helper.answers[9], \"True\")\n\nif __name__ == '__main__':\n    suite = unittest.TestLoader().loadTestsFromTestCase(testCaseClass=varAanmaken)\n    res = unittest.TextTestRunner().run(suite)\n    if res.wasSuccessful():\n        passed(\"Congratulations\")\n    else:\n        for el in res.failures:\n            failed(f\"There is an error in \" + str(el[0])[4:12])\n\n\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "Programma 4",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [
                    {
                      "offset" : 23,
                      "length" : 9,
                      "possible_answer" : "if",
                      "placeholder_text" : "1. Vul in"
                    },
                    {
                      "offset" : 46,
                      "length" : 18,
                      "possible_answer" : "Ja",
                      "placeholder_text" : "2. Vul in (Ja/Nee)"
                    },
                    {
                      "offset" : 89,
                      "length" : 35,
                      "possible_answer" : "x",
                      "placeholder_text" : "3. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 136,
                      "length" : 9,
                      "possible_answer" : "x < 0",
                      "placeholder_text" : "4. Vul in"
                    },
                    {
                      "offset" : 166,
                      "length" : 9,
                      "possible_answer" : "False",
                      "placeholder_text" : "5. Vul in"
                    },
                    {
                      "offset" : 222,
                      "length" : 9,
                      "possible_answer" : "if",
                      "placeholder_text" : "6. Vul in"
                    },
                    {
                      "offset" : 249,
                      "length" : 18,
                      "possible_answer" : "Nee",
                      "placeholder_text" : "7. Vul in (Ja/Nee)"
                    },
                    {
                      "offset" : 296,
                      "length" : 35,
                      "possible_answer" : "x, y",
                      "placeholder_text" : "8. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 347,
                      "length" : 9,
                      "possible_answer" : "y ** x <= 4000000",
                      "placeholder_text" : "9. Vul in"
                    },
                    {
                      "offset" : 381,
                      "length" : 9,
                      "possible_answer" : "True",
                      "placeholder_text" : "8. Vul in"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "x = 5\ny = 21\n#Keyword: 1. Vul in\n#Uitgevoerd: 2. Vul in (Ja/Nee)\n#Conditie variabele(n): 3. Vul in (Gescheiden door komma's)\n#Conditie: 4. Vul in\n#Conditie uitkomst: 5. Vul in\nif(x < 0):\n    print(\"Stap 1.\")\n    #Keyword: 6. Vul in\n    #Uitgevoerd: 7. Vul in (Ja/Nee)\n    #Conditie variabele(n): 8. Vul in (Gescheiden door komma's)\n    #Conditie: 9. Vul in\n    #Conditie uitkomst: 8. Vul in\n    if(y ** x >= 4000000):\n        print(\"Stap 2.\")\nprint(\"Stap 3.\")\nprint(\"Einde programma.\")\n\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import unittest\n\nfrom test_helper import run_common_tests, failed, passed\nfrom regex_helper import *\nfrom UserInputHelper import *\n\nhelper = Helper()\n\n\nclass varAanmaken(unittest.TestCase):\n    def testAnswer1(self):\n        self.assertEqual(helper.answers[0], \"if\")\n\n    def testAnswer2(self):\n        self.assertRegex(helper.answers[1], \"Ja|ja\")\n\n    def testAnswer3(self):\n        self.assertEqual(helper.answers[2], \"x\")\n\n    def testAnswer4(self):\n        self.assertRegex(helper.answers[3], helper.re.expressionToRegex(\"x < 0\"))\n\n    def testAnswer5(self):\n        self.assertEqual(helper.answers[4], \"False\")\n\n    def testAnswer6(self):\n        self.assertEqual(helper.answers[5], \"if\")\n\n    def testAnswer7(self):\n        self.assertRegex(helper.answers[6], \"Nee|nee\")\n\n    def testAnswer8(self):\n        self.assertRegex(helper.answers[7], helper.re.argsRegex(\"x\", \"y\"))\n\n    def testAnswer9(self):\n        self.assertRegex(helper.answers[8], helper.re.expressionToRegex(\"y ** x >= 4000000\"))\n\n    def testAnswer10(self):\n        self.assertEqual(helper.answers[9], \"True\")\n\nif __name__ == '__main__':\n    suite = unittest.TestLoader().loadTestsFromTestCase(testCaseClass=varAanmaken)\n    res = unittest.TextTestRunner().run(suite)\n    if res.wasSuccessful():\n        passed(\"Congratulations\")\n    else:\n        for el in res.failures:\n            failed(f\"There is an error in \" + str(el[0])[4:12])\n\n\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        },
        {
          "title" : "If - else",
          "task_list" : [
            {
              "name" : "Programma 1",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [
                    {
                      "offset" : 20,
                      "length" : 35,
                      "possible_answer" : "if, else",
                      "placeholder_text" : "1. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 69,
                      "length" : 9,
                      "possible_answer" : "Ja",
                      "placeholder_text" : "2. Vul in"
                    },
                    {
                      "offset" : 103,
                      "length" : 9,
                      "possible_answer" : "x",
                      "placeholder_text" : "3. Vul in"
                    },
                    {
                      "offset" : 124,
                      "length" : 9,
                      "possible_answer" : "x != 0",
                      "placeholder_text" : "4. Vul in"
                    },
                    {
                      "offset" : 154,
                      "length" : 9,
                      "possible_answer" : "True",
                      "placeholder_text" : "5. Vul in"
                    },
                    {
                      "offset" : 185,
                      "length" : 60,
                      "possible_answer" : "1",
                      "placeholder_text" : "6. Vul het getal van de pad(en) in (Gescheiden door komma's)"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "x = 5\n\n#Keyword(s): 1. Vul in (Gescheiden door komma's)\n#Uitgevoerd: 2. Vul in\n#Conditie variabele(n): 3. Vul in\n#Conditie: 4. Vul in\n#Conditie uitkomst: 5. Vul in\n#uitgevoerd pad(en): 6. Vul het getal van de pad(en) in (Gescheiden door komma's)\nif(x != 0):\n    print(\"Pad 1.\")\nelse:\n    print(\"Pad 2.\")\nprint(\"Einde programma.\")\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import unittest\n\nfrom test_helper import run_common_tests, failed, passed\nfrom regex_helper import *\nfrom UserInputHelper import *\n\nhelper = Helper()\n\n\nclass varAanmaken(unittest.TestCase):\n    def testAnswer1(self):\n        self.assertRegex(helper.answers[0], helper.re.argsRegex(\"if\", \"else\"))\n\n    def testAnswer2(self):\n        self.assertRegex(helper.answers[1], \"Ja|ja\")\n\n    def testAnswer3(self):\n        self.assertEqual(helper.answers[2], \"x\")\n\n    def testAnswer4(self):\n        self.assertRegex(helper.answers[3], helper.re.expressionToRegex(\"x != 0\"))\n\n    def testAnswer5(self):\n        self.assertEqual(helper.answers[4], \"True\")\n\n    def testAnswer6(self):\n        self.assertEqual(helper.answers[5], \"1\")\n\n\nif __name__ == '__main__':\n    suite = unittest.TestLoader().loadTestsFromTestCase(testCaseClass=varAanmaken)\n    res = unittest.TextTestRunner().run(suite)\n    if res.wasSuccessful():\n        passed(\"Congratulations\")\n    else:\n        for el in res.failures:\n            failed(f\"There is an error in \" + str(el[0])[4:12])\n\n\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "Programma 2",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [
                    {
                      "offset" : 20,
                      "length" : 35,
                      "possible_answer" : "if, else",
                      "placeholder_text" : "1. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 69,
                      "length" : 9,
                      "possible_answer" : "Ja",
                      "placeholder_text" : "2. Vul in"
                    },
                    {
                      "offset" : 103,
                      "length" : 35,
                      "possible_answer" : "x",
                      "placeholder_text" : "3. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 150,
                      "length" : 9,
                      "possible_answer" : "x != 55/11",
                      "placeholder_text" : "4. Vul in"
                    },
                    {
                      "offset" : 180,
                      "length" : 9,
                      "possible_answer" : "False",
                      "placeholder_text" : "5. Vul in"
                    },
                    {
                      "offset" : 211,
                      "length" : 60,
                      "possible_answer" : "1",
                      "placeholder_text" : "6. Vul het getal van de pad(en) in (Gescheiden door komma's)"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "x = 5\n\n#Keyword(s): 1. Vul in (Gescheiden door komma's)\n#Uitgevoerd: 2. Vul in\n#Conditie variabele(n): 3. Vul in (Gescheiden door komma's)\n#Conditie: 4. Vul in\n#Conditie uitkomst: 5. Vul in\n#uitgevoerd pad(en): 6. Vul het getal van de pad(en) in (Gescheiden door komma's)\nif(x != 55/11):\n    print(\"Pad 1.\")\nelse:\n    print(\"Pad 2.\")\nprint(\"Einde programma.\")\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import unittest\n\nfrom test_helper import run_common_tests, failed, passed\nfrom regex_helper import *\nfrom UserInputHelper import *\n\nhelper = Helper()\n\n\nclass varAanmaken(unittest.TestCase):\n    def testAnswer1(self):\n        self.assertRegex(helper.answers[0], helper.re.argsRegex(\"if\", \"else\"))\n\n    def testAnswer2(self):\n        self.assertRegex(helper.answers[1], \"Ja|ja\")\n\n    def testAnswer3(self):\n        self.assertEqual(helper.answers[2], \"x\")\n\n    def testAnswer4(self):\n        self.assertRegex(helper.answers[3], helper.re.expressionToRegex(\"x != 55/11\"))\n\n    def testAnswer5(self):\n        self.assertEqual(helper.answers[4], \"False\")\n\n    def testAnswer6(self):\n        self.assertEqual(helper.answers[5], \"1\")\n\nif __name__ == '__main__':\n    suite = unittest.TestLoader().loadTestsFromTestCase(testCaseClass=varAanmaken)\n    res = unittest.TextTestRunner().run(suite)\n    if res.wasSuccessful():\n        passed(\"Congratulations\")\n    else:\n        for el in res.failures:\n            failed(f\"There is an error in \" + str(el[0])[4:12])\n\n\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "Programma 3",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [
                    {
                      "offset" : 29,
                      "length" : 35,
                      "possible_answer" : "if, else",
                      "placeholder_text" : "1. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 78,
                      "length" : 9,
                      "possible_answer" : "Ja",
                      "placeholder_text" : "2. Vul in"
                    },
                    {
                      "offset" : 112,
                      "length" : 35,
                      "possible_answer" : "x",
                      "placeholder_text" : "3. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 159,
                      "length" : 9,
                      "possible_answer" : "x != 0",
                      "placeholder_text" : "4. Vul in"
                    },
                    {
                      "offset" : 189,
                      "length" : 9,
                      "possible_answer" : "True",
                      "placeholder_text" : "5. Vul in"
                    },
                    {
                      "offset" : 220,
                      "length" : 62,
                      "possible_answer" : "1, 2",
                      "placeholder_text" : "6. Vul de getallen van de pad(en) in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 332,
                      "length" : 35,
                      "possible_answer" : "if",
                      "placeholder_text" : "7. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 385,
                      "length" : 9,
                      "possible_answer" : "Ja",
                      "placeholder_text" : "8. Vul in"
                    },
                    {
                      "offset" : 423,
                      "length" : 35,
                      "possible_answer" : "x, y",
                      "placeholder_text" : "9. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 474,
                      "length" : 36,
                      "possible_answer" : "x <= y",
                      "placeholder_text" : "10. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 535,
                      "length" : 36,
                      "possible_answer" : "True",
                      "placeholder_text" : "11. Vul in (Gescheiden door komma's)"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "x = 5\ny = x * 2\n#Keyword(s): 1. Vul in (Gescheiden door komma's)\n#Uitgevoerd: 2. Vul in\n#Conditie variabele(n): 3. Vul in (Gescheiden door komma's)\n#Conditie: 4. Vul in\n#Conditie uitkomst: 5. Vul in\n#Uitgevoerd pad(en): 6. Vul de getallen van de pad(en) in (Gescheiden door komma's)\nif(x != 0):\n    print(\"Pad 1.\")\n    #Keyword(s): 7. Vul in (Gescheiden door komma's)\n    #Uitgevoerd: 8. Vul in\n    #Conditie variabele(n): 9. Vul in (Gescheiden door komma's)\n    #Conditie: 10. Vul in (Gescheiden door komma's)\n    #Conditie uitkomst: 11. Vul in (Gescheiden door komma's)\n    if(x <= y):\n        print(\"Pad 2.\")\nelse:\n    print(\"Pad 3.\")\nprint(\"Einde programma.\")\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import unittest\n\nfrom test_helper import run_common_tests, failed, passed\nfrom regex_helper import *\nfrom UserInputHelper import *\n\nhelper = Helper()\n\n\nclass varAanmaken(unittest.TestCase):\n    def testAnswer1(self):\n        self.assertRegex(helper.answers[0], helper.re.argsRegex(\"if\", \"else\"))\n\n    def testAnswer2(self):\n        self.assertRegex(helper.answers[1], \"Ja|ja\")\n\n    def testAnswer3(self):\n        self.assertEqual(helper.answers[2], \"x\")\n\n    def testAnswer4(self):\n        self.assertRegex(helper.answers[3], helper.re.expressionToRegex(\"x != 0\"))\n\n    def testAnswer5(self):\n        self.assertEqual(helper.answers[4], \"True\")\n\n    def testAnswer6(self):\n        self.assertRegex(helper.answers[5], helper.re.argsRegex(\"1\", \"2\"))\n\n    def testAnswer7(self):\n        self.assertEqual(helper.answers[6], \"if\")\n\n    def testAnswer8(self):\n        self.assertRegex(helper.answers[7], \"Ja|ja\")\n\n    def testAnswer9(self):\n        self.assertRegex(helper.answers[8], helper.re.argsRegex(\"x\", \"y\"))\n\n    def testAnswer10(self):\n        self.assertRegex(helper.answers[9], helper.re.expressionToRegex(\"x <= y\"))\n\n    def testAnswer11(self):\n        self.assertEqual(helper.answers[10], \"True\")\n\nif __name__ == '__main__':\n    suite = unittest.TestLoader().loadTestsFromTestCase(testCaseClass=varAanmaken)\n    res = unittest.TextTestRunner().run(suite)\n    if res.wasSuccessful():\n        passed(\"Congratulations\")\n    else:\n        for el in res.failures:\n            failed(f\"There is an error in \" + str(el[0])[4:12])\n\n\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "Programma 4",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [
                    {
                      "offset" : 32,
                      "length" : 35,
                      "possible_answer" : "if, else",
                      "placeholder_text" : "1. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 81,
                      "length" : 9,
                      "possible_answer" : "Ja",
                      "placeholder_text" : "2. Vul in"
                    },
                    {
                      "offset" : 115,
                      "length" : 35,
                      "possible_answer" : "x",
                      "placeholder_text" : "3. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 162,
                      "length" : 9,
                      "possible_answer" : "x < 15",
                      "placeholder_text" : "4. Vul in"
                    },
                    {
                      "offset" : 192,
                      "length" : 9,
                      "possible_answer" : "True",
                      "placeholder_text" : "5. Vul in"
                    },
                    {
                      "offset" : 224,
                      "length" : 60,
                      "possible_answer" : "1",
                      "placeholder_text" : "6. Vul de getallen van de paden in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 334,
                      "length" : 35,
                      "possible_answer" : "if",
                      "placeholder_text" : "7. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 387,
                      "length" : 9,
                      "possible_answer" : "Ja",
                      "placeholder_text" : "8. Vul in"
                    },
                    {
                      "offset" : 425,
                      "length" : 35,
                      "possible_answer" : "y",
                      "placeholder_text" : "9. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 476,
                      "length" : 10,
                      "possible_answer" : "10 >= y",
                      "placeholder_text" : "10. Vul in"
                    },
                    {
                      "offset" : 511,
                      "length" : 36,
                      "possible_answer" : "False",
                      "placeholder_text" : "11. Vul in (Gescheiden door komma's)"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "x = 21/3\ny = x * 2\n#Keyword(s): 1. Vul in (Gescheiden door komma's)\n#Uitgevoerd: 2. Vul in\n#Conditie variabele(n): 3. Vul in (Gescheiden door komma's)\n#Conditie: 4. Vul in\n#Conditie uitkomst: 5. Vul in\n#Uitgevoerde pad(en): 6. Vul de getallen van de paden in (Gescheiden door komma's)\nif(x < 15):\n    print(\"Pad 1.\")\n    #Keyword(s): 7. Vul in (Gescheiden door komma's)\n    #Uitgevoerd: 8. Vul in\n    #Conditie variabele(n): 9. Vul in (Gescheiden door komma's)\n    #Conditie: 10. Vul in\n    #Conditie uitkomst: 11. Vul in (Gescheiden door komma's)\n    if(10 >= y):\n        print(\"Pad 2.\")\nelse:\n    print(\"Pad 3.\")\nprint(\"Einde programma.\")\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import unittest\n\nfrom test_helper import run_common_tests, failed, passed\nfrom regex_helper import *\nfrom UserInputHelper import *\n\nhelper = Helper()\n\n\nclass varAanmaken(unittest.TestCase):\n    def testAnswer1(self):\n        self.assertRegex(helper.answers[0], helper.re.argsRegex(\"if\", \"else\"))\n\n    def testAnswer2(self):\n        self.assertRegex(helper.answers[1], \"Ja|ja\")\n\n    def testAnswer3(self):\n        self.assertEqual(helper.answers[2], \"x\")\n\n    def testAnswer4(self):\n        self.assertRegex(helper.answers[3], helper.re.expressionToRegex(\"x < 15\"))\n\n    def testAnswer5(self):\n        self.assertEqual(helper.answers[4], \"True\")\n\n    def testAnswer6(self):\n        self.assertRegex(helper.answers[5], helper.re.argsRegex(\"1\"))\n\n    def testAnswer7(self):\n        self.assertEqual(helper.answers[6], \"if\")\n\n    def testAnswer8(self):\n        self.assertRegex(helper.answers[7], \"Ja|ja\")\n\n    def testAnswer9(self):\n        self.assertEqual(helper.answers[8], \"y\")\n\n    def testAnswer10(self):\n        self.assertRegex(helper.answers[9], helper.re.expressionToRegex(\"10 >= y\"))\n\n    def testAnswer11(self):\n        self.assertEqual(helper.answers[10], \"False\")\n\nif __name__ == '__main__':\n    suite = unittest.TestLoader().loadTestsFromTestCase(testCaseClass=varAanmaken)\n    res = unittest.TextTestRunner().run(suite)\n    if res.wasSuccessful():\n        passed(\"Congratulations\")\n    else:\n        for el in res.failures:\n            failed(f\"There is an error in \" + str(el[0])[4:12])\n\n\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        },
        {
          "title" : "If - elif - else",
          "task_list" : [
            {
              "name" : "Programma 1",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [
                    {
                      "offset" : 41,
                      "length" : 35,
                      "possible_answer" : "if, elif, else",
                      "placeholder_text" : "1. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 90,
                      "length" : 9,
                      "possible_answer" : "Ja",
                      "placeholder_text" : "2. Vul in"
                    },
                    {
                      "offset" : 124,
                      "length" : 35,
                      "possible_answer" : "x,y,z",
                      "placeholder_text" : "3. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 171,
                      "length" : 9,
                      "possible_answer" : "x >= y and x >= z",
                      "placeholder_text" : "4. Vul in"
                    },
                    {
                      "offset" : 201,
                      "length" : 9,
                      "possible_answer" : "True",
                      "placeholder_text" : "5. Vul in"
                    },
                    {
                      "offset" : 232,
                      "length" : 35,
                      "possible_answer" : "1",
                      "placeholder_text" : "6. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 324,
                      "length" : 9,
                      "possible_answer" : "Nee",
                      "placeholder_text" : "7. Vul in"
                    },
                    {
                      "offset" : 358,
                      "length" : 35,
                      "possible_answer" : "x,y,z",
                      "placeholder_text" : "8. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 405,
                      "length" : 9,
                      "possible_answer" : "y >= x and y >= z",
                      "placeholder_text" : "9. Vul in"
                    },
                    {
                      "offset" : 435,
                      "length" : 10,
                      "possible_answer" : "False",
                      "placeholder_text" : "10. Vul in"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "x = 70/4\ny = 80/5\nz = 90/6\n\n#Keyword(s): 1. Vul in (Gescheiden door komma's)\n#Uitgevoerd: 2. Vul in\n#Conditie variabele(n): 3. Vul in (Gescheiden door komma's)\n#Conditie: 4. Vul in\n#Conditie uitkomst: 5. Vul in\n#Uitgevoerd pad(en): 6. Vul in (Gescheiden door komma's)\nif(x >= y and x >= z):\n    print(\"Pad 1.\")\n#Uitgevoerd: 7. Vul in\n#Conditie variabele(n): 8. Vul in (Gescheiden door komma's)\n#Conditie: 9. Vul in\n#Conditie uitkomst: 10. Vul in\nelif(y >= x and y >=z):\n    print(\"Pad 2.\")\nelse:\n    print(\"Pad 3.\")\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import unittest\n\nfrom test_helper import run_common_tests, failed, passed\nfrom regex_helper import *\nfrom UserInputHelper import *\n\nhelper = Helper()\n\n\nclass varAanmaken(unittest.TestCase):\n    def testAnswer1(self):\n        self.assertRegex(helper.answers[0], helper.re.argsRegex(\"if\", \"elif\", \"else\"))\n\n    def testAnswer2(self):\n        self.assertRegex(helper.answers[1], \"Ja|ja\")\n\n    def testAnswer3(self):\n         self.assertEqual(helper.answers[2], helper.re.argsRegex(\"x\", \"y\",\"z\"))\n\n    def testAnswer4(self):\n        self.assertRegex(helper.answers[3], helper.re.expressionToRegex(\"x >= y and x >= z\"))\n\n    def testAnswer5(self):\n        self.assertEqual(helper.answers[4], \"True\")\n\n    def testAnswer6(self):\n        self.assertRegex(helper.answers[5], helper.re.argsRegex(\"1\"))\n\n    def testAnswer7(self):\n         self.assertEqual(helper.answers[6], \"Nee|nee\")\n\n    def testAnswer8(self):\n       self.assertEqual(helper.answers[7], helper.re.argsRegex(\"x\", \"y\", \"z\"))\n\n    def testAnswer9(self):\n        self.assertRegex(helper.answers[8], helper.re.expressionToRegex(\"y >= x and y >=z\"))\n\n    def testAnswer10(self):\n        self.assertRegex(helper.answers[9], helper.re.argsRegex(\"False\"))\n\nif __name__ == '__main__':\n    suite = unittest.TestLoader().loadTestsFromTestCase(testCaseClass=varAanmaken)\n    res = unittest.TextTestRunner().run(suite)\n    if res.wasSuccessful():\n        passed(\"Congratulations\")\n    else:\n        for el in res.failures:\n            failed(f\"There is an error in \" + str(el[0])[4:12])\n\n\n\n\n"
                }
              },
              "description_text" : "<html>\nWrite your task text here.\n<div class=\"hint\">\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\n</div>\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "Programma 2",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [
                    {
                      "offset" : 44,
                      "length" : 35,
                      "possible_answer" : "if, elif, else",
                      "placeholder_text" : "1. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 93,
                      "length" : 9,
                      "possible_answer" : "Ja",
                      "placeholder_text" : "2. Vul in"
                    },
                    {
                      "offset" : 127,
                      "length" : 35,
                      "possible_answer" : "x",
                      "placeholder_text" : "3. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 174,
                      "length" : 9,
                      "possible_answer" : "x > 1",
                      "placeholder_text" : "4. Vul in"
                    },
                    {
                      "offset" : 204,
                      "length" : 9,
                      "possible_answer" : "False",
                      "placeholder_text" : "5. Vul in"
                    },
                    {
                      "offset" : 235,
                      "length" : 35,
                      "possible_answer" : "2",
                      "placeholder_text" : "6. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 315,
                      "length" : 9,
                      "possible_answer" : "Ja",
                      "placeholder_text" : "7. Vul in"
                    },
                    {
                      "offset" : 349,
                      "length" : 35,
                      "possible_answer" : "z,y",
                      "placeholder_text" : "8. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 396,
                      "length" : 9,
                      "possible_answer" : "z <= y",
                      "placeholder_text" : "9. Vul in"
                    },
                    {
                      "offset" : 426,
                      "length" : 10,
                      "possible_answer" : "True",
                      "placeholder_text" : "10. Vul in"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "x = 6 ** -1\ny = 1/x\nz = 2 ** 3\n#Keyword(s): 1. Vul in (Gescheiden door komma's)\n#Uitgevoerd: 2. Vul in\n#Conditie variabele(n): 3. Vul in (Gescheiden door komma's)\n#Conditie: 4. Vul in\n#Conditie uitkomst: 5. Vul in\n#Uitgevoerd pad(en): 6. Vul in (Gescheiden door komma's)\nif(x > 1):\n    print(\"Pad 1.\")\n#Uitgevoerd: 7. Vul in\n#Conditie variabele(n): 8. Vul in (Gescheiden door komma's)\n#Conditie: 9. Vul in\n#Conditie uitkomst: 10. Vul in\nelif(z <= y):\n    print(\"Pad 2.\")\nelse:\n    print(\"Pad 3.\")\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import unittest\n\nfrom test_helper import run_common_tests, failed, passed\nfrom regex_helper import *\nfrom UserInputHelper import *\n\nhelper = Helper()\n\n\nclass varAanmaken(unittest.TestCase):\n    def testAnswer1(self):\n        self.assertRegex(helper.answers[0], helper.re.argsRegex(\"if\", \"elif\", \"else\"))\n\n    def testAnswer2(self):\n        self.assertRegex(helper.answers[1], \"Ja|ja\")\n\n    def testAnswer3(self):\n         self.assertEqual(helper.answers[2], helper.re.argsRegex(\"x\"))\n\n    def testAnswer4(self):\n        self.assertRegex(helper.answers[3], helper.re.expressionToRegex(\"x > 1\"))\n\n    def testAnswer5(self):\n        self.assertEqual(helper.answers[4], \"False\")\n\n    def testAnswer6(self):\n        self.assertRegex(helper.answers[5], helper.re.argsRegex(\"2\"))\n\n    def testAnswer7(self):\n         self.assertEqual(helper.answers[6], \"Ja|ja\")\n\n    def testAnswer8(self):\n       self.assertEqual(helper.answers[7], helper.re.argsRegex(\"z\",\"y\"))\n\n    def testAnswer9(self):\n        self.assertRegex(helper.answers[8], helper.re.expressionToRegex(\"z <= y\"))\n\n    def testAnswer10(self):\n        self.assertRegex(helper.answers[9], helper.re.argsRegex(\"True\"))\n\nif __name__ == '__main__':\n    suite = unittest.TestLoader().loadTestsFromTestCase(testCaseClass=varAanmaken)\n    res = unittest.TextTestRunner().run(suite)\n    if res.wasSuccessful():\n        passed(\"Congratulations\")\n    else:\n        for el in res.failures:\n            failed(f\"There is an error in \" + str(el[0])[4:12])\n\n\n\n\n"
                }
              },
              "description_text" : "<html>\nWrite your task text here.\n<div class=\"hint\">\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\n</div>\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "Programma 3",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "x = 9 ** 0.5\ny = 8 * x\nz = 6 * 4\n\n#Keyword(s): if, elif, else\n#Uitgevoerd: Ja\n#Conditie variabele(n): y\n#Conditie: y > 20\n#Conditie uitkomst: True\n#Uitgevoerd pad(en): 1\nif(y > 20):\n    print(\"Pad 1.\")\n#Uitgevoerd: Nee\n#Conditie variabele(n): z,y\n#Conditie: z == y\n#Conditie uitkomst: True\nelif(z == y):\n    print(\"Pad 2.\")\nelse:\n    print(\"Pad 3.\")\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import unittest\n\nfrom test_helper import run_common_tests, failed, passed\nfrom regex_helper import *\nfrom UserInputHelper import *\n\nhelper = Helper()\n\n\nclass varAanmaken(unittest.TestCase):\n    def testAnswer1(self):\n        self.assertRegex(helper.answers[0], helper.re.argsRegex(\"if\", \"elif\", \"else\"))\n\n    def testAnswer2(self):\n        self.assertRegex(helper.answers[1], \"Ja|ja\")\n\n    def testAnswer3(self):\n         self.assertEqual(helper.answers[2], helper.re.argsRegex(\"y\"))\n\n    def testAnswer4(self):\n        self.assertRegex(helper.answers[3], helper.re.expressionToRegex(\"y > 20\"))\n\n    def testAnswer5(self):\n        self.assertEqual(helper.answers[4], \"True\")\n\n    def testAnswer6(self):\n        self.assertRegex(helper.answers[5], helper.re.argsRegex(\"2\"))\n\n    def testAnswer7(self):\n         self.assertEqual(helper.answers[6], \"Nee|nee\")\n\n    def testAnswer8(self):\n       self.assertEqual(helper.answers[7], helper.re.argsRegex(\"z\", \"y\"))\n\n    def testAnswer9(self):\n        self.assertRegex(helper.answers[8], helper.re.expressionToRegex(\"z == y\"))\n\n    def testAnswer10(self):\n        self.assertRegex(helper.answers[9], helper.re.argsRegex(\"True\"))\n\nif __name__ == '__main__':\n    suite = unittest.TestLoader().loadTestsFromTestCase(testCaseClass=varAanmaken)\n    res = unittest.TextTestRunner().run(suite)\n    if res.wasSuccessful():\n        passed(\"Congratulations\")\n    else:\n        for el in res.failures:\n            failed(f\"There is an error in \" + str(el[0])[4:12])\n\n\n\n\n"
                }
              },
              "description_text" : "<html>\nWrite your task text here.\n<div class=\"hint\">\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\n</div>\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        },
        {
          "title" : "Geneste if - else",
          "task_list" : [
            {
              "name" : "Programma 1",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [
                    {
                      "offset" : 41,
                      "length" : 35,
                      "possible_answer" : "if, else",
                      "placeholder_text" : "1. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 90,
                      "length" : 9,
                      "possible_answer" : "Ja",
                      "placeholder_text" : "2. Vul in"
                    },
                    {
                      "offset" : 124,
                      "length" : 35,
                      "possible_answer" : "z",
                      "placeholder_text" : "3. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 171,
                      "length" : 9,
                      "possible_answer" : "z > 7 * 3",
                      "placeholder_text" : "4. Vul in"
                    },
                    {
                      "offset" : 201,
                      "length" : 9,
                      "possible_answer" : "True",
                      "placeholder_text" : "5. Vul in"
                    },
                    {
                      "offset" : 232,
                      "length" : 35,
                      "possible_answer" : "1,2,4",
                      "placeholder_text" : "6. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 320,
                      "length" : 35,
                      "possible_answer" : "if, else",
                      "placeholder_text" : "7. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 373,
                      "length" : 9,
                      "possible_answer" : "Ja",
                      "placeholder_text" : "8. Vul in"
                    },
                    {
                      "offset" : 411,
                      "length" : 35,
                      "possible_answer" : "y",
                      "placeholder_text" : "9. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 462,
                      "length" : 10,
                      "possible_answer" : "10 <= y",
                      "placeholder_text" : "10. Vul in"
                    },
                    {
                      "offset" : 497,
                      "length" : 10,
                      "possible_answer" : "True",
                      "placeholder_text" : "11. Vul in"
                    },
                    {
                      "offset" : 570,
                      "length" : 36,
                      "possible_answer" : "if, else",
                      "placeholder_text" : "12. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 628,
                      "length" : 10,
                      "possible_answer" : "Ja",
                      "placeholder_text" : "13. Vul in"
                    },
                    {
                      "offset" : 671,
                      "length" : 10,
                      "possible_answer" : "x, y",
                      "placeholder_text" : "14. Vul in"
                    },
                    {
                      "offset" : 701,
                      "length" : 10,
                      "possible_answer" : "50 >= x * y",
                      "placeholder_text" : "15. Vul in"
                    },
                    {
                      "offset" : 740,
                      "length" : 10,
                      "possible_answer" : "False",
                      "placeholder_text" : "16. Vul in"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "x = 21/3\ny = x/3 * 4\nz = 24\n#Keyword(s): 1. Vul in (Gescheiden door komma's)\n#Uitgevoerd: 2. Vul in\n#Conditie variabele(n): 3. Vul in (Gescheiden door komma's)\n#Conditie: 4. Vul in\n#Conditie uitkomst: 5. Vul in\n#Uitgevoerd pad(en): 6. Vul in (Gescheiden door komma's)\nif(z > 7 * 3):\n    print(\"Pad 1.\")\n    #Keyword(s): 7. Vul in (Gescheiden door komma's)\n    #Uitgevoerd: 8. Vul in\n    #Conditie variabele(n): 9. Vul in (Gescheiden door komma's)\n    #Conditie: 10. Vul in\n    #Conditie uitkomst: 11. Vul in\n    if(10 <= y):\n        print(\"Pad 2.\")\n        #Keyword(s): 12. Vul in (Gescheiden door komma's)\n        #Uitgevoerd: 13. Vul in\n        #Conditie variabele(n): 14. Vul in\n        #Conditie: 15. Vul in\n        #Conditie uitkomst: 16. Vul in\n        if(50 >= x * y):\n            print(\"Pad 3.\")\n        else:\n            print(\"Pad 4.\")\n    else:\n        print(\"Pad 5.\")\nelse:\n    print(\"Pad 6.\")\nprint(\"Einde programma.\")\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import unittest\n\nfrom test_helper import run_common_tests, failed, passed\nfrom regex_helper import *\nfrom UserInputHelper import *\n\nhelper = Helper()\n\n\nclass varAanmaken(unittest.TestCase):\n    def testAnswer1(self):\n        self.assertRegex(helper.answers[0], helper.re.argsRegex(\"if\", \"else\"))\n\n    def testAnswer2(self):\n        self.assertRegex(helper.answers[1], \"Ja|ja\")\n\n    def testAnswer3(self):\n        self.assertEqual(helper.answers[2], \"z\")\n\n    def testAnswer4(self):\n        self.assertRegex(helper.answers[3], helper.re.expressionToRegex(\"z > 7 * 3\"))\n\n    def testAnswer5(self):\n        self.assertEqual(helper.answers[4], \"True\")\n\n    def testAnswer6(self):\n        self.assertRegex(helper.answers[5], helper.re.argsRegex(\"1\",\"2\",\"4\"))\n\n    def testAnswer7(self):\n        self.assertRegex(helper.answers[6], helper.re.argsRegex(\"if\", \"else\"))\n\n    def testAnswer8(self):\n        self.assertRegex(helper.answers[7], \"Ja|ja\")\n\n    def testAnswer9(self):\n        self.assertEqual(helper.answers[8], \"y\")\n\n    def testAnswer10(self):\n        self.assertRegex(helper.answers[9], helper.re.expressionToRegex(\"10 <= y\"))\n\n    def testAnswer11(self):\n        self.assertEqual(helper.answers[10], \"True\")\n\n    def testAnswer12(self):\n        self.assertRegex(helper.answers[11], helper.re.argsRegex(\"if\", \"else\"))\n\n    def testAnswer13(self):\n        self.assertRegex(helper.answers[12], \"Ja|ja\")\n\n    def testAnswer14(self):\n        self.assertRegex(helper.answers[13], helper.re.argsRegex(\"x\", \"y\"))\n\n    def testAnswer15(self):\n        self.assertRegex(helper.answers[14], helper.re.expressionToRegex(\"50 >= x * y\"))\n\n    def testAnswer16(self):\n        self.assertEqual(helper.answers[15], \"False\")\n\nif __name__ == '__main__':\n    suite = unittest.TestLoader().loadTestsFromTestCase(testCaseClass=varAanmaken)\n    res = unittest.TextTestRunner().run(suite)\n    if res.wasSuccessful():\n        passed(\"Congratulations\")\n    else:\n        for el in res.failures:\n            failed(f\"There is an error in \" + str(el[0])[4:12])\n\n\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "Programma 2",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [
                    {
                      "offset" : 41,
                      "length" : 35,
                      "possible_answer" : "if, else",
                      "placeholder_text" : "1. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 90,
                      "length" : 9,
                      "possible_answer" : "Ja",
                      "placeholder_text" : "2. Vul in"
                    },
                    {
                      "offset" : 124,
                      "length" : 35,
                      "possible_answer" : "z",
                      "placeholder_text" : "3. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 171,
                      "length" : 9,
                      "possible_answer" : "z < 20",
                      "placeholder_text" : "4. Vul in"
                    },
                    {
                      "offset" : 201,
                      "length" : 9,
                      "possible_answer" : "False",
                      "placeholder_text" : "5. Vul in"
                    },
                    {
                      "offset" : 232,
                      "length" : 35,
                      "possible_answer" : "6",
                      "placeholder_text" : "6. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 317,
                      "length" : 35,
                      "possible_answer" : "if, else",
                      "placeholder_text" : "7. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 370,
                      "length" : 9,
                      "possible_answer" : "Nee",
                      "placeholder_text" : "8. Vul in"
                    },
                    {
                      "offset" : 408,
                      "length" : 35,
                      "possible_answer" : "y",
                      "placeholder_text" : "9. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 459,
                      "length" : 10,
                      "possible_answer" : "10 >= y",
                      "placeholder_text" : "10. Vul in"
                    },
                    {
                      "offset" : 494,
                      "length" : 10,
                      "possible_answer" : "False",
                      "placeholder_text" : "11. Vul in"
                    },
                    {
                      "offset" : 566,
                      "length" : 36,
                      "possible_answer" : "if, else",
                      "placeholder_text" : "12. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 624,
                      "length" : 10,
                      "possible_answer" : "Nee",
                      "placeholder_text" : "13. Vul in"
                    },
                    {
                      "offset" : 667,
                      "length" : 36,
                      "possible_answer" : "x, y",
                      "placeholder_text" : "14. Vul in (Gescheiden door komma's)"
                    },
                    {
                      "offset" : 723,
                      "length" : 10,
                      "possible_answer" : "10 >= y",
                      "placeholder_text" : "15. Vul in"
                    },
                    {
                      "offset" : 762,
                      "length" : 9,
                      "possible_answer" : "False",
                      "placeholder_text" : "16 Vul in"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "x = 21/3\ny = x/3 * 4\nz = 24\n#Keyword(s): 1. Vul in (Gescheiden door komma's)\n#Uitgevoerd: 2. Vul in\n#Conditie variabele(n): 3. Vul in (Gescheiden door komma's)\n#Conditie: 4. Vul in\n#Conditie uitkomst: 5. Vul in\n#Uitgevoerd pad(en): 6. Vul in (Gescheiden door komma's)\nif(z < 20):\n    print(\"Pad 1.\")\n    #Keyword(s): 7. Vul in (Gescheiden door komma's)\n    #Uitgevoerd: 8. Vul in\n    #Conditie variabele(n): 9. Vul in (Gescheiden door komma's)\n    #Conditie: 10. Vul in\n    #Conditie uitkomst: 11. Vul in\n    if(5 <= y):\n        print(\"Pad 2.\")\n        #Keyword(s): 12. Vul in (Gescheiden door komma's)\n        #Uitgevoerd: 13. Vul in\n        #Conditie variabele(n): 14. Vul in (Gescheiden door komma's)\n        #Conditie: 15. Vul in\n        #Conditie uitkomst: 16 Vul in\n        if(50 >= x * y):\n            print(\"Pad 3.\")\n        else:\n            print(\"Pad 4.\")\n    else:\n        print(\"Pad 5.\")\nelse:\n    print(\"Pad 6.\")\nprint(\"Einde programma.\")\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import unittest\n\nfrom test_helper import run_common_tests, failed, passed\nfrom regex_helper import *\nfrom UserInputHelper import *\n\nhelper = Helper()\n\n\nclass varAanmaken(unittest.TestCase):\n    def testAnswer1(self):\n        self.assertRegex(helper.answers[0], helper.re.argsRegex(\"if\", \"else\"))\n\n    def testAnswer2(self):\n        self.assertRegex(helper.answers[1], \"Ja|ja\")\n\n    def testAnswer3(self):\n        self.assertEqual(helper.answers[2], \"z\")\n\n    def testAnswer4(self):\n        self.assertRegex(helper.answers[3], helper.re.expressionToRegex(\"z < 20\"))\n\n    def testAnswer5(self):\n        self.assertEqual(helper.answers[4], \"False\")\n\n    def testAnswer6(self):\n        self.assertRegex(helper.answers[5], helper.re.argsRegex(\"6\"))\n\n    def testAnswer7(self):\n        self.assertRegex(helper.answers[6], helper.re.argsRegex(\"if\", \"else\"))\n\n    def testAnswer8(self):\n        self.assertRegex(helper.answers[7], \"Nee|nee\")\n\n    def testAnswer9(self):\n        self.assertEqual(helper.answers[8], \"y\")\n\n    def testAnswer10(self):\n        self.assertRegex(helper.answers[9], helper.re.expressionToRegex(\"10 >= y\"))\n\n    def testAnswer11(self):\n        self.assertEqual(helper.answers[10], \"False\")\n\n    def testAnswer12(self):\n        self.assertRegex(helper.answers[11], helper.re.argsRegex(\"if\", \"else\"))\n\n    def testAnswer13(self):\n        self.assertRegex(helper.answers[12], \"Nee|nee\")\n\n    def testAnswer14(self):\n        self.assertRegex(helper.answers[13], helper.re.argsRegex(\"x\", \"y\"))\n\n    def testAnswer15(self):\n        self.assertRegex(helper.answers[14], helper.re.expressionToRegex(\"50 >= x * y\"))\n\n    def testAnswer16(self):\n        self.assertEqual(helper.answers[15], \"False\")\n\nif __name__ == '__main__':\n    suite = unittest.TestLoader().loadTestsFromTestCase(testCaseClass=varAanmaken)\n    res = unittest.TextTestRunner().run(suite)\n    if res.wasSuccessful():\n        passed(\"Congratulations\")\n    else:\n        for el in res.failures:\n            failed(f\"There is an error in \" + str(el[0])[4:12])\n\n\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        },
        {
          "title" : "Opdrachten",
          "task_list" : [
            {
              "name" : "LeeftijdsCheck",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [
                    {
                      "offset" : 269,
                      "length" : 26,
                      "possible_answer" : "Age < 18",
                      "placeholder_text" : "1. Maak de juiste conditie"
                    },
                    {
                      "offset" : 332,
                      "length" : 26,
                      "possible_answer" : "Age <= 65",
                      "placeholder_text" : "2. Maak de juiste conditie"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "# Create a program so that people under 18 get 10% reduction,\n# and people above 65 get 25% reduction.\n# Edit the value of age, then press the green arrow to test your code.\n# DO NOT EDIT THE FOLLOWING LINE\nif __name__ == '__main__':\n    Name = \"Aron\"\n    Age = 70\n\nif(1. Maak de juiste conditie):\n    print(\"Reduction = 10%\")\nelif(2. Maak de juiste conditie):\n    print(\"Reduction = 0%\")\nelse:\n    print(\"Reduction = 25%\")\n\n\n\n\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import unittest\nimport runpy\nimport sys\nfrom test_helper import failed, passed\nfrom UserInputHelper import *\n\nhelper = Helper()\n\n\nclass varAanmaken(unittest.TestCase):\n    def testLessThan18ShouldGive10(self):\n        sys.stdout = open('testoutput.txt', 'w')\n        print(runpy.run_module('task', init_globals={'Age': 17}))\n        sys.stdout = sys.__stdout__\n        self.assertEqual(open('testoutput.txt','r').readline(), 'Reduction = 10%\\n')\n\n    def test18ShouldGive0(self):\n        sys.stdout = open('testoutput.txt', 'w')\n        print(runpy.run_module('task', init_globals={'Age': 18}))\n        sys.stdout = sys.__stdout__\n        self.assertEqual(open('testoutput.txt','r').readline(), 'Reduction = 0%\\n')\n\n    def testBetween18And65ShouldGive0(self):\n        sys.stdout = open('testoutput.txt', 'w')\n        print(runpy.run_module('task', init_globals={'Age': 19}))\n        sys.stdout = sys.__stdout__\n        self.assertEqual(open('testoutput.txt','r').readline(), 'Reduction = 0%\\n')\n\n    def test65ShouldGive0(self):\n        sys.stdout = open('testoutput.txt', 'w')\n        print(runpy.run_module('task', init_globals={'Age': 65}))\n        sys.stdout = sys.__stdout__\n        self.assertEqual(open('testoutput.txt','r').readline(), 'Reduction = 0%\\n')\n\n    def testOver65ShouldGive25(self):\n        sys.stdout = open('testoutput.txt', 'w')\n        print(runpy.run_module('task', init_globals={'Age': 66}))\n        sys.stdout = sys.__stdout__\n        self.assertEqual(open('testoutput.txt','r').readline(), 'Reduction = 25%\\n')\n\n\nif __name__ == '__main__':\n    suite = unittest.TestLoader().loadTestsFromTestCase(testCaseClass=varAanmaken)\n    res = unittest.TextTestRunner().run(suite)\n    if res.wasSuccessful():\n        passed(\"Congratulations\")\n    else:\n        for el in res.failures:\n            failed(f\"The following condition is not met: \" + str(el[0])[4:-23])\n\n\n\n\n"
                },
                "testoutput.txt" : {
                  "name" : "testoutput.txt",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : ""
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "OnderGelijkOfBoven",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [
                    {
                      "offset" : 406,
                      "length" : 26,
                      "possible_answer" : "number < 0",
                      "placeholder_text" : "1. Maak de juiste conditie"
                    },
                    {
                      "offset" : 474,
                      "length" : 26,
                      "possible_answer" : "number < randomNumber",
                      "placeholder_text" : "2. Maak de juiste conditie"
                    },
                    {
                      "offset" : 560,
                      "length" : 26,
                      "possible_answer" : "number == randomNumber",
                      "placeholder_text" : "3. Maak de juiste conditie"
                    },
                    {
                      "offset" : 649,
                      "length" : 25,
                      "possible_answer" : "number > randomNumber and number <= 100",
                      "placeholder_text" : "4. Maak de juist conditie"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import random\n\n# Create a program that checks if the number the user put in is higher or lower than\n# a randomly generated number.\n\n# The inputted number may not be below 0, nor may it be above 100.\n# DO NOT EDIT THE FOLLOWING LINE\nif __name__ == \"__main__\":\n    number = int(input(\"Enter a number:\\n\"))\n    randomNumber = random.randint(0, 100)\n    print(\"The random number is: \" + str(randomNumber))\n\nif(1. Maak de juiste conditie):\n    print(\"No negative numbers!\")\nelif(2. Maak de juiste conditie):\n    print(\"The number is below the random number.\")\nelif(3. Maak de juiste conditie):\n    print(\"The number is equal to the random number!\")\nelif(4. Maak de juist conditie):\n    print(\"The number is above the random number.\")\nelse:\n    print(\"No numbers higher than 100!\")\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import unittest\nimport runpy\nimport sys\nfrom test_helper import failed, passed\nfrom UserInputHelper import *\n\nhelper = Helper()\n\n\nclass varAanmaken(unittest.TestCase):\n    def testNumberUnder0ShouldGiveOption1(self):\n        sys.stdout = open('testoutput.txt', 'w')\n        print(runpy.run_module('task', init_globals={'number': -1, 'randomNumber': 50}))\n        sys.stdout = sys.__stdout__\n        self.assertEqual(open('testoutput.txt','r').readline(), 'No negative numbers!\\n')\n\n    def testNumberUnderRandomShouldGiveOption2(self):\n        sys.stdout = open('testoutput.txt', 'w')\n        print(runpy.run_module('task', init_globals={'number': 1, 'randomNumber': 50}))\n        sys.stdout = sys.__stdout__\n        self.assertEqual(open('testoutput.txt','r').readline(), 'The number is below the random number.\\n')\n\n    def testNumberEqualToRandomShouldGiveOption3(self):\n        sys.stdout = open('testoutput.txt', 'w')\n        print(runpy.run_module('task', init_globals={'number': 50, 'randomNumber': 50}))\n        sys.stdout = sys.__stdout__\n        self.assertEqual(open('testoutput.txt','r').readline(), 'The number is equal to the random number!\\n')\n\n    def testNumberAboveRandomShouldGiveOption4(self):\n        sys.stdout = open('testoutput.txt', 'w')\n        print(runpy.run_module('task', init_globals={'number': 51, 'randomNumber': 50}))\n        sys.stdout = sys.__stdout__\n        self.assertEqual(open('testoutput.txt','r').readline(), 'The number is above the random number.\\n')\n\n    def testNumberAbove100ShouldGiveOption5(self):\n        sys.stdout = open('testoutput.txt', 'w')\n        print(runpy.run_module('task', init_globals={'number': 101, 'randomNumber': 50}))\n        sys.stdout = sys.__stdout__\n        self.assertEqual(open('testoutput.txt','r').readline(), 'No numbers higher than 100!\\n')\n\n\nif __name__ == '__main__':\n    suite = unittest.TestLoader().loadTestsFromTestCase(testCaseClass=varAanmaken)\n    res = unittest.TextTestRunner().run(suite)\n    if res.wasSuccessful():\n        passed(\"Congratulations\")\n    else:\n        for el in res.failures:\n            failed(f\"The following condition is not met: \" + str(el[0])[4:-23])\n\n\n\n\n"
                },
                "testoutput.txt" : {
                  "name" : "testoutput.txt",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : ""
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "Schrikkeljaar",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [
                    {
                      "offset" : 473,
                      "length" : 144,
                      "possible_answer" : "\nif(year % 400 == 0):\n    isLeapYear = True\nelse:\n    if(year % 4 == 0 and year % 100 != 0):\n        isLeapYear = True",
                      "placeholder_text" : "Maak een constructie van if/else statements die kijken of een jaar een schrikkeljaar is. Zo ja, zet de waarde van de boolean isLeapYear op True."
                    }
                  ],
                  "is_visible" : true,
                  "text" : "# Create a program that checks if a given year is a leap year or not.\n# A year is a leap year if it is divisible by 4. (HINT: use the modulo operator)\n# A year is NOT a leap year if it is divisible by 100.\n# A year is a leap year if it is divisible by 400. This rule takes precedence over the above rule.\n\n# DO NOT EDIT THE FOLLOWING LINE\nif __name__ == \"__main__\":\n    year = int(input(\"Which year do you want to check for a common or leap year?:\\n\"))\n\nisLeapYear = False\nMaak een constructie van if/else statements die kijken of een jaar een schrikkeljaar is. Zo ja, zet de waarde van de boolean isLeapYear op True.\n\nif(isLeapYear):\n    print(str(year) + \" is a leap year!\")\nelse:\n    print(str(year) + \" is a common year!\")\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import unittest\nimport runpy\nimport sys\nfrom test_helper import failed, passed\nfrom UserInputHelper import *\n\nhelper = Helper()\n\n\nclass varAanmaken(unittest.TestCase):\n    def testYearDivisibleby400ShouldGiveLeapYear(self):\n        sys.stdout = open('testoutput.txt', 'w')\n        print(runpy.run_module('task', init_globals={'year': 2000}))\n        sys.stdout = sys.__stdout__\n        self.assertEqual(open('testoutput.txt','r').readline(), '2000 is a leap year!\\n')\n\n    def testYearDivisibleBy100ButNot400ShouldGiveCommonYear(self):\n        sys.stdout = open('testoutput.txt', 'w')\n        print(runpy.run_module('task', init_globals={'year': 1900}))\n        sys.stdout = sys.__stdout__\n        self.assertEqual(open('testoutput.txt','r').readline(), '1900 is a common year!\\n')\n\n    def testYearDivisibleBy4ButNot100ShouldGiveLeapYear(self):\n        sys.stdout = open('testoutput.txt', 'w')\n        print(runpy.run_module('task', init_globals={'year': 2004}))\n        sys.stdout = sys.__stdout__\n        self.assertEqual(open('testoutput.txt','r').readline(), '2004 is a leap year!\\n')\n\n    def testYearNotDivisibleBy4ShouldGiveCommonYear(self):\n        sys.stdout = open('testoutput.txt', 'w')\n        print(runpy.run_module('task', init_globals={'year': 2003}))\n        sys.stdout = sys.__stdout__\n        self.assertEqual(open('testoutput.txt','r').readline(), '2003 is a common year!\\n')\n\n\n\nif __name__ == '__main__':\n    suite = unittest.TestLoader().loadTestsFromTestCase(testCaseClass=varAanmaken)\n    res = unittest.TextTestRunner().run(suite)\n    if res.wasSuccessful():\n        passed(\"Congratulations\")\n    else:\n        for el in res.failures:\n            failed(f\"The following condition is not met: \" + str(el[0])[4:-23])\n\n\n\n\n"
                },
                "testoutput.txt" : {
                  "name" : "testoutput.txt",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : ""
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        }
      ],
      "type" : "section"
    },
    {
      "title" : "Week 4 - Arrays en functies",
      "items" : [
        {
          "title" : "Arrays",
          "task_list" : [
            {
              "name" : "Aanmaken",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "emptyArray = []\n\nintegerArray = [1, 2, 3]\n\nstringArray = [\"1\", \"2\", \"3\"]\n\narrayOfArrays = [emptyArray, integerArray, stringArray]\n\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom regex_helper import *\nfrom UserInputHelper import *\n\ndef test_answer_placeholders():\n    helper = Helper()\n    for answerNumber in range(len(helper.answers)):\n        outcome = False\n        backupText = \"\"\n        if(answerNumber == 0):\n            outcome = helper.CheckInput(answerNumber, \"x\")\n        elif(answerNumber == 1):\n            outcome = helper.CheckInput(answerNumber, \"235\")\n        elif(answerNumber == 2):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 3):\n            outcome = helper.CheckInput(answerNumber, \"stappenteller\")\n        elif(answerNumber == 4):\n            outcome = helper.CheckInput(answerNumber, \"0\")\n        elif(answerNumber == 5):\n            outcome = helper.CheckInput(answerNumber, \"45\")\n        elif(answerNumber == 6):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 7):\n            outcome = helper.CheckInput(answerNumber, \"aantalHoeken\")\n        elif(answerNumber == 8):\n            outcome = helper.CheckInput(answerNumber, \"4\")\n        elif(answerNumber == 9):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 10):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varA = -342\"))\n        elif(answerNumber == 11):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varB = 244\"))\n        elif(answerNumber == 12):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varC = 8942\"))\n        CheckOutcome(outcome, answerNumber, backupText)\n\ndef CheckOutcome(outcome, answerNumber, backupText):\n    if(outcome):\n        passed(\"Answer #\" + str(answerNumber) + \" is correct!\")\n    else:\n        failed(\"There is an error in answer #\"+ str(answerNumber)+\" \" + backupText)\n\nif __name__ == '__main__':\n    run_common_tests()\n    test_answer_placeholders()\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "Data aanroepen",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "emptyArray = []\n\nintegerArray = [1, 2, 3]\n\nstringArray = [\"1\", \"2\", \"3\"]\n\narrayOfArrays = [emptyArray, integerArray, stringArray]\n\na = integerArray[2]\n#Variabele naam: a\n#Variabele waarde: 3\n#Variabele type: integer\n\nb = integerArray[2-1]\n#Variabele naam: b\n#Variabele waarde: 2\n#Variabele type: integer\n\nc = stringArray[4//2]\n#Variabele naam: c\n#Variabele waarde: \"3\"\n#Variabele type: string\n\nd = stringArray[0]\n#Variabele naam: d\n#Variabele waarde: \"1\"\n#Variabele type: string\n\ne = arrayOfArrays[2]\n#Variabele naam: e\n#Variabele waarde: [\"1\", \"2\", \"3\"]\n#Variabele type: array\n\nf = arrayOfArrays[1][0]\n#Variabele naam: f\n#Variabele waarde: 1\n#Variabele type: integer\n\ng = arrayOfArrays[2][2]\n#Variabele naam: g\n#Variabele waarde: \"3\"\n#Variabele type: string\n\nh = arrayOfArrays[0]\n#Variabele naam: h\n#Variabele waarde: []\n#Variabele type: array\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom regex_helper import *\nfrom UserInputHelper import *\n\ndef test_answer_placeholders():\n    helper = Helper()\n    for answerNumber in range(len(helper.answers)):\n        outcome = False\n        backupText = \"\"\n        if(answerNumber == 0):\n            outcome = helper.CheckInput(answerNumber, \"x\")\n        elif(answerNumber == 1):\n            outcome = helper.CheckInput(answerNumber, \"235\")\n        elif(answerNumber == 2):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 3):\n            outcome = helper.CheckInput(answerNumber, \"stappenteller\")\n        elif(answerNumber == 4):\n            outcome = helper.CheckInput(answerNumber, \"0\")\n        elif(answerNumber == 5):\n            outcome = helper.CheckInput(answerNumber, \"45\")\n        elif(answerNumber == 6):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 7):\n            outcome = helper.CheckInput(answerNumber, \"aantalHoeken\")\n        elif(answerNumber == 8):\n            outcome = helper.CheckInput(answerNumber, \"4\")\n        elif(answerNumber == 9):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 10):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varA = -342\"))\n        elif(answerNumber == 11):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varB = 244\"))\n        elif(answerNumber == 12):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varC = 8942\"))\n        CheckOutcome(outcome, answerNumber, backupText)\n\ndef CheckOutcome(outcome, answerNumber, backupText):\n    if(outcome):\n        passed(\"Answer #\" + str(answerNumber) + \" is correct!\")\n    else:\n        failed(\"There is an error in answer #\"+ str(answerNumber)+\" \" + backupText)\n\nif __name__ == '__main__':\n    run_common_tests()\n    test_answer_placeholders()\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "Data overschrijven",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "emptyArray = []\n\nintegerArray = [1, 2, 3]\n\nstringArray = [\"1\", \"2\", \"3\"]\n\narrayOfArrays = [emptyArray, integerArray, stringArray]\n\nintegerArray[0] = integerArray[0] + 6\na = integerArray[0]\n#Variabele naam: a\n#Variabele waarde: 7\n#Variabele type: integer\n\nintegerArray[1] = integerArray[1] * 2\nb = integerArray[1]\n#Variabele naam: b\n#Variabele waarde: 4\n#Variabele type: integer\n\nstringArray[2] = stringArray[2] + stringArray[0]\nc = stringArray[2]\n#Variabele naam: c\n#Variabele waarde: \"31\"\n#Variabele type: string\n\nstringArray[0] = \"abc\"\nd = stringArray[0]\n#Variabele naam: d\n#Variabele waarde: \"abc\"\n#Variabele type: string\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom regex_helper import *\nfrom UserInputHelper import *\n\ndef test_answer_placeholders():\n    helper = Helper()\n    for answerNumber in range(len(helper.answers)):\n        outcome = False\n        backupText = \"\"\n        if(answerNumber == 0):\n            outcome = helper.CheckInput(answerNumber, \"x\")\n        elif(answerNumber == 1):\n            outcome = helper.CheckInput(answerNumber, \"235\")\n        elif(answerNumber == 2):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 3):\n            outcome = helper.CheckInput(answerNumber, \"stappenteller\")\n        elif(answerNumber == 4):\n            outcome = helper.CheckInput(answerNumber, \"0\")\n        elif(answerNumber == 5):\n            outcome = helper.CheckInput(answerNumber, \"45\")\n        elif(answerNumber == 6):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 7):\n            outcome = helper.CheckInput(answerNumber, \"aantalHoeken\")\n        elif(answerNumber == 8):\n            outcome = helper.CheckInput(answerNumber, \"4\")\n        elif(answerNumber == 9):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 10):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varA = -342\"))\n        elif(answerNumber == 11):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varB = 244\"))\n        elif(answerNumber == 12):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varC = 8942\"))\n        CheckOutcome(outcome, answerNumber, backupText)\n\ndef CheckOutcome(outcome, answerNumber, backupText):\n    if(outcome):\n        passed(\"Answer #\" + str(answerNumber) + \" is correct!\")\n    else:\n        failed(\"There is an error in answer #\"+ str(answerNumber)+\" \" + backupText)\n\nif __name__ == '__main__':\n    run_common_tests()\n    test_answer_placeholders()\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "Data toevoegen",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "emptyArray = []\n\nintegerArray = [1, 2, 3]\n\nstringArray = [\"1\", \"2\", \"3\"]\n\narrayOfArrays = [emptyArray, integerArray, stringArray]\n\nemptyArray.append(\"first\")\n#Variabele naam: emptyArray\n#Variabele waarde: [\"first\"]\n#Variabele type: array\n\nemptyArray.append(\"second\")\n#Variabele naam: emptyArray\n#Variabele waarde: [\"first\", \"second\"]\n#Variabele type: array\n\nintegerArray.append(1)\n#Variabele naam: integerArray\n#Variabele waarde: [1, 2, 3, 1]\n#Variabele type: array\n\nstringArray.append(\"4\")\n#Variabele naam: stringArray\n#Variabele waarde: [\"1\", \"2\", \"3\", \"4\"]\n#Variabele type: array\n\nintegerArray.append(13)\n#Variabele naam: integerArray\n#Variabele waarde: [1, 2, 3, 1, 13]\n#Variabele type: array\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom regex_helper import *\nfrom UserInputHelper import *\n\ndef test_answer_placeholders():\n    helper = Helper()\n    for answerNumber in range(len(helper.answers)):\n        outcome = False\n        backupText = \"\"\n        if(answerNumber == 0):\n            outcome = helper.CheckInput(answerNumber, \"x\")\n        elif(answerNumber == 1):\n            outcome = helper.CheckInput(answerNumber, \"235\")\n        elif(answerNumber == 2):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 3):\n            outcome = helper.CheckInput(answerNumber, \"stappenteller\")\n        elif(answerNumber == 4):\n            outcome = helper.CheckInput(answerNumber, \"0\")\n        elif(answerNumber == 5):\n            outcome = helper.CheckInput(answerNumber, \"45\")\n        elif(answerNumber == 6):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 7):\n            outcome = helper.CheckInput(answerNumber, \"aantalHoeken\")\n        elif(answerNumber == 8):\n            outcome = helper.CheckInput(answerNumber, \"4\")\n        elif(answerNumber == 9):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 10):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varA = -342\"))\n        elif(answerNumber == 11):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varB = 244\"))\n        elif(answerNumber == 12):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varC = 8942\"))\n        CheckOutcome(outcome, answerNumber, backupText)\n\ndef CheckOutcome(outcome, answerNumber, backupText):\n    if(outcome):\n        passed(\"Answer #\" + str(answerNumber) + \" is correct!\")\n    else:\n        failed(\"There is an error in answer #\"+ str(answerNumber)+\" \" + backupText)\n\nif __name__ == '__main__':\n    run_common_tests()\n    test_answer_placeholders()\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "Data verwijderen",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "emptyArray = []\n\nintegerArray = [1, 2, 3]\n\nstringArray = [\"1\", \"2\", \"3\"]\n\nintegerArray.remove(3)\n#Variabele naam: integerArray\n#Variabele waarde: [1, 2]\n#Variabele type: array\n\nintegerArray.remove(1)\n#Variabele naam: integerArray\n#Variabele waarde: [2]\n#Variabele type: array\n\nstringArray.remove(\"2\")\n#Variabele naam: stringArray\n#Variabele waarde: [\"1\", \"3\"]\n#Variabele type: array\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom regex_helper import *\nfrom UserInputHelper import *\n\ndef test_answer_placeholders():\n    helper = Helper()\n    for answerNumber in range(len(helper.answers)):\n        outcome = False\n        backupText = \"\"\n        if(answerNumber == 0):\n            outcome = helper.CheckInput(answerNumber, \"x\")\n        elif(answerNumber == 1):\n            outcome = helper.CheckInput(answerNumber, \"235\")\n        elif(answerNumber == 2):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 3):\n            outcome = helper.CheckInput(answerNumber, \"stappenteller\")\n        elif(answerNumber == 4):\n            outcome = helper.CheckInput(answerNumber, \"0\")\n        elif(answerNumber == 5):\n            outcome = helper.CheckInput(answerNumber, \"45\")\n        elif(answerNumber == 6):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 7):\n            outcome = helper.CheckInput(answerNumber, \"aantalHoeken\")\n        elif(answerNumber == 8):\n            outcome = helper.CheckInput(answerNumber, \"4\")\n        elif(answerNumber == 9):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 10):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varA = -342\"))\n        elif(answerNumber == 11):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varB = 244\"))\n        elif(answerNumber == 12):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varC = 8942\"))\n        CheckOutcome(outcome, answerNumber, backupText)\n\ndef CheckOutcome(outcome, answerNumber, backupText):\n    if(outcome):\n        passed(\"Answer #\" + str(answerNumber) + \" is correct!\")\n    else:\n        failed(\"There is an error in answer #\"+ str(answerNumber)+\" \" + backupText)\n\nif __name__ == '__main__':\n    run_common_tests()\n    test_answer_placeholders()\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        },
        {
          "title" : "Functies",
          "task_list" : [
            {
              "name" : "Input",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "userInput = input(\"Enter a number\")\n#Functie naam: input\n#Variabele naam: userInput\n#Variabele waarde: unknown\n#Variabele type: string\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom regex_helper import *\nfrom UserInputHelper import *\n\ndef test_answer_placeholders():\n    helper = Helper()\n    for answerNumber in range(len(helper.answers)):\n        outcome = False\n        backupText = \"\"\n        if(answerNumber == 0):\n            outcome = helper.CheckInput(answerNumber, \"x\")\n        elif(answerNumber == 1):\n            outcome = helper.CheckInput(answerNumber, \"235\")\n        elif(answerNumber == 2):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 3):\n            outcome = helper.CheckInput(answerNumber, \"stappenteller\")\n        elif(answerNumber == 4):\n            outcome = helper.CheckInput(answerNumber, \"0\")\n        elif(answerNumber == 5):\n            outcome = helper.CheckInput(answerNumber, \"45\")\n        elif(answerNumber == 6):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 7):\n            outcome = helper.CheckInput(answerNumber, \"aantalHoeken\")\n        elif(answerNumber == 8):\n            outcome = helper.CheckInput(answerNumber, \"4\")\n        elif(answerNumber == 9):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 10):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varA = -342\"))\n        elif(answerNumber == 11):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varB = 244\"))\n        elif(answerNumber == 12):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varC = 8942\"))\n        CheckOutcome(outcome, answerNumber, backupText)\n\ndef CheckOutcome(outcome, answerNumber, backupText):\n    if(outcome):\n        passed(\"Answer #\" + str(answerNumber) + \" is correct!\")\n    else:\n        failed(\"There is an error in answer #\"+ str(answerNumber)+\" \" + backupText)\n\nif __name__ == '__main__':\n    run_common_tests()\n    test_answer_placeholders()\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "Casting",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "string = \"123\"\ninteger = 123\n\nstring = int(string)\n#Functie naam: int\n#Functie input waarde: \"123\"\n#Variabele naam: string\n#Variabele waarde: 123\n#Variabele type: integer\n\ninteger = str(integer)\n#Functie naam: str\n#Functie input waarde: 123\n#Variabele naam: integer\n#Variabele waarde: \"123\"\n#Variabele type: string\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom regex_helper import *\nfrom UserInputHelper import *\n\ndef test_answer_placeholders():\n    helper = Helper()\n    for answerNumber in range(len(helper.answers)):\n        outcome = False\n        backupText = \"\"\n        if(answerNumber == 0):\n            outcome = helper.CheckInput(answerNumber, \"x\")\n        elif(answerNumber == 1):\n            outcome = helper.CheckInput(answerNumber, \"235\")\n        elif(answerNumber == 2):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 3):\n            outcome = helper.CheckInput(answerNumber, \"stappenteller\")\n        elif(answerNumber == 4):\n            outcome = helper.CheckInput(answerNumber, \"0\")\n        elif(answerNumber == 5):\n            outcome = helper.CheckInput(answerNumber, \"45\")\n        elif(answerNumber == 6):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 7):\n            outcome = helper.CheckInput(answerNumber, \"aantalHoeken\")\n        elif(answerNumber == 8):\n            outcome = helper.CheckInput(answerNumber, \"4\")\n        elif(answerNumber == 9):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 10):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varA = -342\"))\n        elif(answerNumber == 11):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varB = 244\"))\n        elif(answerNumber == 12):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varC = 8942\"))\n        CheckOutcome(outcome, answerNumber, backupText)\n\ndef CheckOutcome(outcome, answerNumber, backupText):\n    if(outcome):\n        passed(\"Answer #\" + str(answerNumber) + \" is correct!\")\n    else:\n        failed(\"There is an error in answer #\"+ str(answerNumber)+\" \" + backupText)\n\nif __name__ == '__main__':\n    run_common_tests()\n    test_answer_placeholders()\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "Print",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "# TODO: type solution here\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom regex_helper import *\nfrom UserInputHelper import *\n\ndef test_answer_placeholders():\n    helper = Helper()\n    for answerNumber in range(len(helper.answers)):\n        outcome = False\n        backupText = \"\"\n        if(answerNumber == 0):\n            outcome = helper.CheckInput(answerNumber, \"x\")\n        elif(answerNumber == 1):\n            outcome = helper.CheckInput(answerNumber, \"235\")\n        elif(answerNumber == 2):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 3):\n            outcome = helper.CheckInput(answerNumber, \"stappenteller\")\n        elif(answerNumber == 4):\n            outcome = helper.CheckInput(answerNumber, \"0\")\n        elif(answerNumber == 5):\n            outcome = helper.CheckInput(answerNumber, \"45\")\n        elif(answerNumber == 6):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 7):\n            outcome = helper.CheckInput(answerNumber, \"aantalHoeken\")\n        elif(answerNumber == 8):\n            outcome = helper.CheckInput(answerNumber, \"4\")\n        elif(answerNumber == 9):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 10):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varA = -342\"))\n        elif(answerNumber == 11):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varB = 244\"))\n        elif(answerNumber == 12):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varC = 8942\"))\n        CheckOutcome(outcome, answerNumber, backupText)\n\ndef CheckOutcome(outcome, answerNumber, backupText):\n    if(outcome):\n        passed(\"Answer #\" + str(answerNumber) + \" is correct!\")\n    else:\n        failed(\"There is an error in answer #\"+ str(answerNumber)+\" \" + backupText)\n\nif __name__ == '__main__':\n    run_common_tests()\n    test_answer_placeholders()\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "Len",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "array1 = [1, 2, 3]\narray2 = [\"ab\", \"bcd\", \"efgh\"]\n\n#Task 1\narray1Len = len(array1)\nprint(array1Len)\n\narray2Len = len(array2)\nprint(array1Len)\n\n#Task 2\narray2Index0Len = len(array2[0])\nprint(array2Index0Len)\narray2Index2Len = len(array2[2])\nprint(array2Index2Len)\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom regex_helper import *\nfrom UserInputHelper import *\n\ndef test_answer_placeholders():\n    helper = Helper()\n    for answerNumber in range(len(helper.answers)):\n        outcome = False\n        backupText = \"\"\n        if(answerNumber == 0):\n            outcome = helper.CheckInput(answerNumber, \"x\")\n        elif(answerNumber == 1):\n            outcome = helper.CheckInput(answerNumber, \"235\")\n        elif(answerNumber == 2):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 3):\n            outcome = helper.CheckInput(answerNumber, \"stappenteller\")\n        elif(answerNumber == 4):\n            outcome = helper.CheckInput(answerNumber, \"0\")\n        elif(answerNumber == 5):\n            outcome = helper.CheckInput(answerNumber, \"45\")\n        elif(answerNumber == 6):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 7):\n            outcome = helper.CheckInput(answerNumber, \"aantalHoeken\")\n        elif(answerNumber == 8):\n            outcome = helper.CheckInput(answerNumber, \"4\")\n        elif(answerNumber == 9):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 10):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varA = -342\"))\n        elif(answerNumber == 11):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varB = 244\"))\n        elif(answerNumber == 12):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varC = 8942\"))\n        CheckOutcome(outcome, answerNumber, backupText)\n\ndef CheckOutcome(outcome, answerNumber, backupText):\n    if(outcome):\n        passed(\"Answer #\" + str(answerNumber) + \" is correct!\")\n    else:\n        failed(\"There is an error in answer #\"+ str(answerNumber)+\" \" + backupText)\n\nif __name__ == '__main__':\n    run_common_tests()\n    test_answer_placeholders()\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "Range",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "conditionVariable = 0\n\nwhile(conditionVariable <= 4):\n    print(conditionVariable)\n    conditionVariable = conditionVariable + 1\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom regex_helper import *\nfrom UserInputHelper import *\n\ndef test_answer_placeholders():\n    helper = Helper()\n    for answerNumber in range(len(helper.answers)):\n        outcome = False\n        backupText = \"\"\n        if(answerNumber == 0):\n            outcome = helper.CheckInput(answerNumber, \"x\")\n        elif(answerNumber == 1):\n            outcome = helper.CheckInput(answerNumber, \"235\")\n        elif(answerNumber == 2):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 3):\n            outcome = helper.CheckInput(answerNumber, \"stappenteller\")\n        elif(answerNumber == 4):\n            outcome = helper.CheckInput(answerNumber, \"0\")\n        elif(answerNumber == 5):\n            outcome = helper.CheckInput(answerNumber, \"45\")\n        elif(answerNumber == 6):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 7):\n            outcome = helper.CheckInput(answerNumber, \"aantalHoeken\")\n        elif(answerNumber == 8):\n            outcome = helper.CheckInput(answerNumber, \"4\")\n        elif(answerNumber == 9):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 10):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varA = -342\"))\n        elif(answerNumber == 11):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varB = 244\"))\n        elif(answerNumber == 12):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varC = 8942\"))\n        CheckOutcome(outcome, answerNumber, backupText)\n\ndef CheckOutcome(outcome, answerNumber, backupText):\n    if(outcome):\n        passed(\"Answer #\" + str(answerNumber) + \" is correct!\")\n    else:\n        failed(\"There is an error in answer #\"+ str(answerNumber)+\" \" + backupText)\n\nif __name__ == '__main__':\n    run_common_tests()\n    test_answer_placeholders()\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "Extra - Try Except",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "intInput = input(\"Enter a number:\\n\")\n\ntry:\n    intInput = int(intInput)\nexcept:\n    print(\"Please enter a number... try it once more...\")\n    intInput = int(input(\"Enter a number:\\n\"))\n\nprint(intInput)\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom regex_helper import *\nfrom UserInputHelper import *\n\ndef test_answer_placeholders():\n    helper = Helper()\n    for answerNumber in range(len(helper.answers)):\n        outcome = False\n        backupText = \"\"\n        if(answerNumber == 0):\n            outcome = helper.CheckInput(answerNumber, \"x\")\n        elif(answerNumber == 1):\n            outcome = helper.CheckInput(answerNumber, \"235\")\n        elif(answerNumber == 2):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 3):\n            outcome = helper.CheckInput(answerNumber, \"stappenteller\")\n        elif(answerNumber == 4):\n            outcome = helper.CheckInput(answerNumber, \"0\")\n        elif(answerNumber == 5):\n            outcome = helper.CheckInput(answerNumber, \"45\")\n        elif(answerNumber == 6):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 7):\n            outcome = helper.CheckInput(answerNumber, \"aantalHoeken\")\n        elif(answerNumber == 8):\n            outcome = helper.CheckInput(answerNumber, \"4\")\n        elif(answerNumber == 9):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 10):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varA = -342\"))\n        elif(answerNumber == 11):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varB = 244\"))\n        elif(answerNumber == 12):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varC = 8942\"))\n        CheckOutcome(outcome, answerNumber, backupText)\n\ndef CheckOutcome(outcome, answerNumber, backupText):\n    if(outcome):\n        passed(\"Answer #\" + str(answerNumber) + \" is correct!\")\n    else:\n        failed(\"There is an error in answer #\"+ str(answerNumber)+\" \" + backupText)\n\nif __name__ == '__main__':\n    run_common_tests()\n    test_answer_placeholders()\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        },
        {
          "title" : "Opdrachten",
          "task_list" : [
            {
              "name" : "Totale leeftijd",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "persons = [[\"p1\", 19], [\"p2\", 18], [\"p3\", 22], [\"p4\", 21]]\n\nperson1Age = persons[0][1]\nperson3Name = persons[2][0]\n\nprint(\"person 1: \" + persons[0][0] +\" with age: \" + str(person1Age))\nprint(\"person 2: \" + persons[1][0] +\" with age: \" + str(persons[1][1]))\nprint(\"person 3: \" + person3Name +\" with age: \" + str(persons[2][1]))\nprint(\"person 4: \" + persons[3][0] +\" with age: \" + str(persons[3][1]))\n\nprint(\"The combined age of all persons is: \" + str(persons[0][1] + persons[1][1] + persons[2][1] + persons[3][1]))\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom regex_helper import *\nfrom UserInputHelper import *\n\ndef test_answer_placeholders():\n    helper = Helper()\n    for answerNumber in range(len(helper.answers)):\n        outcome = False\n        backupText = \"\"\n        if(answerNumber == 0):\n            outcome = helper.CheckInput(answerNumber, \"x\")\n        elif(answerNumber == 1):\n            outcome = helper.CheckInput(answerNumber, \"235\")\n        elif(answerNumber == 2):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 3):\n            outcome = helper.CheckInput(answerNumber, \"stappenteller\")\n        elif(answerNumber == 4):\n            outcome = helper.CheckInput(answerNumber, \"0\")\n        elif(answerNumber == 5):\n            outcome = helper.CheckInput(answerNumber, \"45\")\n        elif(answerNumber == 6):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 7):\n            outcome = helper.CheckInput(answerNumber, \"aantalHoeken\")\n        elif(answerNumber == 8):\n            outcome = helper.CheckInput(answerNumber, \"4\")\n        elif(answerNumber == 9):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 10):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varA = -342\"))\n        elif(answerNumber == 11):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varB = 244\"))\n        elif(answerNumber == 12):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varC = 8942\"))\n        CheckOutcome(outcome, answerNumber, backupText)\n\ndef CheckOutcome(outcome, answerNumber, backupText):\n    if(outcome):\n        passed(\"Answer #\" + str(answerNumber) + \" is correct!\")\n    else:\n        failed(\"There is an error in answer #\"+ str(answerNumber)+\" \" + backupText)\n\nif __name__ == '__main__':\n    run_common_tests()\n    test_answer_placeholders()\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "Cash register",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "products = [[\"Apple\", 2], [\"Bread\", 1], [\"Melon\", 3]]\namounts = [0, 0, 0]\n\namounts[0] = int(input(\"How much \"+products[0][0]+ \" would you like?\\n\"))\namounts[1] = int(input(\"How much \"+products[1][0]+ \" would you like?\\n\"))\namounts[2] = int(input(\"How much \"+products[0][0]+ \" would you like?\\n\"))\n\ntotal = products[0][1] * amounts[0] + products[1][1] * amounts[1] + products[2][1] * amounts[2]\n\nprint(\"You have to pay: \"+ str(total))\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom regex_helper import *\nfrom UserInputHelper import *\n\ndef test_answer_placeholders():\n    helper = Helper()\n    for answerNumber in range(len(helper.answers)):\n        outcome = False\n        backupText = \"\"\n        if(answerNumber == 0):\n            outcome = helper.CheckInput(answerNumber, \"x\")\n        elif(answerNumber == 1):\n            outcome = helper.CheckInput(answerNumber, \"235\")\n        elif(answerNumber == 2):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 3):\n            outcome = helper.CheckInput(answerNumber, \"stappenteller\")\n        elif(answerNumber == 4):\n            outcome = helper.CheckInput(answerNumber, \"0\")\n        elif(answerNumber == 5):\n            outcome = helper.CheckInput(answerNumber, \"45\")\n        elif(answerNumber == 6):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 7):\n            outcome = helper.CheckInput(answerNumber, \"aantalHoeken\")\n        elif(answerNumber == 8):\n            outcome = helper.CheckInput(answerNumber, \"4\")\n        elif(answerNumber == 9):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 10):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varA = -342\"))\n        elif(answerNumber == 11):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varB = 244\"))\n        elif(answerNumber == 12):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varC = 8942\"))\n        CheckOutcome(outcome, answerNumber, backupText)\n\ndef CheckOutcome(outcome, answerNumber, backupText):\n    if(outcome):\n        passed(\"Answer #\" + str(answerNumber) + \" is correct!\")\n    else:\n        failed(\"There is an error in answer #\"+ str(answerNumber)+\" \" + backupText)\n\nif __name__ == '__main__':\n    run_common_tests()\n    test_answer_placeholders()\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        }
      ],
      "type" : "section"
    },
    {
      "title" : "Week 5 - While loops",
      "items" : [
        {
          "title" : "While loops",
          "task_list" : [
            {
              "name" : "Structuur #1",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "conditionVariable = 0\n\nwhile(conditionVariable <= 4):\n    print(conditionVariable)\n    conditionVariable = conditionVariable + 1\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom regex_helper import *\nfrom UserInputHelper import *\n\ndef test_answer_placeholders():\n    helper = Helper()\n    for answerNumber in range(len(helper.answers)):\n        outcome = False\n        backupText = \"\"\n        if(answerNumber == 0):\n            outcome = helper.CheckInput(answerNumber, \"x\")\n        elif(answerNumber == 1):\n            outcome = helper.CheckInput(answerNumber, \"235\")\n        elif(answerNumber == 2):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 3):\n            outcome = helper.CheckInput(answerNumber, \"stappenteller\")\n        elif(answerNumber == 4):\n            outcome = helper.CheckInput(answerNumber, \"0\")\n        elif(answerNumber == 5):\n            outcome = helper.CheckInput(answerNumber, \"45\")\n        elif(answerNumber == 6):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 7):\n            outcome = helper.CheckInput(answerNumber, \"aantalHoeken\")\n        elif(answerNumber == 8):\n            outcome = helper.CheckInput(answerNumber, \"4\")\n        elif(answerNumber == 9):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 10):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varA = -342\"))\n        elif(answerNumber == 11):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varB = 244\"))\n        elif(answerNumber == 12):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varC = 8942\"))\n        CheckOutcome(outcome, answerNumber, backupText)\n\ndef CheckOutcome(outcome, answerNumber, backupText):\n    if(outcome):\n        passed(\"Answer #\" + str(answerNumber) + \" is correct!\")\n    else:\n        failed(\"There is an error in answer #\"+ str(answerNumber)+\" \" + backupText)\n\nif __name__ == '__main__':\n    run_common_tests()\n    test_answer_placeholders()\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "Structuur #2",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "condition = True\ncounter = 0\n\nwhile(condition):\n    if(counter <= 4):\n        print(counter)\n        counter = counter + 1\n    else:\n        condition = False\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom regex_helper import *\nfrom UserInputHelper import *\n\ndef test_answer_placeholders():\n    helper = Helper()\n    for answerNumber in range(len(helper.answers)):\n        outcome = False\n        backupText = \"\"\n        if(answerNumber == 0):\n            outcome = helper.CheckInput(answerNumber, \"x\")\n        elif(answerNumber == 1):\n            outcome = helper.CheckInput(answerNumber, \"235\")\n        elif(answerNumber == 2):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 3):\n            outcome = helper.CheckInput(answerNumber, \"stappenteller\")\n        elif(answerNumber == 4):\n            outcome = helper.CheckInput(answerNumber, \"0\")\n        elif(answerNumber == 5):\n            outcome = helper.CheckInput(answerNumber, \"45\")\n        elif(answerNumber == 6):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 7):\n            outcome = helper.CheckInput(answerNumber, \"aantalHoeken\")\n        elif(answerNumber == 8):\n            outcome = helper.CheckInput(answerNumber, \"4\")\n        elif(answerNumber == 9):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 10):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varA = -342\"))\n        elif(answerNumber == 11):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varB = 244\"))\n        elif(answerNumber == 12):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varC = 8942\"))\n        CheckOutcome(outcome, answerNumber, backupText)\n\ndef CheckOutcome(outcome, answerNumber, backupText):\n    if(outcome):\n        passed(\"Answer #\" + str(answerNumber) + \" is correct!\")\n    else:\n        failed(\"There is an error in answer #\"+ str(answerNumber)+\" \" + backupText)\n\nif __name__ == '__main__':\n    run_common_tests()\n    test_answer_placeholders()\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "Structuur #3",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : ""
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom regex_helper import *\nfrom UserInputHelper import *\n\ndef test_answer_placeholders():\n    helper = Helper()\n    for answerNumber in range(len(helper.answers)):\n        outcome = False\n        backupText = \"\"\n        if(answerNumber == 0):\n            outcome = helper.CheckInput(answerNumber, \"x\")\n        elif(answerNumber == 1):\n            outcome = helper.CheckInput(answerNumber, \"235\")\n        elif(answerNumber == 2):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 3):\n            outcome = helper.CheckInput(answerNumber, \"stappenteller\")\n        elif(answerNumber == 4):\n            outcome = helper.CheckInput(answerNumber, \"0\")\n        elif(answerNumber == 5):\n            outcome = helper.CheckInput(answerNumber, \"45\")\n        elif(answerNumber == 6):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 7):\n            outcome = helper.CheckInput(answerNumber, \"aantalHoeken\")\n        elif(answerNumber == 8):\n            outcome = helper.CheckInput(answerNumber, \"4\")\n        elif(answerNumber == 9):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 10):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varA = -342\"))\n        elif(answerNumber == 11):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varB = 244\"))\n        elif(answerNumber == 12):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varC = 8942\"))\n        CheckOutcome(outcome, answerNumber, backupText)\n\ndef CheckOutcome(outcome, answerNumber, backupText):\n    if(outcome):\n        passed(\"Answer #\" + str(answerNumber) + \" is correct!\")\n    else:\n        failed(\"There is an error in answer #\"+ str(answerNumber)+\" \" + backupText)\n\nif __name__ == '__main__':\n    run_common_tests()\n    test_answer_placeholders()\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "Tellen",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "#Task 1\nconditionVariable1 = 0\n\nwhile(conditionVariable1 < 10):\n    print(conditionVariable1 + 1)\n    conditionVariable1 = conditionVariable1 + 1\n\n#Task 2\nconditionVariable2 = 10\n\nwhile(conditionVariable2>-1):\n    conditionVariable2 = conditionVariable2 - 1\n\n#Task 3\nconditionVariable3 = len(\"aString\")\nwhile(conditionVariable3>=0):\n    conditionVariable3 =conditionVariable3 - 1\n\n#Task 4\narray=[4, 7, 123, 556]\nconditionVariable4 = 0\n\nwhile(conditionVariable4 < len(array)):\n    print(conditionVariable4)\n    conditionVariable4 = conditionVariable4 + 1\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom regex_helper import *\nfrom UserInputHelper import *\n\ndef test_answer_placeholders():\n    helper = Helper()\n    for answerNumber in range(len(helper.answers)):\n        outcome = False\n        backupText = \"\"\n        if(answerNumber == 0):\n            outcome = helper.CheckInput(answerNumber, \"x\")\n        elif(answerNumber == 1):\n            outcome = helper.CheckInput(answerNumber, \"235\")\n        elif(answerNumber == 2):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 3):\n            outcome = helper.CheckInput(answerNumber, \"stappenteller\")\n        elif(answerNumber == 4):\n            outcome = helper.CheckInput(answerNumber, \"0\")\n        elif(answerNumber == 5):\n            outcome = helper.CheckInput(answerNumber, \"45\")\n        elif(answerNumber == 6):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 7):\n            outcome = helper.CheckInput(answerNumber, \"aantalHoeken\")\n        elif(answerNumber == 8):\n            outcome = helper.CheckInput(answerNumber, \"4\")\n        elif(answerNumber == 9):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 10):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varA = -342\"))\n        elif(answerNumber == 11):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varB = 244\"))\n        elif(answerNumber == 12):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varC = 8942\"))\n        CheckOutcome(outcome, answerNumber, backupText)\n\ndef CheckOutcome(outcome, answerNumber, backupText):\n    if(outcome):\n        passed(\"Answer #\" + str(answerNumber) + \" is correct!\")\n    else:\n        failed(\"There is an error in answer #\"+ str(answerNumber)+\" \" + backupText)\n\nif __name__ == '__main__':\n    run_common_tests()\n    test_answer_placeholders()\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "Iteraties over indexen",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "array1 = [23, 62, 94]\narray2 = [55, 45, 7]\n\n#Task 1\nindex = 0\n\nwhile(index < len(array1)):\n    print(array1[index])\n    index = index + 1\n\n#Task 2\nindex = len(array1) - 1\n\nwhile(index>=0):\n    print(array1[index])\n    index = index - 1\n\n#Task 3\nif(len(array1) == len(array2)):\n    index = 0\n    while(index < len(array2)):\n        array2[index] = array1[index] + array2[index]\n        index = index + 1\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom regex_helper import *\nfrom UserInputHelper import *\n\ndef test_answer_placeholders():\n    helper = Helper()\n    for answerNumber in range(len(helper.answers)):\n        outcome = False\n        backupText = \"\"\n        if(answerNumber == 0):\n            outcome = helper.CheckInput(answerNumber, \"x\")\n        elif(answerNumber == 1):\n            outcome = helper.CheckInput(answerNumber, \"235\")\n        elif(answerNumber == 2):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 3):\n            outcome = helper.CheckInput(answerNumber, \"stappenteller\")\n        elif(answerNumber == 4):\n            outcome = helper.CheckInput(answerNumber, \"0\")\n        elif(answerNumber == 5):\n            outcome = helper.CheckInput(answerNumber, \"45\")\n        elif(answerNumber == 6):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 7):\n            outcome = helper.CheckInput(answerNumber, \"aantalHoeken\")\n        elif(answerNumber == 8):\n            outcome = helper.CheckInput(answerNumber, \"4\")\n        elif(answerNumber == 9):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 10):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varA = -342\"))\n        elif(answerNumber == 11):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varB = 244\"))\n        elif(answerNumber == 12):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varC = 8942\"))\n        CheckOutcome(outcome, answerNumber, backupText)\n\ndef CheckOutcome(outcome, answerNumber, backupText):\n    if(outcome):\n        passed(\"Answer #\" + str(answerNumber) + \" is correct!\")\n    else:\n        failed(\"There is an error in answer #\"+ str(answerNumber)+\" \" + backupText)\n\nif __name__ == '__main__':\n    run_common_tests()\n    test_answer_placeholders()\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        },
        {
          "title" : "Opdrachten",
          "task_list" : [
            {
              "name" : "Programma loop",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "def programLoop():\n    active = True\n    while(active):\n        print(\"Doing stuff\")\n        userInput = input(\"Do you want to continue? [y/n]\\n\")\n        if(userInput == \"n\"):\n            print(\"quiting\")\n            active = False\n        elif(userInput == \"y\"):\n            print(\"continueing\")\n            continue\n        else:\n            print(\"Please enter \\\"y\\\" or \\\"n\\\"\")\n\nprogramLoop()\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom regex_helper import *\nfrom UserInputHelper import *\n\ndef test_answer_placeholders():\n    helper = Helper()\n    for answerNumber in range(len(helper.answers)):\n        outcome = False\n        backupText = \"\"\n        if(answerNumber == 0):\n            outcome = helper.CheckInput(answerNumber, \"x\")\n        elif(answerNumber == 1):\n            outcome = helper.CheckInput(answerNumber, \"235\")\n        elif(answerNumber == 2):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 3):\n            outcome = helper.CheckInput(answerNumber, \"stappenteller\")\n        elif(answerNumber == 4):\n            outcome = helper.CheckInput(answerNumber, \"0\")\n        elif(answerNumber == 5):\n            outcome = helper.CheckInput(answerNumber, \"45\")\n        elif(answerNumber == 6):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 7):\n            outcome = helper.CheckInput(answerNumber, \"aantalHoeken\")\n        elif(answerNumber == 8):\n            outcome = helper.CheckInput(answerNumber, \"4\")\n        elif(answerNumber == 9):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 10):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varA = -342\"))\n        elif(answerNumber == 11):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varB = 244\"))\n        elif(answerNumber == 12):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varC = 8942\"))\n        CheckOutcome(outcome, answerNumber, backupText)\n\ndef CheckOutcome(outcome, answerNumber, backupText):\n    if(outcome):\n        passed(\"Answer #\" + str(answerNumber) + \" is correct!\")\n    else:\n        failed(\"There is an error in answer #\"+ str(answerNumber)+\" \" + backupText)\n\nif __name__ == '__main__':\n    run_common_tests()\n    test_answer_placeholders()\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "Kassa #2",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "# TODO: type solution here\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom regex_helper import *\nfrom UserInputHelper import *\n\ndef test_answer_placeholders():\n    helper = Helper()\n    for answerNumber in range(len(helper.answers)):\n        outcome = False\n        backupText = \"\"\n        if(answerNumber == 0):\n            outcome = helper.CheckInput(answerNumber, \"x\")\n        elif(answerNumber == 1):\n            outcome = helper.CheckInput(answerNumber, \"235\")\n        elif(answerNumber == 2):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 3):\n            outcome = helper.CheckInput(answerNumber, \"stappenteller\")\n        elif(answerNumber == 4):\n            outcome = helper.CheckInput(answerNumber, \"0\")\n        elif(answerNumber == 5):\n            outcome = helper.CheckInput(answerNumber, \"45\")\n        elif(answerNumber == 6):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 7):\n            outcome = helper.CheckInput(answerNumber, \"aantalHoeken\")\n        elif(answerNumber == 8):\n            outcome = helper.CheckInput(answerNumber, \"4\")\n        elif(answerNumber == 9):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 10):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varA = -342\"))\n        elif(answerNumber == 11):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varB = 244\"))\n        elif(answerNumber == 12):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varC = 8942\"))\n        CheckOutcome(outcome, answerNumber, backupText)\n\ndef CheckOutcome(outcome, answerNumber, backupText):\n    if(outcome):\n        passed(\"Answer #\" + str(answerNumber) + \" is correct!\")\n    else:\n        failed(\"There is an error in answer #\"+ str(answerNumber)+\" \" + backupText)\n\nif __name__ == '__main__':\n    run_common_tests()\n    test_answer_placeholders()\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "Tellen #2",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "#Task 1\n#Amount of iterations:  10\nconditionVar1 = 0\n\nwhile(conditionVar1 < 5):\n    conditionVar1 = conditionVar1 + 0.5\n\n#Task 2\n\n#Amount of iterations:  5\nconditionVar2 = 10\n\nwhile(conditionVar2 >= 0):\n    conditionVar2 = conditionVar2 - 2\n\n#Task 3\n#Amount of iterations:  50\nconditionVar3 = 100\n\nwhile(conditionVar3 != 50):\n    if(conditionVar3>50):\n        conditionVar3 = conditionVar3 - 1\n    else:\n        conditionVar3 = conditionVar3 + 1\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom regex_helper import *\nfrom UserInputHelper import *\n\ndef test_answer_placeholders():\n    helper = Helper()\n    for answerNumber in range(len(helper.answers)):\n        outcome = False\n        backupText = \"\"\n        if(answerNumber == 0):\n            outcome = helper.CheckInput(answerNumber, \"x\")\n        elif(answerNumber == 1):\n            outcome = helper.CheckInput(answerNumber, \"235\")\n        elif(answerNumber == 2):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 3):\n            outcome = helper.CheckInput(answerNumber, \"stappenteller\")\n        elif(answerNumber == 4):\n            outcome = helper.CheckInput(answerNumber, \"0\")\n        elif(answerNumber == 5):\n            outcome = helper.CheckInput(answerNumber, \"45\")\n        elif(answerNumber == 6):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 7):\n            outcome = helper.CheckInput(answerNumber, \"aantalHoeken\")\n        elif(answerNumber == 8):\n            outcome = helper.CheckInput(answerNumber, \"4\")\n        elif(answerNumber == 9):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 10):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varA = -342\"))\n        elif(answerNumber == 11):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varB = 244\"))\n        elif(answerNumber == 12):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varC = 8942\"))\n        CheckOutcome(outcome, answerNumber, backupText)\n\ndef CheckOutcome(outcome, answerNumber, backupText):\n    if(outcome):\n        passed(\"Answer #\" + str(answerNumber) + \" is correct!\")\n    else:\n        failed(\"There is an error in answer #\"+ str(answerNumber)+\" \" + backupText)\n\nif __name__ == '__main__':\n    run_common_tests()\n    test_answer_placeholders()\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        }
      ],
      "type" : "section"
    },
    {
      "title" : "Week 6 - For loops",
      "items" : [
        {
          "title" : "For loops",
          "task_list" : [
            {
              "name" : "Structuur #1",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "# TODO: type solution here\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom regex_helper import *\nfrom UserInputHelper import *\n\ndef test_answer_placeholders():\n    helper = Helper()\n    for answerNumber in range(len(helper.answers)):\n        outcome = False\n        backupText = \"\"\n        if(answerNumber == 0):\n            outcome = helper.CheckInput(answerNumber, \"x\")\n        elif(answerNumber == 1):\n            outcome = helper.CheckInput(answerNumber, \"235\")\n        elif(answerNumber == 2):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 3):\n            outcome = helper.CheckInput(answerNumber, \"stappenteller\")\n        elif(answerNumber == 4):\n            outcome = helper.CheckInput(answerNumber, \"0\")\n        elif(answerNumber == 5):\n            outcome = helper.CheckInput(answerNumber, \"45\")\n        elif(answerNumber == 6):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 7):\n            outcome = helper.CheckInput(answerNumber, \"aantalHoeken\")\n        elif(answerNumber == 8):\n            outcome = helper.CheckInput(answerNumber, \"4\")\n        elif(answerNumber == 9):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 10):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varA = -342\"))\n        elif(answerNumber == 11):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varB = 244\"))\n        elif(answerNumber == 12):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varC = 8942\"))\n        CheckOutcome(outcome, answerNumber, backupText)\n\ndef CheckOutcome(outcome, answerNumber, backupText):\n    if(outcome):\n        passed(\"Answer #\" + str(answerNumber) + \" is correct!\")\n    else:\n        failed(\"There is an error in answer #\"+ str(answerNumber)+\" \" + backupText)\n\nif __name__ == '__main__':\n    run_common_tests()\n    test_answer_placeholders()\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "Structuur #2",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "# TODO: type solution here\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom regex_helper import *\nfrom UserInputHelper import *\n\ndef test_answer_placeholders():\n    helper = Helper()\n    for answerNumber in range(len(helper.answers)):\n        outcome = False\n        backupText = \"\"\n        if(answerNumber == 0):\n            outcome = helper.CheckInput(answerNumber, \"x\")\n        elif(answerNumber == 1):\n            outcome = helper.CheckInput(answerNumber, \"235\")\n        elif(answerNumber == 2):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 3):\n            outcome = helper.CheckInput(answerNumber, \"stappenteller\")\n        elif(answerNumber == 4):\n            outcome = helper.CheckInput(answerNumber, \"0\")\n        elif(answerNumber == 5):\n            outcome = helper.CheckInput(answerNumber, \"45\")\n        elif(answerNumber == 6):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 7):\n            outcome = helper.CheckInput(answerNumber, \"aantalHoeken\")\n        elif(answerNumber == 8):\n            outcome = helper.CheckInput(answerNumber, \"4\")\n        elif(answerNumber == 9):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 10):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varA = -342\"))\n        elif(answerNumber == 11):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varB = 244\"))\n        elif(answerNumber == 12):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varC = 8942\"))\n        CheckOutcome(outcome, answerNumber, backupText)\n\ndef CheckOutcome(outcome, answerNumber, backupText):\n    if(outcome):\n        passed(\"Answer #\" + str(answerNumber) + \" is correct!\")\n    else:\n        failed(\"There is an error in answer #\"+ str(answerNumber)+\" \" + backupText)\n\nif __name__ == '__main__':\n    run_common_tests()\n    test_answer_placeholders()\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "Structuur #3",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "# TODO: type solution here\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom regex_helper import *\nfrom UserInputHelper import *\n\ndef test_answer_placeholders():\n    helper = Helper()\n    for answerNumber in range(len(helper.answers)):\n        outcome = False\n        backupText = \"\"\n        if(answerNumber == 0):\n            outcome = helper.CheckInput(answerNumber, \"x\")\n        elif(answerNumber == 1):\n            outcome = helper.CheckInput(answerNumber, \"235\")\n        elif(answerNumber == 2):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 3):\n            outcome = helper.CheckInput(answerNumber, \"stappenteller\")\n        elif(answerNumber == 4):\n            outcome = helper.CheckInput(answerNumber, \"0\")\n        elif(answerNumber == 5):\n            outcome = helper.CheckInput(answerNumber, \"45\")\n        elif(answerNumber == 6):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 7):\n            outcome = helper.CheckInput(answerNumber, \"aantalHoeken\")\n        elif(answerNumber == 8):\n            outcome = helper.CheckInput(answerNumber, \"4\")\n        elif(answerNumber == 9):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 10):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varA = -342\"))\n        elif(answerNumber == 11):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varB = 244\"))\n        elif(answerNumber == 12):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varC = 8942\"))\n        CheckOutcome(outcome, answerNumber, backupText)\n\ndef CheckOutcome(outcome, answerNumber, backupText):\n    if(outcome):\n        passed(\"Answer #\" + str(answerNumber) + \" is correct!\")\n    else:\n        failed(\"There is an error in answer #\"+ str(answerNumber)+\" \" + backupText)\n\nif __name__ == '__main__':\n    run_common_tests()\n    test_answer_placeholders()\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "For loop variabele",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "#Task 1\narray1 = [1, 2, 3, 4, 5]\n\nfor element in array1:\n    print(element)\n\n#Task 2\nstring1 = \"abcd\"\n\nreturnString = \"\"\nfor symbol in string1:\n    if(len(returnString)<3):\n        returnString = returnString + symbol\n\n#Task 3\narray2 = [True, False, True, True, True, False, False, True]\ncounter = 0\nfor boolean in array2:\n    if(not(boolean)):\n        counter = counter + 1\nprint(str(counter) + \" Falses counted\")\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom regex_helper import *\nfrom UserInputHelper import *\n\ndef test_answer_placeholders():\n    helper = Helper()\n    for answerNumber in range(len(helper.answers)):\n        outcome = False\n        backupText = \"\"\n        if(answerNumber == 0):\n            outcome = helper.CheckInput(answerNumber, \"x\")\n        elif(answerNumber == 1):\n            outcome = helper.CheckInput(answerNumber, \"235\")\n        elif(answerNumber == 2):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 3):\n            outcome = helper.CheckInput(answerNumber, \"stappenteller\")\n        elif(answerNumber == 4):\n            outcome = helper.CheckInput(answerNumber, \"0\")\n        elif(answerNumber == 5):\n            outcome = helper.CheckInput(answerNumber, \"45\")\n        elif(answerNumber == 6):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 7):\n            outcome = helper.CheckInput(answerNumber, \"aantalHoeken\")\n        elif(answerNumber == 8):\n            outcome = helper.CheckInput(answerNumber, \"4\")\n        elif(answerNumber == 9):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 10):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varA = -342\"))\n        elif(answerNumber == 11):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varB = 244\"))\n        elif(answerNumber == 12):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varC = 8942\"))\n        CheckOutcome(outcome, answerNumber, backupText)\n\ndef CheckOutcome(outcome, answerNumber, backupText):\n    if(outcome):\n        passed(\"Answer #\" + str(answerNumber) + \" is correct!\")\n    else:\n        failed(\"There is an error in answer #\"+ str(answerNumber)+\" \" + backupText)\n\nif __name__ == '__main__':\n    run_common_tests()\n    test_answer_placeholders()\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "For element in array",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "players = []\n\nplayers.append([\"p1\", 27])\nplayers.append([\"p2\", 43])\nplayers.append([\"p3\", 72])\nplayers.append([\"p4\", 12])\nplayers.append([\"p5\", 22])\nplayers.append([\"p6\", 61])\n\nloser =players[0]\n\nfor i in (range(len(players))):\n    points = players[i][1]\n    if(loser[1] > points):\n        loser = players[i]\n\nwinner = players[0]\n\nfor player in players:\n    points = player[1]\n    if(winner[1] < points):\n        winner = player\n\nprint(winner[0] + \" is the winner with \" + str(winner[1]) + \" points!\")\nprint(loser[0] + \" is the loser with \" + str(loser[1]) + \" points...\")\n\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom regex_helper import *\nfrom UserInputHelper import *\n\ndef test_answer_placeholders():\n    helper = Helper()\n    for answerNumber in range(len(helper.answers)):\n        outcome = False\n        backupText = \"\"\n        if(answerNumber == 0):\n            outcome = helper.CheckInput(answerNumber, \"x\")\n        elif(answerNumber == 1):\n            outcome = helper.CheckInput(answerNumber, \"235\")\n        elif(answerNumber == 2):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 3):\n            outcome = helper.CheckInput(answerNumber, \"stappenteller\")\n        elif(answerNumber == 4):\n            outcome = helper.CheckInput(answerNumber, \"0\")\n        elif(answerNumber == 5):\n            outcome = helper.CheckInput(answerNumber, \"45\")\n        elif(answerNumber == 6):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 7):\n            outcome = helper.CheckInput(answerNumber, \"aantalHoeken\")\n        elif(answerNumber == 8):\n            outcome = helper.CheckInput(answerNumber, \"4\")\n        elif(answerNumber == 9):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 10):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varA = -342\"))\n        elif(answerNumber == 11):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varB = 244\"))\n        elif(answerNumber == 12):\n            outcome = helper.CheckInput(answerNumber, helper.re.expressionToRegex(\"varC = 8942\"))\n        CheckOutcome(outcome, answerNumber, backupText)\n\ndef CheckOutcome(outcome, answerNumber, backupText):\n    if(outcome):\n        passed(\"Answer #\" + str(answerNumber) + \" is correct!\")\n    else:\n        failed(\"There is an error in answer #\"+ str(answerNumber)+\" \" + backupText)\n\nif __name__ == '__main__':\n    run_common_tests()\n    test_answer_placeholders()\n\n\n"
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        }
      ],
      "type" : "section"
    },
    {
      "title" : "Week 7 - Problem solving",
      "items" : [ ],
      "type" : "section"
    }
  ],
  "additional_files" : [
    {
      "name" : "README.md",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "# Iedereen kan programmeren\r\n"
    },
    {
      "name" : "test_helper.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import sys\r\n\r\ndef get_file_text(path):\r\n    \"\"\" Returns file text by path\"\"\"\r\n    file_io = open(path, \"r\")\r\n    text = file_io.read()\r\n    file_io.close()\r\n    return text\r\n\r\n\r\ndef get_file_output(encoding=\"utf-8\", path=sys.argv[-1], arg_string=\"\"):\r\n    \"\"\"\r\n    Returns answer file output\r\n    :param encoding: to decode output in python3\r\n    :param path: path of file to execute\r\n    :return: list of strings\r\n    \"\"\"\r\n    import subprocess\r\n\r\n    proc = subprocess.Popen([sys.executable, path], stdin=subprocess.PIPE, stdout=subprocess.PIPE,\r\n                            stderr=subprocess.STDOUT)\r\n    if arg_string:\r\n        for arg in arg_string.split(\"\\n\"):\r\n            proc.stdin.write(bytearray(str(arg) + \"\\n\", encoding))\r\n            proc.stdin.flush()\r\n\r\n    return list(map(lambda x: str(x.decode(encoding)), proc.communicate()[0].splitlines()))\r\n\r\n\r\ndef test_file_importable():\r\n    \"\"\" Tests there is no obvious syntax errors\"\"\"\r\n    path = sys.argv[-1]\r\n    if not path.endswith(\".py\"):\r\n        import os\r\n\r\n        parent = os.path.abspath(os.path.join(path, os.pardir))\r\n        python_files = [f for f in os.listdir(parent) if os.path.isfile(os.path.join(parent, f)) and f.endswith(\".py\")]\r\n        for python_file in python_files:\r\n            if python_file == \"tests.py\":\r\n                continue\r\n            check_importable_path(os.path.join(parent, python_file))\r\n        return\r\n    check_importable_path(path)\r\n\r\n\r\ndef check_importable_path(path):\r\n    \"\"\" Checks that file is importable.\r\n        Reports failure otherwise.\r\n    \"\"\"\r\n    saved_input = patch_input()\r\n    try:\r\n        import_file(path)\r\n    except:\r\n        failed(\"The file contains syntax errors\", test_file_importable.__name__)\r\n        return\r\n    finally:\r\n        revert_input(saved_input)\r\n\r\n    passed(test_file_importable.__name__)\r\n\r\n\r\ndef patch_input():\r\n    def mock_fun(_m=\"\"):\r\n        return \"mock\"\r\n\r\n    if sys.version_info[0] == 3:\r\n        import builtins\r\n        save_input = builtins.input\r\n        builtins.input = mock_fun\r\n        return save_input\r\n    elif sys.version_info[0] == 2:\r\n        import __builtin__\r\n        save_input = __builtin__.raw_input\r\n        __builtin__.raw_input = mock_fun\r\n        __builtin__.input = mock_fun\r\n        return save_input\r\n\r\n\r\ndef revert_input(saved_input):\r\n    if sys.version_info[0] == 3:\r\n        import builtins\r\n        builtins.input = saved_input\r\n    elif sys.version_info[0] == 2:\r\n        import __builtin__\r\n        __builtin__.raw_input = saved_input\r\n        __builtin__.input = saved_input\r\n\r\n\r\ndef import_file(path):\r\n    \"\"\" Returns imported file \"\"\"\r\n    if sys.version_info[0] == 2 or sys.version_info[1] < 3:\r\n        import imp\r\n\r\n        return imp.load_source(\"tmp\", path)\r\n    elif sys.version_info[0] == 3:\r\n        import importlib.machinery\r\n\r\n        return importlib.machinery.SourceFileLoader(\"tmp\", path).load_module(\"tmp\")\r\n\r\n\r\ndef import_task_file():\r\n    \"\"\" Returns imported file.\r\n        Imports file from which check action was run\r\n    \"\"\"\r\n    path = sys.argv[-1]\r\n    return import_file(path)\r\n\r\n\r\ndef test_is_not_empty():\r\n    \"\"\"\r\n        Checks that file is not empty\r\n    \"\"\"\r\n    path = sys.argv[-1]\r\n    file_text = get_file_text(path)\r\n\r\n    if len(file_text) > 0:\r\n        passed()\r\n    else:\r\n        failed(\"The file is empty. Please, reload the task and try again.\")\r\n\r\n\r\ndef test_text_equals(text, error_text):\r\n    \"\"\"\r\n        Checks that answer equals text.\r\n    \"\"\"\r\n    path = sys.argv[-1]\r\n    file_text = get_file_text(path)\r\n\r\n    if file_text.strip() == text:\r\n        passed()\r\n    else:\r\n        failed(error_text)\r\n\r\n\r\ndef test_answer_placeholders_text_deleted(error_text=\"Don't just delete task text\"):\r\n    \"\"\"\r\n        Checks that all answer placeholders are not empty\r\n    \"\"\"\r\n    windows = PlaceHolder.get_answer_placeholders()\r\n\r\n    for window in windows:\r\n        if len(window) == 0:\r\n            failed(error_text)\r\n            return\r\n    passed()\r\n\r\n\r\ndef set_congratulation_message(message):\r\n    \"\"\" Overrides default 'Congratulations!' message \"\"\"\r\n    print(\"#educational_plugin CONGRATS_MESSAGE \" + message)\r\n\r\n\r\ndef failed(message=\"Please, reload the task and try again.\", name=None):\r\n    \"\"\" Reports failure \"\"\"\r\n    if not name:\r\n        name = sys._getframe().f_back.f_code.co_name\r\n    print(\"#educational_plugin \" + name + \" FAILED + \" + message)\r\n\r\n\r\ndef passed(name=None):\r\n    \"\"\" Reports success \"\"\"\r\n    if not name:\r\n        name = sys._getframe().f_back.f_code.co_name\r\n    print(\"#educational_plugin \" + name + \" test OK\")\r\n\r\n\r\n# def get_answer_placeholders():\r\n#     \"\"\"\r\n#         Returns all answer placeholders text\r\n#     \"\"\"\r\n#     prefix = \"#educational_plugin_window = \"\r\n#     print(sys.argv)\r\n#     path = sys.argv[-1]\r\n#     import os\r\n#\r\n#     file_name_without_extension = os.path.splitext(path)[0]\r\n#     windows_path = file_name_without_extension + \".py\"\r\n#     windows = []\r\n#     f = open(windows_path, \"r\")\r\n#     window_text = \"\"\r\n#     first = True\r\n#     for line in f.readlines():\r\n#         if line.startswith(prefix):\r\n#             if not first:\r\n#                 windows.append(window_text.strip())\r\n#             else:\r\n#                 first = False\r\n#             window_text = line[len(prefix):]\r\n#         else:\r\n#             window_text += line\r\n#\r\n#     if window_text:\r\n#         windows.append(window_text.strip())\r\n#\r\n#     f.close()\r\n#     return windows\r\n\r\ndef check_samples(samples=()):\r\n    \"\"\"\r\n      Check script output for all samples. Sample is a two element list, where the first is input and\r\n      the second is output.\r\n    \"\"\"\r\n    for sample in samples:\r\n        if len(sample) == 2:\r\n            output = get_file_output(arg_string=str(sample[0]))\r\n            if \"\\n\".join(output) != sample[1]:\r\n                failed(\r\n                    \"Test from samples failed: \\n \\n\"\r\n                    \"Input:\\n{}\"\r\n                    \"\\n \\n\"\r\n                    \"Expected:\\n{}\"\r\n                    \"\\n \\n\"\r\n                    \"Your result:\\n{}\".format(str.strip(sample[0]), str.strip(sample[1]), \"\\n\".join(output)))\r\n                return\r\n        set_congratulation_message(\"All test from samples passed. Now we are checking your solution on Stepik server.\")\r\n\r\n    passed()\r\n\r\n\r\ndef run_common_tests(error_text=\"Please, reload file and try again\"):\r\n    test_is_not_empty()\r\n    test_answer_placeholders_text_deleted()\r\n    test_file_importable()\r\n\r\nclass PlaceHolder:\r\n    def __init__(self, offset, length, text):\r\n        self.offset = offset\r\n        self.length = length\r\n        self.placeholder_text = text\r\n\r\n    def __repr__(self):\r\n        return str(self.offset) + \" \" + str(self.length) + \" \" + self.placeholder_text + \"\\n\"\r\n\r\n    @staticmethod\r\n    def getBasePosition(stringIn):\r\n        p = PlaceHolder(\r\n            int(stringIn[0][2:]),\r\n            int(stringIn[1][12:]),\r\n            stringIn[2][22:])\r\n        return p\r\n\r\n    @staticmethod\r\n    def getPositions(path):\r\n        import re\r\n        yaml_path = path[0:-7]+\"task-info.yaml\"\r\n        yaml_text = get_file_text(yaml_path)\r\n        begin_pos = re.search(\"placeholders:\", yaml_text).span()[1]\r\n        end_pos = re.search(\"ed\\n  text: \\|+\", yaml_text).span()[0]\r\n        placeholders = yaml_text[begin_pos:end_pos]\r\n        split = re.split(\"- offset\", placeholders)[1:]\r\n\r\n        placeholder_string_arr = []\r\n        for el in split:\r\n            placeholder_string_arr.append(str.split(el,\"\\n\"))\r\n        placeholder_arr = []\r\n        for placeholder_string in placeholder_string_arr:\r\n            placeholder_arr.append(PlaceHolder.getBasePosition(placeholder_string))\r\n\r\n        return placeholder_arr\r\n\r\n    @staticmethod\r\n    def get_answer_placeholders():\r\n        path = sys.argv[-1]\r\n        positions = PlaceHolder.getPositions(path)\r\n        file_text = get_file_text(path)\r\n        answers = []\r\n        for position in positions:\r\n            answers.append(file_text[position.offset:position.offset + position.length])\r\n        return answers\r\n"
    },
    {
      "name" : "regex_helper.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import re\r\n\r\nclass regex_helper:\r\n    VAR_STRUCTURE = \"^[_|a-zA-Z]\\w*\\s*=\\s*(\\\".*\\\"|\\'.*\\'|\\d+|\\d+\\.\\d+|True|False)$\"\r\n    FLOAT = \"^\\d*\\.\\d*$\"\r\n    STRING = \"^[\\\"\\'].*[\\\"\\']$\"\r\n    INTEGER = \"^(?<!\\d\\.)(-)*\\d+(?!\\.\\d)$\"\r\n    BOOLEAN = \"(True|False)$\"\r\n    COMMENT = \"#.*$\"\r\n    opArrNoEscape = [\"-\", \"/\", \"//\", \"%\",\r\n                     \"=\", \"-=\", \"/=\", \"//=\", \"&=\", \">>=\", \"<<=\",\r\n                     \"==\", \"!=\", \">\", \"<\", \">=\", \"<=\",\r\n                     \"and\", \"or\",\r\n                     \"is\", \"is not\",\r\n                     \"in\", \"not in\",\r\n                     \"&\", \"~\", \"<<\", \">>\", ]\r\n    opArrMustBeEscaped = [\"+\", \"*\", \"+=\", \"*=\", \"|=\", \"^=\", \"|\", \"^\", ]\r\n    opArrMustBeEscapedTwice = [\"**\", \"**=\", ]\r\n    opArrArity1 = [\"not\", ]\r\n    ifLine1 = \"if()\"\r\n\r\n    opArr = opArrNoEscape + opArrMustBeEscaped + opArrMustBeEscapedTwice + opArrArity1\r\n\r\n    # Create a regex matching any applicable operands being applied to any given operator\r\n    def createOperatorPattern(self, operator, *operands):\r\n        if operator in self.opArrMustBeEscaped:\r\n            return f\"^{operands[0]}\\s*\\{operator}\\s*{operands[1]}$\"\r\n        elif operator in self.opArrMustBeEscapedTwice:\r\n            return f\"^{operands[0]}\\s*\\{operator[0]}\\{operator[1:]}\\s*{operands[1]}$\"\r\n        elif operator in self.opArrNoEscape:\r\n            return f\"^{operands[0]}\\s*{operator}\\s*{operands[1]}$\"\r\n        elif operator in self.opArrArity1:\r\n            return f\"^{operator}\\s*{operands[0]}$\"\r\n        else:\r\n            return \"^$\"\r\n\r\n    # Create a regex matching a given expression\r\n    # Param: operands - Indexable collection containing all operands in left to right order\r\n    # Param: operators - Indexable collection containing all operators in left to right order\r\n    def createExpressionPattern(self, operands, operators):\r\n        regexOut = \"^\"\r\n\r\n        # sanitizing String operands\r\n        escOperands = []\r\n        for operand in operands:\r\n            escOperands.append(operand.translate(str.maketrans({\"\\\"\": r\"\\\"\"})))\r\n\r\n        print(escOperands)\r\n        count = 0\r\n        loopOps = escOperands[0:-1]\r\n\r\n        # Looping through Operators and operands 0 through N-1\r\n        # Because of the structure of expressions, we can encounter up to two operators between each operand.\r\n        for operand in loopOps:\r\n            if operators[count] in self.opArrArity1 and count < len(operators) - 1:\r\n                regexOut += f\"{operators[count]}\\s*\"\r\n                count = count + 1 if count < len(operators) - 1 else count\r\n\r\n            regexOut += operand + \"\\s*\"\r\n\r\n            if count < len(operators):\r\n                if operators[count] in self.opArrMustBeEscaped:\r\n                    regexOut += f\"\\{operators[count]}\\s*\"\r\n                elif operators[count] in self.opArrMustBeEscapedTwice:\r\n                    regexOut += f\"\\{operators[count][0]}\\{operators[count][1:]}\\s*\"\r\n                else:\r\n                    regexOut += f\"{operators[count]}\\s*\"\r\n                count = count + 1 if count < len(operators) - 1 else count\r\n\r\n        # Adding final operand and optionally operator\r\n        if operators[-1] in self.opArrArity1:\r\n            regexOut += f\"{operators[-1]}\\s*{escOperands[-1]}\"\r\n        else:\r\n            regexOut += f\"{escOperands[-1]}$\"\r\n\r\n        return regexOut\r\n\r\n    # Takes in an expression as it would be typed in regular python, and returns a regex matching that expression.\r\n    def expressionToRegex(self, stringIn):\r\n        operands = []\r\n        operators = []\r\n\r\n        PATTERN = re.compile(r'''((?:[^ \"']|\"[^\"]*\"|'[^']*')+)''')\r\n        for word in PATTERN.split(stringIn)[1::2]:\r\n            if word in self.opArr:\r\n                operators.append(word)\r\n            else:\r\n                operands.append(word)\r\n\r\n        return self.createExpressionPattern(operands, operators)\r\n\r\n    def ifRegex(self,conditionStr):\r\n        ifRegex = \"if *(\\( *\"\r\n        ifRegex2 = \" *\\)| *\"\r\n        ifRegex3 = \" *):\"\r\n        condRegex = self.expressionToRegex(conditionStr)[1:-1]\r\n        return ifRegex + condRegex + ifRegex2 + condRegex + ifRegex3\r\n\r\n    def whileRegex(self,conditionStr):\r\n        whileRegex = \"while *(\\( *\"\r\n        whileRegex2 = \" *\\)| *\"\r\n        whileRegex3 = \" *):\"\r\n        condRegex = self.expressionToRegex(conditionStr)[1:-1]\r\n        return whileRegex + condRegex + whileRegex2 + condRegex + whileRegex3\r\n\r\n    def forRegex(self,iteratorStr,collectionStr):\r\n        return f\"^for\\s*(({iteratorStr})|(\\({iteratorStr}\\)))\\s*in\\s*(({collectionStr})|(\\({collectionStr}\\))):\\s*$\"\r\n\r\n    def argsRegex(self, *args):\r\n        out = \"^\" + args[0] + \"\\s*\"\r\n        for string in args[1:]:\r\n            out += \",\\s*\" + string + \"\\s*\"\r\n        out += \"$\"\r\n        return out\r\n\r\n    def splitSpace(self, stringIn):\r\n        PATTERN = re.compile(r'''(-|/|//|%|==|=|-=|/=|//=|&=|>>=|<<=|!=|>|<|>=|<=|&|~|<<|>>|\\+|\\*|\\+=|\\*=|\\|=|\\^=|\\||\\^|\\*\\*|\\*\\*=)''')\r\n        arrout = []\r\n        for el in PATTERN.split(stringIn):\r\n            arrout.append(el.strip())\r\n        return arrout\r\n\r\n    def CheckAbstractAbstraction(self, input):\r\n        self.baseExecute(input, )\r\n\r\n    def setupRegex(self):\r\n        pass\r\n\r\n    def baseExecute(self, input, structure):\r\n        pattern = re.compile(structure)\r\n        matches = pattern.findall(input)\r\n        return matches\r\n\r\n    def execute(self, input, structure):\r\n        return len(self.baseExecute(input, structure)) > 0\r\n\r\n    def varStructureCheck(self, input):\r\n        return self.execute(input, self.VAR_STRUCTURE)\r\n\r\n    def customVarMatch(self, input, varName, varData):\r\n        return self.execute(input, varName + \"\\s*=\\s*\" + varData)\r\n\r\n    def typeCheck(self, input, type):\r\n        structure = \"\"\r\n        if type == \"string\":\r\n            structure = self.STRING\r\n        elif type == \"integer\":\r\n            structure = self.INTEGER\r\n        elif type == \"float\":\r\n            structure = self.FLOAT\r\n        elif type == \"boolean\":\r\n            structure = self.BOOLEAN\r\n        else:\r\n            pass\r\n        return self.execute(input, structure)\r\n"
    },
    {
      "name" : "UserInputHelper.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "from test_helper import PlaceHolder\r\nfrom regex_helper import *\r\n\r\nclass Helper:\r\n    def __init__(self):\r\n        self.re = regex_helper()\r\n        self.answers = PlaceHolder.get_answer_placeholders()\r\n\r\n    def CheckBaseType(self, index, type):\r\n        answer = self.GetInput(index)\r\n        outcome = False\r\n        if(type==\"boolean\"):\r\n            outcome = self.re.execute(answer, self.re.BOOLEAN)\r\n        elif(type==\"float\"):\r\n            outcome = self.re.execute(answer, self.re.FLOAT)\r\n        elif(type==\"string\"):\r\n            outcome = self.re.execute(answer, self.re.STRING)\r\n        elif(type==\"integer\"):\r\n            outcome = self.re.execute(answer, self.re.INTEGER)\r\n        return outcome\r\n\r\n    def CheckInput(self, index, regexString):\r\n        return self.re.execute(self.GetInput(index), regexString)\r\n\r\n    def GetInput(self, index):\r\n        return self.answers[index]\r\n"
    }
  ],
  "version" : 11
}