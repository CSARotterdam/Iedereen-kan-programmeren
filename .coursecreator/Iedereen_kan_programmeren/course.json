{
  "summary" : "Lesstof voor iedereen kan programmeren.",
  "title" : "Iedereen-kan-programmeren",
  "programming_language" : "Python",
  "language" : "en",
  "course_type" : "PyCharm",
  "items" : [
    {
      "title" : "Week 2 - Variabele en operatoren",
      "items" : [
        {
          "title" : "Variabele",
          "task_list" : [
            {
              "name" : "Het aanmaken van variabele",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [
                    {
                      "offset" : 90,
                      "length" : 14,
                      "possible_answer" : "x",
                      "placeholder_text" : "Wat is de naam"
                    },
                    {
                      "offset" : 124,
                      "length" : 16,
                      "possible_answer" : "5",
                      "placeholder_text" : "Wat is de waarde"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "## Opdracht 1: Vul de verschillende velden in met de juiste data.\n\nx = 5\n#Variabele naam: Wat is de naam\n#Variabele waarde: Wat is de waarde\n#Variabele type: integer\n\ny = 235\n#Variabele naam: y\n#Variabele waarde: 235\n#Variabele type: integer\n\nz = -721\n#Variabele naam: z\n#Variabele waarde: -721\n#Variabele type: integer\n\n## Opdracht 2: Vul de verschillende velden in met de juiste data.\n\nstappenteller = 0\n#Variabele naam: stappenteller\n#Variabele waarde: 0\n#Variabele type: integer\n\ntijdelijkGetal = 45\n#Variabele naam: tijdelijkGetal\n#Variabele waarde: 45\n#Variabele type: integer\n\naantalHoeken = 4\n#Variabele naam: aantalHoeken\n#Variabele waarde: 4\n#Variabele type: integer\n\n## Opdracht 3: Vul de verschillende velden in met de juiste data.\nvarA = -342\n#Variabele naam: varA\n#Variabele waarde: -342\n#Variabele type: integer\nvarB = 244\n#Variabele naam: varA\n#Variabele waarde: 244\n#Variabele type: integer\nvarC = 8942\n#Variabele naam: varA\n#Variabele waarde: 8942\n#Variabele type: integer\n\n## Opdracht 4: Vul de verschillende velden in met de juiste data.\nwx = 432\n#Variabele naam: wx\n#Variabele waarde: 432\n#Variabele type: integer\nwxy = 475\n#Variabele naam: wxy\n#Variabele waarde: 475\n#Variabele type: integer\nwxyz = 4515\n#Variabele naam: wxyz\n#Variabele waarde: 4515\n#Variabele type: integer\n\n## Opdracht 5: CreeÃ«r twee variabelen en vul de juiste informatie aan.\nab = 0\n#Variabele naam: ab\n#Variabele waarde: 0\n#Variabele type: integer\ncd = 1\n#Variabele naam: cd\n#Variabele waarde: 1\n#Variabele type: integer\n"
                },
                "tests/test_task.py" : {
                  "name" : "tests/test_task.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "import test_helper\nfrom UserInputHelper import *\n\n\nif __name__ == \"__main__\":\n    helper = Helper()\n\n\n\n\n"
                },
                "__init__.py" : {
                  "name" : "__init__.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : ""
                },
                "tests/__init__.py" : {
                  "name" : "tests/__init__.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : ""
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "Verschillende type variabele",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "## Opdracht 1: Vul de verschillende velden in met de juiste data.\nvarA = \"string\"\n#Variabele naam: varA\n#Variabele waarde: \"string\"\n#Variabele type: string\n\nvarB = \"stringString\"\n#Variabele naam: varB\n#Variabele waarde: \"stringString\"\n#Variabele type: string\n\nvarC = 0\n#Variabele naam: varC\n#Variabele waarde: 0\n#Variabele type: integer\n\nvarD = 1\n#Variabele naam: varD\n#Variabele waarde: 1\n#Variabele type: integer\n\nvarE = 145.1\n#Variabele naam: varE\n#Variabele waarde: 145.1\n#Variabele type: float\n\nvarF = 23.5345\n#Variabele naam: varF\n#Variabele waarde: 23.5345\n#Variabele type: float\n\nvarG = True\n#Variabele naam: varG\n#Variabele waarde: True\n#Variabele type: boolean\n\nvarH = False\n#Variabele naam: varH\n#Variabele waarde: False\n#Variabele type: boolean\n"
                },
                "tests/test_task.py" : {
                  "name" : "tests/test_task.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import unittest\n\n\nclass TestCase(unittest.TestCase):\n    def test(self):\n        self.assertEqual(1, 0, msg=\"Implement tests\")\n"
                },
                "__init__.py" : {
                  "name" : "__init__.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : ""
                },
                "tests/__init__.py" : {
                  "name" : "tests/__init__.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : ""
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "Het aanroepen en overschrijven van variabele",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "x = \"Hello\"\ny = 43\nz = False\n\n\n## Opdracht 1: Print variabele x, overschrijf deze met een nieuwe string en print variabele x opnieuw.\nprint(x)\nx = \"World\"\nprint(x)\n\n## Opdracht 2: Print variabele y, verhoog deze met 1 en print variabele y opnieuw.\nprint(y)\ny = y + 1\nprint(y)\n\n## Opdracht 3: Print variabele z, overschrijf deze met True en print variabele z opnieuw.\nprint(z)\nz = True\nprint(z)\n\n## Opdracht 4: Overschrijf alle variabele (x, y en z) met 0.\nx = 0\ny = 0\nz = 0\n\nprint(x)\nprint(y)\nprint(z)\n"
                },
                "tests/test_task.py" : {
                  "name" : "tests/test_task.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import unittest\n\n\nclass TestCase(unittest.TestCase):\n    def test(self):\n        self.assertEqual(1, 0, msg=\"Implement tests\")\n"
                },
                "__init__.py" : {
                  "name" : "__init__.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : ""
                },
                "tests/__init__.py" : {
                  "name" : "tests/__init__.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : ""
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "Extra - Variabele binnen functies",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "# TODO: type solution here\n"
                },
                "tests/test_task.py" : {
                  "name" : "tests/test_task.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import unittest\n\n\nclass TestCase(unittest.TestCase):\n    def test(self):\n        self.assertEqual(1, 0, msg=\"Implement tests\")\n"
                },
                "__init__.py" : {
                  "name" : "__init__.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : ""
                },
                "tests/__init__.py" : {
                  "name" : "tests/__init__.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : ""
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task5",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "# todo: replace this with an actual task\ndef sum(a, b):\n    return a + b\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\n\n\ndef test_answer_placeholders():\n    placeholders = get_answer_placeholders()\n    placeholder = placeholders[0]\n    if placeholder == \"\":       # TODO: your condition here\n        passed()\n    else:\n        failed()\n\n\nif __name__ == '__main__':\n    run_common_tests()\n    # test_answer_placeholders()       # TODO: uncomment test call\n\n\n"
                }
              },
              "description_text" : "<html>\nWrite your task text here.\n<div class=\"hint\">\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\n</div>\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "Het aanmaken van variabelen",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [
                    {
                      "offset" : 90,
                      "length" : 9,
                      "possible_answer" : "x",
                      "placeholder_text" : "1. Vul in"
                    },
                    {
                      "offset" : 193,
                      "length" : 9,
                      "possible_answer" : "235",
                      "placeholder_text" : "2. Vul in"
                    },
                    {
                      "offset" : 298,
                      "length" : 9,
                      "possible_answer" : "integer",
                      "placeholder_text" : "3. Vul in"
                    },
                    {
                      "offset" : 345,
                      "length" : 9,
                      "possible_answer" : "stappenteller",
                      "placeholder_text" : "4. Vul in"
                    },
                    {
                      "offset" : 374,
                      "length" : 9,
                      "possible_answer" : "0",
                      "placeholder_text" : "5. Vul in"
                    },
                    {
                      "offset" : 481,
                      "length" : 9,
                      "possible_answer" : "45",
                      "placeholder_text" : "6. Vul in"
                    },
                    {
                      "offset" : 508,
                      "length" : 9,
                      "possible_answer" : "integer",
                      "placeholder_text" : "7. Vul in"
                    },
                    {
                      "offset" : 553,
                      "length" : 9,
                      "possible_answer" : "aantalHoeken",
                      "placeholder_text" : "8. Vul in"
                    },
                    {
                      "offset" : 582,
                      "length" : 9,
                      "possible_answer" : "4",
                      "placeholder_text" : "9. Vul in"
                    },
                    {
                      "offset" : 609,
                      "length" : 10,
                      "possible_answer" : "integer",
                      "placeholder_text" : "10. Vul in"
                    },
                    {
                      "offset" : 622,
                      "length" : 28,
                      "possible_answer" : "varA = -342",
                      "placeholder_text" : "11. Maak de juiste variabele"
                    },
                    {
                      "offset" : 723,
                      "length" : 28,
                      "possible_answer" : "varB = 244",
                      "placeholder_text" : "12. Maak de juiste variabele"
                    },
                    {
                      "offset" : 823,
                      "length" : 28,
                      "possible_answer" : "varC = 8942",
                      "placeholder_text" : "13. Maak de juiste variabele"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "## Opdracht 1: Vul de verschillende velden in met de juiste data.\n\nx = 5\n#Variabele naam: 1. Vul in\n#Variabele waarde: 5\n#Variabele type: integer\n\ny = 235\n#Variabele naam: y\n#Variabele waarde: 2. Vul in\n#Variabele type: integer\n\nz = -721\n#Variabele naam: z\n#Variabele waarde: -721\n#Variabele type: 3. Vul in\n\n\nstappenteller = 0\n#Variabele naam: 4. Vul in\n#Variabele waarde: 5. Vul in\n#Variabele type: integer\n\ntijdelijkGetal = 45\n#Variabele naam: tijdelijkGetal\n#Variabele waarde: 6. Vul in\n#Variabele type: 7. Vul in\n\naantalHoeken = 4\n#Variabele naam: 8. Vul in\n#Variabele waarde: 9. Vul in\n#Variabele type: 10. Vul in\n\n\n11. Maak de juiste variabele\n#Variabele naam: varA\n#Variabele waarde: -342\n#Variabele type: integer\n\n12. Maak de juiste variabele\n#Variabele naam: varB\n#Variabele waarde: 244\n#Variabele type: integer\n\n13. Maak de juiste variabele\n#Variabele naam: varC\n#Variabele waarde: 8942\n#Variabele type: integer\n\n"
                },
                "tests.py" : {
                  "name" : "tests.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom regex_helper import *\nfrom UserInputHelper import *\n\ndef test_answer_placeholders():\n    helper = Helper()\n    for answerNumber in range(len(helper.answers)):\n        outcome = False\n        backupText = \"\"\n        if(answerNumber == 0):\n            outcome = helper.CheckInput(answerNumber, \"x\")\n        elif(answerNumber == 1):\n            outcome = helper.CheckInput(answerNumber, \"235\")\n        elif(answerNumber == 2):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 3):\n            outcome = helper.CheckInput(answerNumber, \"stappenteller\")\n        elif(answerNumber == 4):\n            outcome = helper.CheckInput(answerNumber, \"0\")\n        elif(answerNumber == 5):\n            outcome = helper.CheckInput(answerNumber, \"45\")\n        elif(answerNumber == 6):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 7):\n            outcome = helper.CheckInput(answerNumber, \"aantalHoeken\")\n        elif(answerNumber == 8):\n            outcome = helper.CheckInput(answerNumber, \"4\")\n        elif(answerNumber == 9):\n            outcome = helper.CheckInput(answerNumber, \"integer|Integer\")\n        elif(answerNumber == 10):\n            outcome = helper.CheckInput(answerNumber, helper.helper.expressionToRegex(\"varA = -342\"))\n        elif(answerNumber == 11):\n            outcome = helper.CheckInput(answerNumber, helper.helper.expressionToRegex(\"varB = 244\"))\n        elif(answerNumber == 12):\n            outcome = helper.CheckInput(answerNumber, helper.helper.expressionToRegex(\"varC = 8942\"))\n        CheckOutcome(outcome, answerNumber, backupText)\n\ndef CheckOutcome(outcome, answerNumber, backupText):\n    if(outcome):\n        passed(\"Answer #\" + str(answerNumber) + \" is correct!\")\n    else:\n        failed(\"There is an error in answer #\"+ str(answerNumber)+\" \" + backupText)\n\nif __name__ == '__main__':\n    run_common_tests()\n    test_answer_placeholders()\n\n\n"
                }
              },
              "description_text" : "<html>\nWrite your task text here.\n<div class=\"hint\">\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\n</div>\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        },
        {
          "title" : "Operators",
          "task_list" : [
            {
              "name" : "Wiskundige operatoren",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "varA = 6\nvarB = 1\nvarC = 6\nvarD = 8\n\n## Opdracht 1: Vul de verschillende velden in met de juiste data.\nsumA = varB + varD\n#Variabele naam: sumA\n#Variabele waarde: 9\n#Variabele type: integer\n\nsumB = varA + varC\n#Variabele naam: sumB\n#Variabele waarde: 12\n#Variabele type: integer\n\nsubA = sumA - varA\n#Variabele naam: subA\n#Variabele waarde: 3\n#Variabele type: integer\n\nsubB = sumB - varB\n#Variabele naam: subB\n#Variabele waarde: 11\n#Variabele type: integer\n\nmultA = varA * varB\n#Variabele naam: multA\n#Variabele waarde: 6\n#Variabele type: integer\n\nmultB = varC * varD\n#Variabele naam: multB\n#Variabele waarde: 48\n#Variabele type: integer\n\npowA = varA ** varB\n#Variabele naam: powA\n#Variabele waarde: 6\n#Variabele type: integer\n\npowB = varC ** varD\n#Variabele naam: powB\n#Variabele waarde: 1679616â¬\n#Variabele type: integer\n"
                },
                "tests/test_task.py" : {
                  "name" : "tests/test_task.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import unittest\n\n\nclass TestCase(unittest.TestCase):\n    def test(self):\n        self.assertEqual(1, 0, msg=\"Implement tests\")\n"
                },
                "__init__.py" : {
                  "name" : "__init__.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : ""
                },
                "tests/__init__.py" : {
                  "name" : "tests/__init__.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : ""
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "Logische operatoren",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "varA = 4\nvarB = 9\nvarC = 4.2\nvarD = -53.2\n\n#Task 1\nequA = varA == varB\n#Variabele naam: equA\n#Variabele waarde: False\n#Variabele type: boolean\n\nequB = varC == varD\n#Variabele naam: equB\n#Variabele waarde: False\n#Variabele type: boolean\n\nequC = varB == varB\n#Variabele naam: equC\n#Variabele waarde: True\n#Variabele type: boolean\n\n#Task 2\nuneqA = varA != varB\n#Variabele naam: uneqA\n#Variabele waarde: True\n#Variabele type: boolean\n\nuneqB = varC != varD\n#Variabele naam: uneqB\n#Variabele waarde: True\n#Variabele type: boolean\n\nuneqC = varB != varB\n#Variabele naam: uneqC\n#Variabele waarde: False\n#Variabele type: boolean\n\nlargerA = varA > varC\n#Variabele naam: largerA\n#Variabele waarde: False\n#Variabele type: boolean\n\nlargerB = varB > varD\n#Variabele naam: largerB\n#Variabele waarde: True\n#Variabele type: boolean\n\nlargerC = varA > varA\n#Variabele naam: largerC\n#Variabele waarde: False\n#Variabele type: boolean\n\nlargerequA = varA >= varC\n#Variabele naam: largerequA\n#Variabele waarde: False\n#Variabele type: boolean\n\nlargerequB = varB >= varD\n#Variabele naam: largerequB\n#Variabele waarde: True\n#Variabele type: boolean\n\nlargerequC = varA >= varA\n#Variabele naam: largerequC\n#Variabele waarde: True\n#Variabele type: boolean\n\nsmallerA = varA < varC\n#Variabele naam: smallerA\n#Variabele waarde: True\n#Variabele type: boolean\nsmallerB = varB < varD\n#Variabele naam: smallerC\n#Variabele waarde: False\n#Variabele type: boolean\n\nsmallerC = varA < varA\n#Variabele naam: smallerC\n#Variabele waarde: False\n#Variabele type: boolean\n\nsmallerequA = varA <= varC\n#Variabele naam: smallerequA\n#Variabele waarde: True\n#Variabele type: boolean\n\nsmallerequB = varB <= varD\n#Variabele naam: smallerequB\n#Variabele waarde: False\n#Variabele type: boolean\n\nsmallerequC = varA <= varA\n#Variabele naam: smallerequC\n#Variabele waarde: True\n#Variabele type: boolean\n"
                },
                "tests/test_task.py" : {
                  "name" : "tests/test_task.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import unittest\n\n\nclass TestCase(unittest.TestCase):\n    def test(self):\n        self.assertEqual(1, 0, msg=\"Implement tests\")\n"
                },
                "__init__.py" : {
                  "name" : "__init__.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : ""
                },
                "tests/__init__.py" : {
                  "name" : "tests/__init__.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : ""
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "Booleaanse operatoren",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "varA = True\nvarB = False\n\nandA = varA and varA\n#Variabele naam: andA\n#Variabele waarde: True\n#Variabele type: boolean\n\nandB = varA and varB\n#Variabele naam: andB\n#Variabele waarde: False\n#Variabele type: boolean\n\nandC = varB and varA\n#Variabele naam: andC\n#Variabele waarde: False\n#Variabele type: boolean\n\nandD = varB and varB\n#Variabele naam: andD\n#Variabele waarde: False\n#Variabele type: boolean\n\norA = varA or varA\n#Variabele naam: orA\n#Variabele waarde: True\n#Variabele type: boolean\n\norB = varA or varB\n#Variabele naam: orB\n#Variabele waarde: True\n#Variabele type: boolean\n\norC = varB or varA\n#Variabele naam: orC\n#Variabele waarde: True\n#Variabele type: boolean\n\norD = varB or varB\n#Variabele naam: orD\n#Variabele waarde: False\n#Variabele type: boolean\n\nnotA = not(varA)\n#Variabele naam: notA\n#Variabele waarde: False\n#Variabele type: boolean\n\nnotB = not(varB)\n#Variabele naam: notB\n#Variabele waarde: False\n#Variabele type: boolean\n"
                },
                "tests/test_task.py" : {
                  "name" : "tests/test_task.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import unittest\n\n\nclass TestCase(unittest.TestCase):\n    def test(self):\n        self.assertEqual(1, 0, msg=\"Implement tests\")\n"
                },
                "__init__.py" : {
                  "name" : "__init__.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : ""
                },
                "tests/__init__.py" : {
                  "name" : "tests/__init__.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : ""
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "Expressies",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "x = 4\ny = 6\n\nexpressionA = 8 * 5 + 5 / 2\n#Stap 1:    40 + 5 / 2\n#Stap 2:    40 + 2.5\n#Stap 3:    42.5\n#Type  :    Float\n\nexpressionB = x * 5 + y / 2\n#Stap 1:    4 * 5 + y / 2\n#Stap 2:    20 + y / 2\n#Stap 3:    20 + 6 / 2\n#Stap 4:    20 + 3\n#Stap 5:    23\n#Type  :    Integer\n\nexpressionC = expressionB >= expressionA\n#Stap 1:    23 >= expressionA\n#Stap 2:    23 >= 42.5\n#Stap 3:    False\n#Type  :    Boolean\n\nexpressionD = expressionC or expressionA > 40\n#Stap 1:    False or expressionA > 40\n#Stap 2:    False or 42.5 > 40\n#Stap 3:    False or True\n#Stap 4:    True\n#Type  :    Boolean\n\n"
                },
                "tests/test_task.py" : {
                  "name" : "tests/test_task.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import unittest\n\n\nclass TestCase(unittest.TestCase):\n    def test(self):\n        self.assertEqual(1, 0, msg=\"Implement tests\")\n"
                },
                "__init__.py" : {
                  "name" : "__init__.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : ""
                },
                "tests/__init__.py" : {
                  "name" : "tests/__init__.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : ""
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        }
      ],
      "type" : "section"
    },
    {
      "title" : "Week 3 - Branching",
      "items" : [
        {
          "title" : "If-actual",
          "task_list" : [ ],
          "type" : "lesson"
        }
      ],
      "type" : "section"
    },
    {
      "title" : "Week 4 - Arrays en functies",
      "items" : [ ],
      "type" : "section"
    },
    {
      "title" : "Week 5 - While loops",
      "items" : [ ],
      "type" : "section"
    },
    {
      "title" : "Week 6 - For loops",
      "items" : [ ],
      "type" : "section"
    },
    {
      "title" : "Week 7 - Problem solving",
      "items" : [ ],
      "type" : "section"
    },
    {
      "title" : "Eindopdrachten - Python",
      "items" : [
        {
          "title" : "Opdracht 1",
          "task_list" : [
            {
              "name" : "Omdraaien van tekst",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [
                    {
                      "offset" : 197,
                      "length" : 21,
                      "possible_answer" : "return \"Nope\"",
                      "placeholder_text" : "Finish  this function"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "def run():\n    textInput = input(\"Enter the text you would like to reverse:\\n\")\n    reversedText = reverse(textInput)\n    print(\"Your reversed string is:\\n\" + reversedText)\n\ndef reverse(text):\n    Finish  this function\n\nrun()\n"
                },
                "tests/test_task.py" : {
                  "name" : "tests/test_task.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import unittest\n\n\nclass TestCase(unittest.TestCase):\n    def test(self):\n        self.assertEqual(1, 0, msg=\"Implement tests\")\n"
                },
                "__init__.py" : {
                  "name" : "__init__.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : ""
                },
                "tests/__init__.py" : {
                  "name" : "tests/__init__.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : ""
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        },
        {
          "title" : "Opdracht 2",
          "task_list" : [
            {
              "name" : "Steen.... papier.... schaar!",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [
                    {
                      "offset" : 797,
                      "length" : 21,
                      "possible_answer" : "return \"Nope\"",
                      "placeholder_text" : "Finish  this function"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "def run():\n    p1Weapon = pickWeapon()\n    p2Weapon = pickWeapon()\n    winnerAndWeapon = RockPaperScissors(p1Weapon, p2Weapon)\n    print(\"The winner is: \"+winnerAndWeapon[0] +\"\\n With the weapon: \"+ winnerAndWeapon[1])\n\ndef pickWeapon():\n    print(\"Pick one of the following weapons (select the number):\")\n    print(\"[1] - Rock\")\n    print(\"[2] - Paper\")\n    print(\"[3] - Scissor\")\n    weaponNumber = input(\"Your choice: \\n\")\n    if(weaponNumber == \"1\"):\n        return \"Rock\"\n    elif(weaponNumber == \"2\"):\n        return \"Paper\"\n    elif(weaponNumber == \"3\"):\n        return \"Scissor\"\n    else:\n        return pickWeapon()\n\n## input1: String, input2: String\n## output: Array of two string elements\n### example output: [\"Player1\", \"Rock\"]\ndef RockPaperScissors(player1Weapon, player2Weapon):\n    Finish  this function\n\nrun()\n"
                },
                "tests/test_task.py" : {
                  "name" : "tests/test_task.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import unittest\n\n\nclass TestCase(unittest.TestCase):\n    def test(self):\n        self.assertEqual(1, 0, msg=\"Implement tests\")\n"
                },
                "__init__.py" : {
                  "name" : "__init__.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : ""
                },
                "tests/__init__.py" : {
                  "name" : "tests/__init__.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : ""
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        },
        {
          "title" : "Opdracht 3",
          "task_list" : [
            {
              "name" : "Ceasar cypher",
              "files" : {
                "task.py" : {
                  "name" : "task.py",
                  "placeholders" : [
                    {
                      "offset" : 366,
                      "length" : 33,
                      "possible_answer" : "return \"Nope\"",
                      "placeholder_text" : "Fill this function with your code"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "def run():\n    toBeCyphered = input(\"Enter the phrase you would like to hide:\\n\")\n    amountOfStepsToChange = int(input(\"Enter a number:\\n\"))\n    returnValue = ceasarCypher(toBeCyphered, amountOfStepsToChange)\n    print(\"Your ceasar cyphered message is:\\n\"+returnValue)\n\n## Input1: String, input2: Integer\n## Return: String\ndef ceasarCypher(stringInput, steps):\n    Fill this function with your code\n\nrun()\n"
                },
                "tests/test_task.py" : {
                  "name" : "tests/test_task.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import unittest\n\n\nclass TestCase(unittest.TestCase):\n    def test(self):\n        self.assertEqual(1, 0, msg=\"Implement tests\")\n"
                },
                "__init__.py" : {
                  "name" : "__init__.py",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : ""
                },
                "tests/__init__.py" : {
                  "name" : "tests/__init__.py",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : ""
                }
              },
              "description_text" : "<html>\r\nWrite your task text here.\r\n<div class=\"hint\">\r\n  Hints can be added anywhere in task text: type \"hint\" and press Tab.\r\n</div>\r\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        }
      ],
      "type" : "section"
    }
  ],
  "additional_files" : [
    {
      "name" : "README.md",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "# Iedereen kan programmeren\r\n"
    },
    {
      "name" : "Regex_Helper.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import re\r\n\r\nclass regex_helper:\r\n    VAR_STRUCTURE = \"^[_|a-zA-Z]\\w*\\s*=\\s*(\\\".*\\\"|\\'.*\\'|\\d+|\\d+\\.\\d+|True|False)$\"\r\n    FLOAT = \"^\\d*\\.\\d*$\"\r\n    STRING = \"^[\\\"\\'].*[\\\"\\']$\"\r\n    INTEGER = \"^(?<!\\d\\.)(-)*\\d+(?!\\.\\d)$\"\r\n    BOOLEAN = \"(True|False)$\"\r\n    COMMENT = \"#.*$\"\r\n    opArrNoEscape = [\"-\", \"/\", \"//\", \"%\",\r\n                     \"=\", \"-=\", \"/=\", \"//=\", \"&=\", \">>=\", \"<<=\",\r\n                     \"==\", \"!=\", \">\", \"<\", \">=\", \"<=\",\r\n                     \"and\", \"or\",\r\n                     \"is\", \"is not\",\r\n                     \"in\", \"not in\",\r\n                     \"&\", \"~\", \"<<\", \">>\", ]\r\n    opArrMustBeEscaped = [\"+\", \"*\", \"+=\", \"*=\", \"|=\", \"^=\", \"|\", \"^\", ]\r\n    opArrMustBeEscapedTwice = [\"**\", \"**=\", ]\r\n    opArrArity1 = [\"not\", ]\r\n    ifLine1 = \"if()\"\r\n\r\n    opArr = opArrNoEscape + opArrMustBeEscaped + opArrMustBeEscapedTwice + opArrArity1\r\n\r\n    # Create a regex matching any applicable operands being applied to any given operator\r\n    def createOperatorPattern(self, operator, *operands):\r\n        if operator in self.opArrMustBeEscaped:\r\n            return f\"^{operands[0]}\\s*\\{operator}\\s*{operands[1]}$\"\r\n        elif operator in self.opArrMustBeEscapedTwice:\r\n            return f\"^{operands[0]}\\s*\\{operator[0]}\\{operator[1:]}\\s*{operands[1]}$\"\r\n        elif operator in self.opArrNoEscape:\r\n            return f\"^{operands[0]}\\s*{operator}\\s*{operands[1]}$\"\r\n        elif operator in self.opArrArity1:\r\n            return f\"^{operator}\\s*{operands[0]}$\"\r\n        else:\r\n            return \"^$\"\r\n\r\n    # Create a regex matching a given expression\r\n    # Param: operands - Indexable collection containing all operands in left to right order\r\n    # Param: operators - Indexable collection containing all operators in left to right order\r\n    def createExpressionPattern(self, operands, operators):\r\n        regexOut = \"^\"\r\n\r\n        # sanitizing String operands\r\n        escOperands = []\r\n        for operand in operands:\r\n            escOperands.append(operand.translate(str.maketrans({\"\\\"\": r\"\\\"\"})))\r\n\r\n        print(escOperands)\r\n        count = 0\r\n        loopOps = escOperands[0:-1]\r\n\r\n        # Looping through Operators and operands 0 through N-1\r\n        # Because of the structure of expressions, we can encounter up to two operators between each operand.\r\n        for operand in loopOps:\r\n            if operators[count] in self.opArrArity1 and count < len(operators) - 1:\r\n                regexOut += f\"{operators[count]}\\s*\"\r\n                count = count + 1 if count < len(operators) - 1 else count\r\n\r\n            regexOut += operand + \"\\s*\"\r\n\r\n            if count < len(operators):\r\n                if operators[count] in self.opArrMustBeEscaped:\r\n                    regexOut += f\"\\{operators[count]}\\s*\"\r\n                elif operators[count] in self.opArrMustBeEscapedTwice:\r\n                    regexOut += f\"\\{operators[count][0]}\\{operators[count][1:]}\\s*\"\r\n                else:\r\n                    regexOut += f\"{operators[count]}\\s*\"\r\n                count = count + 1 if count < len(operators) - 1 else count\r\n\r\n        # Adding final operand and optionally operator\r\n        if operators[-1] in self.opArrArity1:\r\n            regexOut += f\"{operators[-1]}\\s*{escOperands[-1]}\"\r\n        else:\r\n            regexOut += f\"{escOperands[-1]}$\"\r\n\r\n        return regexOut\r\n\r\n    # Takes in an expression as it would be typed in regular python, and returns a regex matching that expression.\r\n    def expressionToRegex(self, stringIn):\r\n        operands = []\r\n        operators = []\r\n\r\n        PATTERN = re.compile(r'''((?:[^ \"']|\"[^\"]*\"|'[^']*')+)''')\r\n        for word in PATTERN.split(stringIn)[1::2]:\r\n            if word in self.opArr:\r\n                operators.append(word)\r\n            else:\r\n                operands.append(word)\r\n\r\n        return self.createExpressionPattern(operands, operators)\r\n\r\n    def ifRegex(self,condition):\r\n        ifRegex = \"if *(\\( *\"\r\n        ifRegex2 = \" *\\)| *\"\r\n        ifRegex3 = \" *):\"\r\n        condRegex = self.expressionToRegex(condition)[1:-1]\r\n        return ifRegex + condRegex + ifRegex2 + condRegex + ifRegex3;\r\n\r\n    def splitspace(self, stringIn):\r\n        PATTERN = re.compile(r'''(-|/|//|%|==|=|-=|/=|//=|&=|>>=|<<=|!=|>|<|>=|<=|&|~|<<|>>|\\+|\\*|\\+=|\\*=|\\|=|\\^=|\\||\\^|\\*\\*|\\*\\*=)''')\r\n        arrout = []\r\n        for el in PATTERN.split(stringIn):\r\n            arrout.append(el.strip())\r\n        return arrout\r\n\r\n    def CheckAbstractAbstraction(self, input):\r\n        self.baseExecute(input, )\r\n\r\n    def setupRegex(self):\r\n        pass\r\n\r\n    def baseExecute(self, input, structure):\r\n        pattern = re.compile(structure)\r\n        matches = pattern.findall(input)\r\n        return matches\r\n\r\n    def execute(self, input, structure):\r\n        return len(self.baseExecute(input, structure)) > 0\r\n\r\n    def varStructureCheck(self, input):\r\n        return self.execute(input, self.VAR_STRUCTURE)\r\n\r\n    def customVarMatch(self, input, varName, varData):\r\n        return self.execute(input, varName + \"\\s*=\\s*\" + varData)\r\n\r\n    def typeCheck(self, input, type):\r\n        structure = \"\"\r\n        if type == \"string\":\r\n            structure = self.STRING\r\n        elif type == \"integer\":\r\n            structure = self.INTEGER\r\n        elif type == \"float\":\r\n            structure = self.FLOAT\r\n        elif type == \"boolean\":\r\n            structure = self.BOOLEAN\r\n        else:\r\n            pass\r\n        return self.execute(input, structure)\r\n"
    },
    {
      "name" : "Week 3 - Branching/If/Programma 1/tests/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 3 - Branching/If/Programma 1/tests/test_task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import unittest\r\nfrom Regex_Helper import regex_helper\r\n\r\n\r\nclass TestCase(unittest.TestCase):\r\n    def test(self):\r\n        a = regex_helper()\r\n        \r\n        self.assertEqual(1, 0, msg=\"Implement tests\")\r\n"
    },
    {
      "name" : "Week 3 - Branching/If/Programma 1/task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "x = 5\r\n\r\n#Keyword: if\r\n#Uitgevoerd: Ja\r\n#Conditie variabele(n): x\r\n#Conditie: x == 5\r\n#Conditie uitkomst: True\r\nif(x == 5):\r\n    print(\"Stap 1.\")\r\nprint(\"Stap 2.\")\r\nprint(\"Einde programma.\")\r\n"
    },
    {
      "name" : "Week 3 - Branching/If/Programma 1/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 3 - Branching/If/Programma 2/tests/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 3 - Branching/If/Programma 2/tests/test_task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import unittest\r\n\r\n\r\nclass TestCase(unittest.TestCase):\r\n    def test(self):\r\n        self.assertEqual(1, 0, msg=\"Implement tests\")\r\n"
    },
    {
      "name" : "Week 3 - Branching/If/Programma 2/task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "x = 5\r\ny = 2\r\n#Keyword: if\r\n#Uitgevoerd: Ja\r\n#Conditie variabele(n): x\r\n#Conditie: x *2 <= 14\r\n#Conditie uitkomst: False\r\nif(x * y > 14):\r\n    print(\"Stap 1.\")\r\nprint(\"Stap 2.\")\r\nprint(\"Einde programma.\")\r\n"
    },
    {
      "name" : "Week 3 - Branching/If/Programma 2/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 3 - Branching/If/Programma 3/tests/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 3 - Branching/If/Programma 3/tests/test_task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import unittest\r\n\r\n\r\nclass TestCase(unittest.TestCase):\r\n    def test(self):\r\n        self.assertEqual(1, 0, msg=\"Implement tests\")\r\n"
    },
    {
      "name" : "Week 3 - Branching/If/Programma 3/task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "x = 5\r\ny = 21\r\n#Keyword: if\r\n#Uitgevoerd: Ja\r\n#Conditie variabele(n): x\r\n#Conditie: x > 0\r\n#Conditie uitkomst: True\r\nif(x > 0):\r\n    print(\"Stap 1.\")\r\n    #Keyword: if\r\n    #Uitgevoerd: Ja\r\n    #Conditie variabele(n): x, y\r\n    #Conditie: x * 2 <= 14\r\n    #Conditie uitkomst: False\r\n    if(y / x <= 4):\r\n        print(\"Stap 2.\")\r\nprint(\"Stap 3.\")\r\nprint(\"Einde programma.\")\r\n"
    },
    {
      "name" : "Week 3 - Branching/If/Programma 3/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 3 - Branching/If/Programma 4/tests/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 3 - Branching/If/Programma 4/tests/test_task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import unittest\r\n\r\n\r\nclass TestCase(unittest.TestCase):\r\n    def test(self):\r\n        self.assertEqual(1, 0, msg=\"Implement tests\")\r\n"
    },
    {
      "name" : "Week 3 - Branching/If/Programma 4/task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "x = 5\r\ny = 21\r\n#Keyword: if\r\n#Uitgevoerd: Ja\r\n#Conditie variabele(n): x\r\n#Conditie: x < 0\r\n#Conditie uitkomst: False\r\nif(x < 0):\r\n    print(\"Stap 1.\")\r\n    #Keyword: if\r\n    #Uitgevoerd: Nee\r\n    #Conditie variabele(n): x, y\r\n    #Conditie: y ** x <= 456\r\n    #Conditie uitkomst: False\r\n    if(y ** x <= 456):\r\n        print(\"Stap 2.\")\r\nprint(\"Stap 3.\")\r\nprint(\"Einde programma.\")\r\n\r\n"
    },
    {
      "name" : "Week 3 - Branching/If/Programma 4/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 3 - Branching/If - else/Programma 1/tests/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 3 - Branching/If - else/Programma 1/tests/test_task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import unittest\r\n\r\n\r\nclass TestCase(unittest.TestCase):\r\n    def test(self):\r\n        self.assertEqual(1, 0, msg=\"Implement tests\")\r\n"
    },
    {
      "name" : "Week 3 - Branching/If - else/Programma 1/task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "x = 5\r\n\r\n#Keyword(s): if, else\r\n#Uitgevoerd: Ja\r\n#Conditie variabele(n): x\r\n#Conditie: x != 0\r\n#Conditie uitkomst: True\r\n#Uitgevoerd pad(en): 1\r\nif(x != 0):\r\n    print(\"Pad 1.\")\r\nelse:\r\n    print(\"Pad 2.\")\r\nprint(\"Einde programma.\")\r\n"
    },
    {
      "name" : "Week 3 - Branching/If - else/Programma 1/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 3 - Branching/If - else/Programma 2/tests/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 3 - Branching/If - else/Programma 2/tests/test_task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import unittest\r\n\r\n\r\nclass TestCase(unittest.TestCase):\r\n    def test(self):\r\n        self.assertEqual(1, 0, msg=\"Implement tests\")\r\n"
    },
    {
      "name" : "Week 3 - Branching/If - else/Programma 2/task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "x = 5\r\n\r\n#Keyword(s): if, else\r\n#Uitgevoerd: Ja\r\n#Conditie variabele(n): x\r\n#Conditie: x != 0\r\n#Conditie uitkomst: False\r\n#Uitgevoerd pad(en): 1\r\nif(x != 55/11):\r\n    print(\"Pad 1.\")\r\nelse:\r\n    print(\"Pad 2.\")\r\nprint(\"Einde programma.\")\r\n"
    },
    {
      "name" : "Week 3 - Branching/If - else/Programma 2/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 3 - Branching/If - else/Programma 3/tests/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 3 - Branching/If - else/Programma 3/tests/test_task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import unittest\r\n\r\n\r\nclass TestCase(unittest.TestCase):\r\n    def test(self):\r\n        self.assertEqual(1, 0, msg=\"Implement tests\")\r\n"
    },
    {
      "name" : "Week 3 - Branching/If - else/Programma 3/task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "x = 5\r\ny = x * 2\r\n#Keyword(s): if, else\r\n#Uitgevoerd: Ja\r\n#Conditie variabele(n): x\r\n#Conditie: x != 0\r\n#Conditie uitkomst: True\r\n#Uitgevoerd pad: 1\r\nif(x != 0):\r\n    print(\"Pad 1.\")\r\n    #Keyword(s): if\r\n    #Uitgevoerd: Ja\r\n    #Conditie variabele(n): x, y\r\n    #Conditie: x <= y\r\n    #Conditie uitkomst: True\r\n    if(x <= y):\r\n        print(\"Pad 2.\")\r\nelse:\r\n    print(\"Pad 3.\")\r\nprint(\"Einde programma.\")\r\n"
    },
    {
      "name" : "Week 3 - Branching/If - else/Programma 3/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 3 - Branching/If - else/Programma 4/tests/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 3 - Branching/If - else/Programma 4/tests/test_task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import unittest\r\n\r\n\r\nclass TestCase(unittest.TestCase):\r\n    def test(self):\r\n        self.assertEqual(1, 0, msg=\"Implement tests\")\r\n"
    },
    {
      "name" : "Week 3 - Branching/If - else/Programma 4/task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "x = 21/3\r\ny = x * 2\r\n#Keyword(s): if, else\r\n#Uitgevoerd: Ja\r\n#Conditie variabele(n): x\r\n#Conditie: x < 15\r\n#Conditie uitkomst: True\r\n#Uitgevoerd pad: 1\r\nif(x < 15):\r\n    print(\"Pad 1.\")\r\n    #Keyword(s): if\r\n    #Uitgevoerd: Ja\r\n    #Conditie variabele(n): y\r\n    #Conditie: 10 >= y\r\n    #Conditie uitkomst: False\r\n    if(10 >= y):\r\n        print(\"Pad 2.\")\r\nelse:\r\n    print(\"Pad 3.\")\r\nprint(\"Einde programma.\")\r\n"
    },
    {
      "name" : "Week 3 - Branching/If - else/Programma 4/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 3 - Branching/Opdrachten/Schrikkeljaar/tests/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 3 - Branching/Opdrachten/Schrikkeljaar/tests/test_task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import unittest\r\n\r\n\r\nclass TestCase(unittest.TestCase):\r\n    def test(self):\r\n        self.assertEqual(1, 0, msg=\"Implement tests\")\r\n"
    },
    {
      "name" : "Week 3 - Branching/Opdrachten/Schrikkeljaar/task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "isLeapYear = False\r\nyear = int(input(\"Which year do you want to check for a common or leap year?:\\n\"))\r\n\r\n\r\nif(year % 400 == 0):\r\n    isLeapYear = True\r\nelse:\r\n    if(year % 4 == 0 and year % 100 != 0):\r\n        isLeapYear = True\r\n\r\nif(isLeapYear):\r\n    print(str(year) + \" is a leap year!\")\r\nelse:\r\n    print(str(year) + \" is a common year!\")\r\n"
    },
    {
      "name" : "Week 3 - Branching/Opdrachten/Schrikkeljaar/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 3 - Branching/Opdrachten/LeeftijdsCheck/tests/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 3 - Branching/Opdrachten/LeeftijdsCheck/tests/test_task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import unittest\r\n\r\n\r\nclass TestCase(unittest.TestCase):\r\n    def test(self):\r\n        self.assertEqual(1, 0, msg=\"Implement tests\")\r\n"
    },
    {
      "name" : "Week 3 - Branching/Opdrachten/LeeftijdsCheck/task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "Name = \"Aron\"\r\nAge = 70\r\n\r\nif(Age <= 18):\r\n    print(\"Reduction = 10%\")\r\nelif(Age <=65):\r\n    print(\"Reduction = 0%\")\r\nelse:\r\n    print(\"Reduction = 25%\")\r\n"
    },
    {
      "name" : "Week 3 - Branching/Opdrachten/LeeftijdsCheck/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 3 - Branching/Opdrachten/OnderGelijkOfBoven/tests/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 3 - Branching/Opdrachten/OnderGelijkOfBoven/tests/test_task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import unittest\r\n\r\n\r\nclass TestCase(unittest.TestCase):\r\n    def test(self):\r\n        self.assertEqual(1, 0, msg=\"Implement tests\")\r\n"
    },
    {
      "name" : "Week 3 - Branching/Opdrachten/OnderGelijkOfBoven/task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import random\r\n\r\nnumber = int(input(\"Enter a number:\\n\"))\r\nrandomNumber = random.randint(0, 100)\r\n\r\nif(number < 0):\r\n    print(\"No negative numbers!\")\r\nelif(number < randomNumber):\r\n    print(\"The number is below the random number.\")\r\nelif(number == randomNumber):\r\n    print(\"The number is equal to the random number!\")\r\nelif(number > randomNumber and number <= 100):\r\n    print(\"The number is above the random number.\")\r\nelse:\r\n    print(\"No numbers higher than 100!\")\r\n"
    },
    {
      "name" : "Week 3 - Branching/Opdrachten/OnderGelijkOfBoven/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 3 - Branching/Geneste if - else/Programma 1/tests/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 3 - Branching/Geneste if - else/Programma 1/tests/test_task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import unittest\r\n\r\n\r\nclass TestCase(unittest.TestCase):\r\n    def test(self):\r\n        self.assertEqual(1, 0, msg=\"Implement tests\")\r\n"
    },
    {
      "name" : "Week 3 - Branching/Geneste if - else/Programma 1/task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "x = 21/3\r\ny = x * 2\r\n#Keyword(s): if, else\r\n#Uitgevoerd: Ja\r\n#Conditie variabele(n): x\r\n#Conditie: x < 15\r\n#Conditie uitkomst: True\r\n#Uitgevoerd pad: 1\r\nif(x < 15):\r\n    print(\"Pad 1.\")\r\n    #Keyword(s): if\r\n    #Uitgevoerd: Ja\r\n    #Conditie variabele(n): y\r\n    #Conditie: 10 >= y\r\n    #Conditie uitkomst: False\r\n    #Uitgevoerd pad: 3\r\n    if(10 >= y):\r\n        print(\"Pad 2.\")\r\n    else:\r\n        print(\"Pad 3.\")\r\nelse:\r\n    print(\"Pad 4.\")\r\nprint(\"Einde programma.\")\r\n"
    },
    {
      "name" : "Week 3 - Branching/Geneste if - else/Programma 1/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 3 - Branching/Geneste if - else/Programma 2/tests/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 3 - Branching/Geneste if - else/Programma 2/tests/test_task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import unittest\r\n\r\n\r\nclass TestCase(unittest.TestCase):\r\n    def test(self):\r\n        self.assertEqual(1, 0, msg=\"Implement tests\")\r\n"
    },
    {
      "name" : "Week 3 - Branching/Geneste if - else/Programma 2/task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "x = 21/3\r\ny = x/3 * 4\r\nz = 24\r\n#Keyword(s): if, else\r\n#Uitgevoerd: Ja\r\n#Conditie variabele(n): z\r\n#Conditie: x < 15\r\n#Conditie uitkomst: True\r\n#Uitgevoerd pad: 1\r\nif(z > 20):\r\n    print(\"Pad 1.\")\r\n    #Keyword(s): if, else\r\n    #Uitgevoerd: Ja\r\n    #Conditie variabele(n): y\r\n    #Conditie: 10 >= y\r\n    #Conditie uitkomst: False\r\n    #Uitgevoerd pad: 2\r\n    if(5 <= y):\r\n        print(\"Pad 2.\")\r\n        #Keyword(s): if, else\r\n        #Uitgevoerd: JA\r\n        #Conditie variabele(n): x, y\r\n        #Conditie: 10 >= y\r\n        #Conditie uitkomst: False\r\n        #Uitgevoerd pad: 4\r\n        if(50 >= x * y):\r\n            print(\"Pad 3.\")\r\n        else:\r\n            print(\"Pad 4.\")\r\n    else:\r\n        print(\"Pad 5.\")\r\nelse:\r\n    print(\"Pad 6.\")\r\nprint(\"Einde programma.\")\r\n"
    },
    {
      "name" : "Week 3 - Branching/Geneste if - else/Programma 2/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 3 - Branching/Geneste if - else/Programma 3/tests/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 3 - Branching/Geneste if - else/Programma 3/tests/test_task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import unittest\r\n\r\n\r\nclass TestCase(unittest.TestCase):\r\n    def test(self):\r\n        self.assertEqual(1, 0, msg=\"Implement tests\")\r\n"
    },
    {
      "name" : "Week 3 - Branching/Geneste if - else/Programma 3/task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "x = 21/3\r\ny = x/3 * 4\r\nz = 24\r\n#Keyword(s): if, else\r\n#Uitgevoerd: Ja\r\n#Conditie variabele(n): z\r\n#Conditie: x < 15\r\n#Conditie uitkomst: False\r\n#Uitgevoerd pad: 6\r\nif(z < 20):\r\n    print(\"Pad 1.\")\r\n    #Keyword(s): if, else\r\n    #Uitgevoerd: Nee\r\n    #Conditie variabele(n): y\r\n    #Conditie: 10 >= y\r\n    #Conditie uitkomst: False\r\n    #Uitgevoerd pad: geen\r\n    if(5 <= y):\r\n        print(\"Pad 2.\")\r\n        #Keyword(s): if, else\r\n        #Uitgevoerd: Nee\r\n        #Conditie variabele(n): x, y\r\n        #Conditie: 10 >= y\r\n        #Conditie uitkomst: False\r\n        #Uitgevoerd pad: geen\r\n        if(50 >= x * y):\r\n            print(\"Pad 3.\")\r\n        else:\r\n            print(\"Pad 4.\")\r\n    else:\r\n        print(\"Pad 5.\")\r\nelse:\r\n    print(\"Pad 6.\")\r\nprint(\"Einde programma.\")\r\n"
    },
    {
      "name" : "Week 3 - Branching/Geneste if - else/Programma 3/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 6 - For loops/For loops/Structuur #1/tests/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 6 - For loops/For loops/Structuur #1/tests/test_task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import unittest\r\n\r\n\r\nclass TestCase(unittest.TestCase):\r\n    def test(self):\r\n        self.assertEqual(1, 0, msg=\"Implement tests\")\r\n"
    },
    {
      "name" : "Week 6 - For loops/For loops/Structuur #1/task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "# TODO: type solution here\r\n"
    },
    {
      "name" : "Week 6 - For loops/For loops/Structuur #1/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 6 - For loops/For loops/Structuur #2/tests/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 6 - For loops/For loops/Structuur #2/tests/test_task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import unittest\r\n\r\n\r\nclass TestCase(unittest.TestCase):\r\n    def test(self):\r\n        self.assertEqual(1, 0, msg=\"Implement tests\")\r\n"
    },
    {
      "name" : "Week 6 - For loops/For loops/Structuur #2/task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "# TODO: type solution here\r\n"
    },
    {
      "name" : "Week 6 - For loops/For loops/Structuur #2/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 6 - For loops/For loops/Structuur #3/tests/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 6 - For loops/For loops/Structuur #3/tests/test_task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import unittest\r\n\r\n\r\nclass TestCase(unittest.TestCase):\r\n    def test(self):\r\n        self.assertEqual(1, 0, msg=\"Implement tests\")\r\n"
    },
    {
      "name" : "Week 6 - For loops/For loops/Structuur #3/task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "# TODO: type solution here\r\n"
    },
    {
      "name" : "Week 6 - For loops/For loops/Structuur #3/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 6 - For loops/For loops/For loop variabele/tests/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 6 - For loops/For loops/For loop variabele/tests/test_task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import unittest\r\n\r\n\r\nclass TestCase(unittest.TestCase):\r\n    def test(self):\r\n        self.assertEqual(1, 0, msg=\"Implement tests\")\r\n"
    },
    {
      "name" : "Week 6 - For loops/For loops/For loop variabele/task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "#Task 1\r\narray1 = [1, 2, 3, 4, 5]\r\n\r\nfor element in array1:\r\n    print(element)\r\n\r\n#Task 2\r\nstring1 = \"abcd\"\r\n\r\nreturnString = \"\"\r\nfor symbol in string1:\r\n    if(len(returnString)<3):\r\n        returnString = returnString + symbol\r\n\r\n#Task 3\r\narray2 = [True, False, True, True, True, False, False, True]\r\ncounter = 0\r\nfor boolean in array2:\r\n    if(not(boolean)):\r\n        counter = counter + 1\r\nprint(str(counter) + \" Falses counted\")\r\n"
    },
    {
      "name" : "Week 6 - For loops/For loops/For loop variabele/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 6 - For loops/For loops/For element in array/tests/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 6 - For loops/For loops/For element in array/tests/test_task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import unittest\r\n\r\n\r\nclass TestCase(unittest.TestCase):\r\n    def test(self):\r\n        self.assertEqual(1, 0, msg=\"Implement tests\")\r\n"
    },
    {
      "name" : "Week 6 - For loops/For loops/For element in array/task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "players = []\r\n\r\nplayers.append([\"p1\", 27])\r\nplayers.append([\"p2\", 43])\r\nplayers.append([\"p3\", 72])\r\nplayers.append([\"p4\", 12])\r\nplayers.append([\"p5\", 22])\r\nplayers.append([\"p6\", 61])\r\n\r\nloser =players[0]\r\n\r\nfor i in (range(len(players))):\r\n    points = players[i][1]\r\n    if(loser[1] > points):\r\n        loser = players[i]\r\n\r\nwinner = players[0]\r\n\r\nfor player in players:\r\n    points = player[1]\r\n    if(winner[1] < points):\r\n        winner = player\r\n\r\nprint(winner[0] + \" is the winner with \" + str(winner[1]) + \" points!\")\r\nprint(loser[0] + \" is the loser with \" + str(loser[1]) + \" points...\")\r\n\r\n"
    },
    {
      "name" : "Week 6 - For loops/For loops/For element in array/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 5 - While loops/Opdrachten/Kassa #2/tests/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 5 - While loops/Opdrachten/Kassa #2/tests/test_task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import unittest\r\n\r\n\r\nclass TestCase(unittest.TestCase):\r\n    def test(self):\r\n        self.assertEqual(1, 0, msg=\"Implement tests\")\r\n"
    },
    {
      "name" : "Week 5 - While loops/Opdrachten/Kassa #2/task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "# TODO: type solution here\r\n"
    },
    {
      "name" : "Week 5 - While loops/Opdrachten/Kassa #2/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 5 - While loops/Opdrachten/Tellen #2/tests/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 5 - While loops/Opdrachten/Tellen #2/tests/test_task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import unittest\r\n\r\n\r\nclass TestCase(unittest.TestCase):\r\n    def test(self):\r\n        self.assertEqual(1, 0, msg=\"Implement tests\")\r\n"
    },
    {
      "name" : "Week 5 - While loops/Opdrachten/Tellen #2/task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "#Task 1\r\n#Amount of iterations:  10\r\nconditionVar1 = 0\r\n\r\nwhile(conditionVar1 < 5):\r\n    conditionVar1 = conditionVar1 + 0.5\r\n\r\n#Task 2\r\n\r\n#Amount of iterations:  5\r\nconditionVar2 = 10\r\n\r\nwhile(conditionVar2 >= 0):\r\n    conditionVar2 = conditionVar2 - 2\r\n\r\n#Task 3\r\n#Amount of iterations:  50\r\nconditionVar3 = 100\r\n\r\nwhile(conditionVar3 != 50):\r\n    if(conditionVar3>50):\r\n        conditionVar3 = conditionVar3 - 1\r\n    else:\r\n        conditionVar3 = conditionVar3 + 1\r\n"
    },
    {
      "name" : "Week 5 - While loops/Opdrachten/Tellen #2/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 5 - While loops/Opdrachten/Programma loop/tests/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 5 - While loops/Opdrachten/Programma loop/tests/test_task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import unittest\r\n\r\n\r\nclass TestCase(unittest.TestCase):\r\n    def test(self):\r\n        self.assertEqual(1, 0, msg=\"Implement tests\")\r\n"
    },
    {
      "name" : "Week 5 - While loops/Opdrachten/Programma loop/task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "def programLoop():\r\n    active = True\r\n    while(active):\r\n        print(\"Doing stuff\")\r\n        userInput = input(\"Do you want to continue? [y/n]\\n\")\r\n        if(userInput == \"n\"):\r\n            print(\"quiting\")\r\n            active = False\r\n        elif(userInput == \"y\"):\r\n            print(\"continueing\")\r\n            continue\r\n        else:\r\n            print(\"Please enter \\\"y\\\" or \\\"n\\\"\")\r\n\r\nprogramLoop()\r\n"
    },
    {
      "name" : "Week 5 - While loops/Opdrachten/Programma loop/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 5 - While loops/While loops/Tellen/tests/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 5 - While loops/While loops/Tellen/tests/test_task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import unittest\r\n\r\n\r\nclass TestCase(unittest.TestCase):\r\n    def test(self):\r\n        self.assertEqual(1, 0, msg=\"Implement tests\")\r\n"
    },
    {
      "name" : "Week 5 - While loops/While loops/Tellen/task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "#Task 1\r\nconditionVariable1 = 0\r\n\r\nwhile(conditionVariable1 < 10):\r\n    print(conditionVariable1 + 1)\r\n    conditionVariable1 = conditionVariable1 + 1\r\n\r\n#Task 2\r\nconditionVariable2 = 10\r\n\r\nwhile(conditionVariable2>-1):\r\n    conditionVariable2 = conditionVariable2 - 1\r\n\r\n#Task 3\r\nconditionVariable3 = len(\"aString\")\r\nwhile(conditionVariable3>=0):\r\n    conditionVariable3 =conditionVariable3 - 1\r\n\r\n#Task 4\r\narray=[4, 7, 123, 556]\r\nconditionVariable4 = 0\r\n\r\nwhile(conditionVariable4 < len(array)):\r\n    print(conditionVariable4)\r\n    conditionVariable4 = conditionVariable4 + 1\r\n"
    },
    {
      "name" : "Week 5 - While loops/While loops/Tellen/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 5 - While loops/While loops/Structuur #1/tests/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 5 - While loops/While loops/Structuur #1/tests/test_task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import unittest\r\n\r\n\r\nclass TestCase(unittest.TestCase):\r\n    def test(self):\r\n        self.assertEqual(1, 0, msg=\"Implement tests\")\r\n"
    },
    {
      "name" : "Week 5 - While loops/While loops/Structuur #1/task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "conditionVariable = 0\r\n\r\nwhile(conditionVariable <= 4):\r\n    print(conditionVariable)\r\n    conditionVariable = conditionVariable + 1\r\n"
    },
    {
      "name" : "Week 5 - While loops/While loops/Structuur #1/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 5 - While loops/While loops/Structuur #2/tests/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 5 - While loops/While loops/Structuur #2/tests/test_task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import unittest\r\n\r\n\r\nclass TestCase(unittest.TestCase):\r\n    def test(self):\r\n        self.assertEqual(1, 0, msg=\"Implement tests\")\r\n"
    },
    {
      "name" : "Week 5 - While loops/While loops/Structuur #2/task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "condition = True\r\ncounter = 0\r\n\r\nwhile(condition):\r\n    if(counter <= 4):\r\n        print(counter)\r\n        counter = counter + 1\r\n    else:\r\n        condition = False\r\n"
    },
    {
      "name" : "Week 5 - While loops/While loops/Structuur #2/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 5 - While loops/While loops/Structuur #3/tests/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 5 - While loops/While loops/Structuur #3/tests/test_task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import unittest\r\n\r\n\r\nclass TestCase(unittest.TestCase):\r\n    def test(self):\r\n        self.assertEqual(1, 0, msg=\"Implement tests\")\r\n"
    },
    {
      "name" : "Week 5 - While loops/While loops/Structuur #3/task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 5 - While loops/While loops/Structuur #3/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 5 - While loops/While loops/Iteraties over indexen/tests/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 5 - While loops/While loops/Iteraties over indexen/tests/test_task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import unittest\r\n\r\n\r\nclass TestCase(unittest.TestCase):\r\n    def test(self):\r\n        self.assertEqual(1, 0, msg=\"Implement tests\")\r\n"
    },
    {
      "name" : "Week 5 - While loops/While loops/Iteraties over indexen/task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "array1 = [23, 62, 94]\r\narray2 = [55, 45, 7]\r\n\r\n#Task 1\r\nindex = 0\r\n\r\nwhile(index < len(array1)):\r\n    print(array1[index])\r\n    index = index + 1\r\n\r\n#Task 2\r\nindex = len(array1) - 1\r\n\r\nwhile(index>=0):\r\n    print(array1[index])\r\n    index = index - 1\r\n\r\n#Task 3\r\nif(len(array1) == len(array2)):\r\n    index = 0\r\n    while(index < len(array2)):\r\n        array2[index] = array1[index] + array2[index]\r\n        index = index + 1\r\n"
    },
    {
      "name" : "Week 5 - While loops/While loops/Iteraties over indexen/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Eindopdrachten - Python/Opdracht 1/Omdraaien van tekst/tests/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Eindopdrachten - Python/Opdracht 1/Omdraaien van tekst/tests/test_task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import unittest\r\n\r\n\r\nclass TestCase(unittest.TestCase):\r\n    def test(self):\r\n        self.assertEqual(1, 0, msg=\"Implement tests\")\r\n"
    },
    {
      "name" : "Eindopdrachten - Python/Opdracht 1/Omdraaien van tekst/task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "def run():\r\n    textInput = input(\"Enter the text you would like to reverse:\\n\")\r\n    reversedText = reverse(textInput)\r\n    print(\"Your reversed string is:\\n\" + reversedText)\r\n\r\ndef reverse(text):\r\n    return \"Nope\"\r\n\r\nrun()\r\n"
    },
    {
      "name" : "Eindopdrachten - Python/Opdracht 1/Omdraaien van tekst/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Eindopdrachten - Python/Opdracht 2/Steen.... papier.... schaar!/tests/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Eindopdrachten - Python/Opdracht 2/Steen.... papier.... schaar!/tests/test_task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import unittest\r\n\r\n\r\nclass TestCase(unittest.TestCase):\r\n    def test(self):\r\n        self.assertEqual(1, 0, msg=\"Implement tests\")\r\n"
    },
    {
      "name" : "Eindopdrachten - Python/Opdracht 2/Steen.... papier.... schaar!/task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "def run():\r\n    p1Weapon = pickWeapon()\r\n    p2Weapon = pickWeapon()\r\n    winnerAndWeapon = RockPaperScissors(p1Weapon, p2Weapon)\r\n    print(\"The winner is: \"+winnerAndWeapon[0] +\"\\n With the weapon: \"+ winnerAndWeapon[1])\r\n\r\ndef pickWeapon():\r\n    print(\"Pick one of the following weapons (select the number):\")\r\n    print(\"[1] - Rock\")\r\n    print(\"[2] - Paper\")\r\n    print(\"[3] - Scissor\")\r\n    weaponNumber = input(\"Your choice: \\n\")\r\n    if(weaponNumber == \"1\"):\r\n        return \"Rock\"\r\n    elif(weaponNumber == \"2\"):\r\n        return \"Paper\"\r\n    elif(weaponNumber == \"3\"):\r\n        return \"Scissor\"\r\n    else:\r\n        return pickWeapon()\r\n\r\n## input1: String, input2: String\r\n## output: Array of two string elements\r\n### example output: [\"Player1\", \"Rock\"]\r\ndef RockPaperScissors(player1Weapon, player2Weapon):\r\n    return \"Nope\"\r\n\r\nrun()\r\n"
    },
    {
      "name" : "Eindopdrachten - Python/Opdracht 2/Steen.... papier.... schaar!/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Eindopdrachten - Python/Opdracht 3/Ceasar cypher/tests/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Eindopdrachten - Python/Opdracht 3/Ceasar cypher/tests/test_task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import unittest\r\n\r\n\r\nclass TestCase(unittest.TestCase):\r\n    def test(self):\r\n        self.assertEqual(1, 0, msg=\"Implement tests\")\r\n"
    },
    {
      "name" : "Eindopdrachten - Python/Opdracht 3/Ceasar cypher/task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "def run():\r\n    toBeCyphered = input(\"Enter the phrase you would like to hide:\\n\")\r\n    amountOfStepsToChange = int(input(\"Enter a number:\\n\"))\r\n    returnValue = ceasarCypher(toBeCyphered, amountOfStepsToChange)\r\n    print(\"Your ceasar cyphered message is:\\n\"+returnValue)\r\n\r\n## Input1: String, input2: Integer\r\n## Return: String\r\ndef ceasarCypher(stringInput, steps):\r\n    return \"Nope\"\r\n\r\nrun()\r\n"
    },
    {
      "name" : "Eindopdrachten - Python/Opdracht 3/Ceasar cypher/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 4 - Arrays en functies/Arrays/Aanmaken/tests/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 4 - Arrays en functies/Arrays/Aanmaken/tests/test_task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import unittest\r\n\r\n\r\nclass TestCase(unittest.TestCase):\r\n    def test(self):\r\n        self.assertEqual(1, 0, msg=\"Implement tests\")\r\n"
    },
    {
      "name" : "Week 4 - Arrays en functies/Arrays/Aanmaken/task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "emptyArray = []\r\n\r\nintegerArray = [1, 2, 3]\r\n\r\nstringArray = [\"1\", \"2\", \"3\"]\r\n\r\narrayOfArrays = [emptyArray, integerArray, stringArray]\r\n\r\n"
    },
    {
      "name" : "Week 4 - Arrays en functies/Arrays/Aanmaken/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 4 - Arrays en functies/Arrays/Data aanroepen/tests/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 4 - Arrays en functies/Arrays/Data aanroepen/tests/test_task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import unittest\r\n\r\n\r\nclass TestCase(unittest.TestCase):\r\n    def test(self):\r\n        self.assertEqual(1, 0, msg=\"Implement tests\")\r\n"
    },
    {
      "name" : "Week 4 - Arrays en functies/Arrays/Data aanroepen/task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "emptyArray = []\r\n\r\nintegerArray = [1, 2, 3]\r\n\r\nstringArray = [\"1\", \"2\", \"3\"]\r\n\r\narrayOfArrays = [emptyArray, integerArray, stringArray]\r\n\r\na = integerArray[2]\r\n#Variabele naam: a\r\n#Variabele waarde: 3\r\n#Variabele type: integer\r\n\r\nb = integerArray[2-1]\r\n#Variabele naam: b\r\n#Variabele waarde: 2\r\n#Variabele type: integer\r\n\r\nc = stringArray[4//2]\r\n#Variabele naam: c\r\n#Variabele waarde: \"3\"\r\n#Variabele type: string\r\n\r\nd = stringArray[0]\r\n#Variabele naam: d\r\n#Variabele waarde: \"1\"\r\n#Variabele type: string\r\n\r\ne = arrayOfArrays[2]\r\n#Variabele naam: e\r\n#Variabele waarde: [\"1\", \"2\", \"3\"]\r\n#Variabele type: array\r\n\r\nf = arrayOfArrays[1][0]\r\n#Variabele naam: f\r\n#Variabele waarde: 1\r\n#Variabele type: integer\r\n\r\ng = arrayOfArrays[2][2]\r\n#Variabele naam: g\r\n#Variabele waarde: \"3\"\r\n#Variabele type: string\r\n\r\nh = arrayOfArrays[0]\r\n#Variabele naam: h\r\n#Variabele waarde: []\r\n#Variabele type: array\r\n"
    },
    {
      "name" : "Week 4 - Arrays en functies/Arrays/Data aanroepen/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 4 - Arrays en functies/Arrays/Data toevoegen/tests/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 4 - Arrays en functies/Arrays/Data toevoegen/tests/test_task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import unittest\r\n\r\n\r\nclass TestCase(unittest.TestCase):\r\n    def test(self):\r\n        self.assertEqual(1, 0, msg=\"Implement tests\")\r\n"
    },
    {
      "name" : "Week 4 - Arrays en functies/Arrays/Data toevoegen/task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "emptyArray = []\r\n\r\nintegerArray = [1, 2, 3]\r\n\r\nstringArray = [\"1\", \"2\", \"3\"]\r\n\r\narrayOfArrays = [emptyArray, integerArray, stringArray]\r\n\r\nemptyArray.append(\"first\")\r\n#Variabele naam: emptyArray\r\n#Variabele waarde: [\"first\"]\r\n#Variabele type: array\r\n\r\nemptyArray.append(\"second\")\r\n#Variabele naam: emptyArray\r\n#Variabele waarde: [\"first\", \"second\"]\r\n#Variabele type: array\r\n\r\nintegerArray.append(1)\r\n#Variabele naam: integerArray\r\n#Variabele waarde: [1, 2, 3, 1]\r\n#Variabele type: array\r\n\r\nstringArray.append(\"4\")\r\n#Variabele naam: stringArray\r\n#Variabele waarde: [\"1\", \"2\", \"3\", \"4\"]\r\n#Variabele type: array\r\n\r\nintegerArray.append(13)\r\n#Variabele naam: integerArray\r\n#Variabele waarde: [1, 2, 3, 1, 13]\r\n#Variabele type: array\r\n"
    },
    {
      "name" : "Week 4 - Arrays en functies/Arrays/Data toevoegen/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 4 - Arrays en functies/Arrays/Data verwijderen/tests/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 4 - Arrays en functies/Arrays/Data verwijderen/tests/test_task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import unittest\r\n\r\n\r\nclass TestCase(unittest.TestCase):\r\n    def test(self):\r\n        self.assertEqual(1, 0, msg=\"Implement tests\")\r\n"
    },
    {
      "name" : "Week 4 - Arrays en functies/Arrays/Data verwijderen/task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "emptyArray = []\r\n\r\nintegerArray = [1, 2, 3]\r\n\r\nstringArray = [\"1\", \"2\", \"3\"]\r\n\r\nintegerArray.remove(3)\r\n#Variabele naam: integerArray\r\n#Variabele waarde: [1, 2]\r\n#Variabele type: array\r\n\r\nintegerArray.remove(1)\r\n#Variabele naam: integerArray\r\n#Variabele waarde: [2]\r\n#Variabele type: array\r\n\r\nstringArray.remove(\"2\")\r\n#Variabele naam: stringArray\r\n#Variabele waarde: [\"1\", \"3\"]\r\n#Variabele type: array\r\n"
    },
    {
      "name" : "Week 4 - Arrays en functies/Arrays/Data verwijderen/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 4 - Arrays en functies/Arrays/Data overschrijven/tests/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 4 - Arrays en functies/Arrays/Data overschrijven/tests/test_task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import unittest\r\n\r\n\r\nclass TestCase(unittest.TestCase):\r\n    def test(self):\r\n        self.assertEqual(1, 0, msg=\"Implement tests\")\r\n"
    },
    {
      "name" : "Week 4 - Arrays en functies/Arrays/Data overschrijven/task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "emptyArray = []\r\n\r\nintegerArray = [1, 2, 3]\r\n\r\nstringArray = [\"1\", \"2\", \"3\"]\r\n\r\narrayOfArrays = [emptyArray, integerArray, stringArray]\r\n\r\nintegerArray[0] = integerArray[0] + 6\r\na = integerArray[0]\r\n#Variabele naam: a\r\n#Variabele waarde: 7\r\n#Variabele type: integer\r\n\r\nintegerArray[1] = integerArray[1] * 2\r\nb = integerArray[1]\r\n#Variabele naam: b\r\n#Variabele waarde: 4\r\n#Variabele type: integer\r\n\r\nstringArray[2] = stringArray[2] + stringArray[0]\r\nc = stringArray[2]\r\n#Variabele naam: c\r\n#Variabele waarde: \"31\"\r\n#Variabele type: string\r\n\r\nstringArray[0] = \"abc\"\r\nd = stringArray[0]\r\n#Variabele naam: d\r\n#Variabele waarde: \"abc\"\r\n#Variabele type: string\r\n"
    },
    {
      "name" : "Week 4 - Arrays en functies/Arrays/Data overschrijven/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 4 - Arrays en functies/Functies/Len/tests/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 4 - Arrays en functies/Functies/Len/tests/test_task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import unittest\r\n\r\n\r\nclass TestCase(unittest.TestCase):\r\n    def test(self):\r\n        self.assertEqual(1, 0, msg=\"Implement tests\")\r\n"
    },
    {
      "name" : "Week 4 - Arrays en functies/Functies/Len/task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "array1 = [1, 2, 3]\r\narray2 = [\"ab\", \"bcd\", \"efgh\"]\r\n\r\n#Task 1\r\narray1Len = len(array1)\r\nprint(array1Len)\r\n\r\narray2Len = len(array2)\r\nprint(array1Len)\r\n\r\n#Task 2\r\narray2Index0Len = len(array2[0])\r\nprint(array2Index0Len)\r\narray2Index2Len = len(array2[2])\r\nprint(array2Index2Len)\r\n"
    },
    {
      "name" : "Week 4 - Arrays en functies/Functies/Len/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 4 - Arrays en functies/Functies/Input/tests/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 4 - Arrays en functies/Functies/Input/tests/test_task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import unittest\r\n\r\n\r\nclass TestCase(unittest.TestCase):\r\n    def test(self):\r\n        self.assertEqual(1, 0, msg=\"Implement tests\")\r\n"
    },
    {
      "name" : "Week 4 - Arrays en functies/Functies/Input/task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "userInput = input(\"Enter a number\")\r\n#Functie naam: input\r\n#Variabele naam: userInput\r\n#Variabele waarde: unknown\r\n#Variabele type: string\r\n"
    },
    {
      "name" : "Week 4 - Arrays en functies/Functies/Input/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 4 - Arrays en functies/Functies/Print/tests/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 4 - Arrays en functies/Functies/Print/tests/test_task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import unittest\r\n\r\n\r\nclass TestCase(unittest.TestCase):\r\n    def test(self):\r\n        self.assertEqual(1, 0, msg=\"Implement tests\")\r\n"
    },
    {
      "name" : "Week 4 - Arrays en functies/Functies/Print/task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "# TODO: type solution here\r\n"
    },
    {
      "name" : "Week 4 - Arrays en functies/Functies/Print/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 4 - Arrays en functies/Functies/Range/tests/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 4 - Arrays en functies/Functies/Range/tests/test_task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import unittest\r\n\r\n\r\nclass TestCase(unittest.TestCase):\r\n    def test(self):\r\n        self.assertEqual(1, 0, msg=\"Implement tests\")\r\n"
    },
    {
      "name" : "Week 4 - Arrays en functies/Functies/Range/task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "conditionVariable = 0\r\n\r\nwhile(conditionVariable <= 4):\r\n    print(conditionVariable)\r\n    conditionVariable = conditionVariable + 1\r\n"
    },
    {
      "name" : "Week 4 - Arrays en functies/Functies/Range/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 4 - Arrays en functies/Functies/Casting/tests/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 4 - Arrays en functies/Functies/Casting/tests/test_task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import unittest\r\n\r\n\r\nclass TestCase(unittest.TestCase):\r\n    def test(self):\r\n        self.assertEqual(1, 0, msg=\"Implement tests\")\r\n"
    },
    {
      "name" : "Week 4 - Arrays en functies/Functies/Casting/task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "string = \"123\"\r\ninteger = 123\r\n\r\nstring = int(string)\r\n#Functie naam: int\r\n#Functie input waarde: \"123\"\r\n#Variabele naam: string\r\n#Variabele waarde: 123\r\n#Variabele type: integer\r\n\r\ninteger = str(integer)\r\n#Functie naam: str\r\n#Functie input waarde: 123\r\n#Variabele naam: integer\r\n#Variabele waarde: \"123\"\r\n#Variabele type: string\r\n"
    },
    {
      "name" : "Week 4 - Arrays en functies/Functies/Casting/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 4 - Arrays en functies/Functies/Extra - Try Except/tests/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 4 - Arrays en functies/Functies/Extra - Try Except/tests/test_task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import unittest\r\n\r\n\r\nclass TestCase(unittest.TestCase):\r\n    def test(self):\r\n        self.assertEqual(1, 0, msg=\"Implement tests\")\r\n"
    },
    {
      "name" : "Week 4 - Arrays en functies/Functies/Extra - Try Except/task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "intInput = input(\"Enter a number:\\n\")\r\n\r\ntry:\r\n    intInput = int(intInput)\r\nexcept:\r\n    print(\"Please enter a number... try it once more...\")\r\n    intInput = int(input(\"Enter a number:\\n\"))\r\n\r\nprint(intInput)\r\n"
    },
    {
      "name" : "Week 4 - Arrays en functies/Functies/Extra - Try Except/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 4 - Arrays en functies/Opdrachten/Cash register/tests/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 4 - Arrays en functies/Opdrachten/Cash register/tests/test_task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import unittest\r\n\r\n\r\nclass TestCase(unittest.TestCase):\r\n    def test(self):\r\n        self.assertEqual(1, 0, msg=\"Implement tests\")\r\n"
    },
    {
      "name" : "Week 4 - Arrays en functies/Opdrachten/Cash register/task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "products = [[\"Apple\", 2], [\"Bread\", 1], [\"Melon\", 3]]\r\namounts = [0, 0, 0]\r\n\r\namounts[0] = int(input(\"How much \"+products[0][0]+ \" would you like?\\n\"))\r\namounts[1] = int(input(\"How much \"+products[1][0]+ \" would you like?\\n\"))\r\namounts[2] = int(input(\"How much \"+products[0][0]+ \" would you like?\\n\"))\r\n\r\ntotal = products[0][1] * amounts[0] + products[1][1] * amounts[1] + products[2][1] * amounts[2]\r\n\r\nprint(\"You have to pay: \"+ str(total))\r\n"
    },
    {
      "name" : "Week 4 - Arrays en functies/Opdrachten/Cash register/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 4 - Arrays en functies/Opdrachten/Totale leeftijd/tests/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "Week 4 - Arrays en functies/Opdrachten/Totale leeftijd/tests/test_task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import unittest\r\n\r\n\r\nclass TestCase(unittest.TestCase):\r\n    def test(self):\r\n        self.assertEqual(1, 0, msg=\"Implement tests\")\r\n"
    },
    {
      "name" : "Week 4 - Arrays en functies/Opdrachten/Totale leeftijd/task.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "persons = [[\"p1\", 19], [\"p2\", 18], [\"p3\", 22], [\"p4\", 21]]\r\n\r\nperson1Age = persons[0][1]\r\nperson3Name = persons[2][0]\r\n\r\nprint(\"person 1: \" + persons[0][0] +\" with age: \" + str(person1Age))\r\nprint(\"person 2: \" + persons[1][0] +\" with age: \" + str(persons[1][1]))\r\nprint(\"person 3: \" + person3Name +\" with age: \" + str(persons[2][1]))\r\nprint(\"person 4: \" + persons[3][0] +\" with age: \" + str(persons[3][1]))\r\n\r\nprint(\"The combined age of all persons is: \" + str(persons[0][1] + persons[1][1] + persons[2][1] + persons[3][1]))\r\n"
    },
    {
      "name" : "Week 4 - Arrays en functies/Opdrachten/Totale leeftijd/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    }
  ],
  "version" : 11
}